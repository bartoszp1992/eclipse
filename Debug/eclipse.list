
eclipse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ecc  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002f84  08002f84  00012f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800306c  0800306c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800306c  0800306c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800306c  0800306c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003070  08003070  00013070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08003080  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08003080  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000892c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b7e  00000000  00000000  00028960  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  0002a4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  0002ace8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014b7a  00000000  00000000  0002b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008870  00000000  00000000  0003ff62  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f629  00000000  00000000  000487d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7dfb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a18  00000000  00000000  000c7e78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002f6c 	.word	0x08002f6c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002f6c 	.word	0x08002f6c

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f001 f88a 	bl	8001334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f8fc 	bl	800041c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f9e2 	bl	80005ec <MX_GPIO_Init>
  MX_RTC_Init();
 8000228:	f000 f966 	bl	80004f8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	mode = MODE_NORMAL;
 800022c:	4b74      	ldr	r3, [pc, #464]	; (8000400 <main+0x1e8>)
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
	dontSleepFlag = 0;
 8000232:	4b74      	ldr	r3, [pc, #464]	; (8000404 <main+0x1ec>)
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (mode == MODE_NORMAL) {
 8000238:	4b71      	ldr	r3, [pc, #452]	; (8000400 <main+0x1e8>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b2db      	uxtb	r3, r3
 800023e:	2b00      	cmp	r3, #0
 8000240:	d111      	bne.n	8000266 <main+0x4e>

			rtcGetTime();
 8000242:	f001 f813 	bl	800126c <rtcGetTime>
			displayShowTime(hours, minutes, 20, 15);
 8000246:	4b70      	ldr	r3, [pc, #448]	; (8000408 <main+0x1f0>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	b25b      	sxtb	r3, r3
 800024c:	b2d8      	uxtb	r0, r3
 800024e:	4b6f      	ldr	r3, [pc, #444]	; (800040c <main+0x1f4>)
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	b21b      	sxth	r3, r3
 8000254:	b2d9      	uxtb	r1, r3
 8000256:	230f      	movs	r3, #15
 8000258:	2214      	movs	r2, #20
 800025a:	f000 fc73 	bl	8000b44 <displayShowTime>
			dontSleepFlag = 0;
 800025e:	4b69      	ldr	r3, [pc, #420]	; (8000404 <main+0x1ec>)
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]
 8000264:	e0b0      	b.n	80003c8 <main+0x1b0>

		} else if (mode == MODE_SETTINGS_H || mode == MODE_SETTINGS_M) {
 8000266:	4b66      	ldr	r3, [pc, #408]	; (8000400 <main+0x1e8>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	2b01      	cmp	r3, #1
 800026e:	d004      	beq.n	800027a <main+0x62>
 8000270:	4b63      	ldr	r3, [pc, #396]	; (8000400 <main+0x1e8>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	2b02      	cmp	r3, #2
 8000278:	d135      	bne.n	80002e6 <main+0xce>

			displayTurnOff();
 800027a:	f000 fc35 	bl	8000ae8 <displayTurnOff>
			displayTurnMinutesLED(minutes / 2, 1);
 800027e:	4b63      	ldr	r3, [pc, #396]	; (800040c <main+0x1f4>)
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	b21b      	sxth	r3, r3
 8000284:	2b00      	cmp	r3, #0
 8000286:	da00      	bge.n	800028a <main+0x72>
 8000288:	3301      	adds	r3, #1
 800028a:	105b      	asrs	r3, r3, #1
 800028c:	b21b      	sxth	r3, r3
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2101      	movs	r1, #1
 8000292:	0018      	movs	r0, r3
 8000294:	f000 fdf4 	bl	8000e80 <displayTurnMinutesLED>

			if (minutes % 2 == 1) {
 8000298:	4b5c      	ldr	r3, [pc, #368]	; (800040c <main+0x1f4>)
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	b21b      	sxth	r3, r3
 800029e:	4a5c      	ldr	r2, [pc, #368]	; (8000410 <main+0x1f8>)
 80002a0:	4013      	ands	r3, r2
 80002a2:	d504      	bpl.n	80002ae <main+0x96>
 80002a4:	3b01      	subs	r3, #1
 80002a6:	2202      	movs	r2, #2
 80002a8:	4252      	negs	r2, r2
 80002aa:	4313      	orrs	r3, r2
 80002ac:	3301      	adds	r3, #1
 80002ae:	b21b      	sxth	r3, r3
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d106      	bne.n	80002c2 <main+0xaa>

				HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 80002b4:	4b57      	ldr	r3, [pc, #348]	; (8000414 <main+0x1fc>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	2110      	movs	r1, #16
 80002ba:	0018      	movs	r0, r3
 80002bc:	f001 fb57 	bl	800196e <HAL_GPIO_WritePin>
 80002c0:	e005      	b.n	80002ce <main+0xb6>

			} else {

				HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 80002c2:	4b54      	ldr	r3, [pc, #336]	; (8000414 <main+0x1fc>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	2110      	movs	r1, #16
 80002c8:	0018      	movs	r0, r3
 80002ca:	f001 fb50 	bl	800196e <HAL_GPIO_WritePin>

			}

			displayTurnHoursLED(hours, 1);
 80002ce:	4b4e      	ldr	r3, [pc, #312]	; (8000408 <main+0x1f0>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2101      	movs	r1, #1
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 fd47 	bl	8000d6c <displayTurnHoursLED>
			HAL_Delay(50);
 80002de:	2032      	movs	r0, #50	; 0x32
 80002e0:	f001 f8ae 	bl	8001440 <HAL_Delay>
 80002e4:	e070      	b.n	80003c8 <main+0x1b0>

		} else if (mode == MODE_SETTINGS_S) {
 80002e6:	4b46      	ldr	r3, [pc, #280]	; (8000400 <main+0x1e8>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	2b03      	cmp	r3, #3
 80002ee:	d12f      	bne.n	8000350 <main+0x138>

			rtcGetTime();
 80002f0:	f000 ffbc 	bl	800126c <rtcGetTime>
			displayTurnOff();
 80002f4:	f000 fbf8 	bl	8000ae8 <displayTurnOff>
			displayTurnMinutesLED(seconds / 2, 1);
 80002f8:	4b47      	ldr	r3, [pc, #284]	; (8000418 <main+0x200>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	b25b      	sxtb	r3, r3
 80002fe:	2b00      	cmp	r3, #0
 8000300:	da00      	bge.n	8000304 <main+0xec>
 8000302:	3301      	adds	r3, #1
 8000304:	105b      	asrs	r3, r3, #1
 8000306:	b25b      	sxtb	r3, r3
 8000308:	b2db      	uxtb	r3, r3
 800030a:	2101      	movs	r1, #1
 800030c:	0018      	movs	r0, r3
 800030e:	f000 fdb7 	bl	8000e80 <displayTurnMinutesLED>

			if (seconds % 2 == 1) {
 8000312:	4b41      	ldr	r3, [pc, #260]	; (8000418 <main+0x200>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	b25b      	sxtb	r3, r3
 8000318:	4a3d      	ldr	r2, [pc, #244]	; (8000410 <main+0x1f8>)
 800031a:	4013      	ands	r3, r2
 800031c:	d504      	bpl.n	8000328 <main+0x110>
 800031e:	3b01      	subs	r3, #1
 8000320:	2202      	movs	r2, #2
 8000322:	4252      	negs	r2, r2
 8000324:	4313      	orrs	r3, r2
 8000326:	3301      	adds	r3, #1
 8000328:	b25b      	sxtb	r3, r3
 800032a:	2b01      	cmp	r3, #1
 800032c:	d106      	bne.n	800033c <main+0x124>

				HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 800032e:	4b39      	ldr	r3, [pc, #228]	; (8000414 <main+0x1fc>)
 8000330:	2201      	movs	r2, #1
 8000332:	2110      	movs	r1, #16
 8000334:	0018      	movs	r0, r3
 8000336:	f001 fb1a 	bl	800196e <HAL_GPIO_WritePin>
 800033a:	e005      	b.n	8000348 <main+0x130>

			} else {

				HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 800033c:	4b35      	ldr	r3, [pc, #212]	; (8000414 <main+0x1fc>)
 800033e:	2200      	movs	r2, #0
 8000340:	2110      	movs	r1, #16
 8000342:	0018      	movs	r0, r3
 8000344:	f001 fb13 	bl	800196e <HAL_GPIO_WritePin>

			}

			HAL_Delay(50);
 8000348:	2032      	movs	r0, #50	; 0x32
 800034a:	f001 f879 	bl	8001440 <HAL_Delay>
 800034e:	e03b      	b.n	80003c8 <main+0x1b0>

		} else if (mode == MODE_SLEEP) {
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <main+0x1e8>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b04      	cmp	r3, #4
 8000358:	d10f      	bne.n	800037a <main+0x162>

			HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 800035a:	4b2e      	ldr	r3, [pc, #184]	; (8000414 <main+0x1fc>)
 800035c:	2201      	movs	r2, #1
 800035e:	2110      	movs	r1, #16
 8000360:	0018      	movs	r0, r3
 8000362:	f001 fb04 	bl	800196e <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8000366:	2032      	movs	r0, #50	; 0x32
 8000368:	f001 f86a 	bl	8001440 <HAL_Delay>
			HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 800036c:	4b29      	ldr	r3, [pc, #164]	; (8000414 <main+0x1fc>)
 800036e:	2200      	movs	r2, #0
 8000370:	2110      	movs	r1, #16
 8000372:	0018      	movs	r0, r3
 8000374:	f001 fafb 	bl	800196e <HAL_GPIO_WritePin>
 8000378:	e026      	b.n	80003c8 <main+0x1b0>

		} else if(mode == MODE_FORCE){
 800037a:	4b21      	ldr	r3, [pc, #132]	; (8000400 <main+0x1e8>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	2b05      	cmp	r3, #5
 8000382:	d121      	bne.n	80003c8 <main+0x1b0>

			rtcGetTime();//for actual seconds reading
 8000384:	f000 ff72 	bl	800126c <rtcGetTime>

			if(HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1){
 8000388:	2380      	movs	r3, #128	; 0x80
 800038a:	021b      	lsls	r3, r3, #8
 800038c:	4a21      	ldr	r2, [pc, #132]	; (8000414 <main+0x1fc>)
 800038e:	0019      	movs	r1, r3
 8000390:	0010      	movs	r0, r2
 8000392:	f001 facf 	bl	8001934 <HAL_GPIO_ReadPin>
 8000396:	0003      	movs	r3, r0
 8000398:	2b01      	cmp	r3, #1
 800039a:	d10c      	bne.n	80003b6 <main+0x19e>
				displayShowTimeForce(hours, minutes, 0);
 800039c:	4b1a      	ldr	r3, [pc, #104]	; (8000408 <main+0x1f0>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	b25b      	sxtb	r3, r3
 80003a2:	b2d8      	uxtb	r0, r3
 80003a4:	4b19      	ldr	r3, [pc, #100]	; (800040c <main+0x1f4>)
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	b21b      	sxth	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	2200      	movs	r2, #0
 80003ae:	0019      	movs	r1, r3
 80003b0:	f000 facc 	bl	800094c <displayShowTimeForce>
 80003b4:	e008      	b.n	80003c8 <main+0x1b0>
			}else{
				displayShowTimeForce(0, seconds, 1);
 80003b6:	4b18      	ldr	r3, [pc, #96]	; (8000418 <main+0x200>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	b25b      	sxtb	r3, r3
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	2201      	movs	r2, #1
 80003c0:	0019      	movs	r1, r3
 80003c2:	2000      	movs	r0, #0
 80003c4:	f000 fac2 	bl	800094c <displayShowTimeForce>
			}


		}

		if ((mode == MODE_NORMAL || mode == MODE_SLEEP) && dontSleepFlag == 0) {
 80003c8:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <main+0x1e8>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	b2db      	uxtb	r3, r3
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d005      	beq.n	80003de <main+0x1c6>
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <main+0x1e8>)
 80003d4:	781b      	ldrb	r3, [r3, #0]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	2b04      	cmp	r3, #4
 80003da:	d000      	beq.n	80003de <main+0x1c6>
 80003dc:	e72c      	b.n	8000238 <main+0x20>
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <main+0x1ec>)
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d000      	beq.n	80003ea <main+0x1d2>
 80003e8:	e726      	b.n	8000238 <main+0x20>

			mode = MODE_SLEEP;
 80003ea:	4b05      	ldr	r3, [pc, #20]	; (8000400 <main+0x1e8>)
 80003ec:	2204      	movs	r2, #4
 80003ee:	701a      	strb	r2, [r3, #0]
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80003f0:	2380      	movs	r3, #128	; 0x80
 80003f2:	01db      	lsls	r3, r3, #7
 80003f4:	2101      	movs	r1, #1
 80003f6:	0018      	movs	r0, r3
 80003f8:	f001 fb0e 	bl	8001a18 <HAL_PWR_EnterSTOPMode>
		if (mode == MODE_NORMAL) {
 80003fc:	e71c      	b.n	8000238 <main+0x20>
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	2000003d 	.word	0x2000003d
 8000404:	2000003c 	.word	0x2000003c
 8000408:	20000074 	.word	0x20000074
 800040c:	20000072 	.word	0x20000072
 8000410:	80000001 	.word	0x80000001
 8000414:	50000400 	.word	0x50000400
 8000418:	20000070 	.word	0x20000070

0800041c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800041c:	b590      	push	{r4, r7, lr}
 800041e:	b099      	sub	sp, #100	; 0x64
 8000420:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000422:	242c      	movs	r4, #44	; 0x2c
 8000424:	193b      	adds	r3, r7, r4
 8000426:	0018      	movs	r0, r3
 8000428:	2334      	movs	r3, #52	; 0x34
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f002 fd95 	bl	8002f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000432:	231c      	movs	r3, #28
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	0018      	movs	r0, r3
 8000438:	2310      	movs	r3, #16
 800043a:	001a      	movs	r2, r3
 800043c:	2100      	movs	r1, #0
 800043e:	f002 fd8d 	bl	8002f5c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000442:	003b      	movs	r3, r7
 8000444:	0018      	movs	r0, r3
 8000446:	231c      	movs	r3, #28
 8000448:	001a      	movs	r2, r3
 800044a:	2100      	movs	r1, #0
 800044c:	f002 fd86 	bl	8002f5c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000450:	2380      	movs	r3, #128	; 0x80
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	0018      	movs	r0, r3
 8000456:	f001 fb17 	bl	8001a88 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800045a:	f001 facf 	bl	80019fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800045e:	4b25      	ldr	r3, [pc, #148]	; (80004f4 <SystemClock_Config+0xd8>)
 8000460:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000462:	4b24      	ldr	r3, [pc, #144]	; (80004f4 <SystemClock_Config+0xd8>)
 8000464:	2118      	movs	r1, #24
 8000466:	438a      	bics	r2, r1
 8000468:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2206      	movs	r2, #6
 800046e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000470:	193b      	adds	r3, r7, r4
 8000472:	2201      	movs	r2, #1
 8000474:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2280      	movs	r2, #128	; 0x80
 800047a:	0052      	lsls	r2, r2, #1
 800047c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800047e:	193b      	adds	r3, r7, r4
 8000480:	2200      	movs	r2, #0
 8000482:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2240      	movs	r2, #64	; 0x40
 8000488:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2200      	movs	r2, #0
 800048e:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	f001 fb38 	bl	8001b08 <HAL_RCC_OscConfig>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800049c:	f000 f990 	bl	80007c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a0:	211c      	movs	r1, #28
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	2207      	movs	r2, #7
 80004a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ae:	187b      	adds	r3, r7, r1
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ba:	187b      	adds	r3, r7, r1
 80004bc:	2100      	movs	r1, #0
 80004be:	0018      	movs	r0, r3
 80004c0:	f001 fe38 	bl	8002134 <HAL_RCC_ClockConfig>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80004c8:	f000 f97a 	bl	80007c0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80004cc:	003b      	movs	r3, r7
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	0292      	lsls	r2, r2, #10
 80004d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80004d4:	003b      	movs	r3, r7
 80004d6:	2280      	movs	r2, #128	; 0x80
 80004d8:	0052      	lsls	r2, r2, #1
 80004da:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004dc:	003b      	movs	r3, r7
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 ffb2 	bl	8002448 <HAL_RCCEx_PeriphCLKConfig>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80004e8:	f000 f96a 	bl	80007c0 <Error_Handler>
  }
}
 80004ec:	46c0      	nop			; (mov r8, r8)
 80004ee:	46bd      	mov	sp, r7
 80004f0:	b019      	add	sp, #100	; 0x64
 80004f2:	bd90      	pop	{r4, r7, pc}
 80004f4:	40021000 	.word	0x40021000

080004f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80004fe:	1d3b      	adds	r3, r7, #4
 8000500:	0018      	movs	r0, r3
 8000502:	2314      	movs	r3, #20
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f002 fd28 	bl	8002f5c <memset>
  RTC_DateTypeDef sDate = {0};
 800050c:	003b      	movs	r3, r7
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000512:	4b33      	ldr	r3, [pc, #204]	; (80005e0 <MX_RTC_Init+0xe8>)
 8000514:	4a33      	ldr	r2, [pc, #204]	; (80005e4 <MX_RTC_Init+0xec>)
 8000516:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000518:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <MX_RTC_Init+0xe8>)
 800051a:	2240      	movs	r2, #64	; 0x40
 800051c:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800051e:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <MX_RTC_Init+0xe8>)
 8000520:	227f      	movs	r2, #127	; 0x7f
 8000522:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000524:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <MX_RTC_Init+0xe8>)
 8000526:	22ff      	movs	r2, #255	; 0xff
 8000528:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800052a:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <MX_RTC_Init+0xe8>)
 800052c:	2200      	movs	r2, #0
 800052e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000530:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <MX_RTC_Init+0xe8>)
 8000532:	2200      	movs	r2, #0
 8000534:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000536:	4b2a      	ldr	r3, [pc, #168]	; (80005e0 <MX_RTC_Init+0xe8>)
 8000538:	2200      	movs	r2, #0
 800053a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800053c:	4b28      	ldr	r3, [pc, #160]	; (80005e0 <MX_RTC_Init+0xe8>)
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	05d2      	lsls	r2, r2, #23
 8000542:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000544:	4b26      	ldr	r3, [pc, #152]	; (80005e0 <MX_RTC_Init+0xe8>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800054a:	4b25      	ldr	r3, [pc, #148]	; (80005e0 <MX_RTC_Init+0xe8>)
 800054c:	0018      	movs	r0, r3
 800054e:	f002 f8b1 	bl	80026b4 <HAL_RTC_Init>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000556:	f000 f933 	bl	80007c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	220c      	movs	r2, #12
 800055e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 59;
 8000560:	1d3b      	adds	r3, r7, #4
 8000562:	223b      	movs	r2, #59	; 0x3b
 8000564:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 800056c:	1d3b      	adds	r3, r7, #4
 800056e:	2200      	movs	r2, #0
 8000570:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2200      	movs	r2, #0
 8000576:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2200      	movs	r2, #0
 8000582:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000584:	1d39      	adds	r1, r7, #4
 8000586:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <MX_RTC_Init+0xe8>)
 8000588:	2200      	movs	r2, #0
 800058a:	0018      	movs	r0, r3
 800058c:	f002 f928 	bl	80027e0 <HAL_RTC_SetTime>
 8000590:	1e03      	subs	r3, r0, #0
 8000592:	d001      	beq.n	8000598 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000594:	f000 f914 	bl	80007c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000598:	003b      	movs	r3, r7
 800059a:	2201      	movs	r2, #1
 800059c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800059e:	003b      	movs	r3, r7
 80005a0:	2201      	movs	r2, #1
 80005a2:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80005a4:	003b      	movs	r3, r7
 80005a6:	2201      	movs	r2, #1
 80005a8:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80005aa:	003b      	movs	r3, r7
 80005ac:	2200      	movs	r2, #0
 80005ae:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80005b0:	0039      	movs	r1, r7
 80005b2:	4b0b      	ldr	r3, [pc, #44]	; (80005e0 <MX_RTC_Init+0xe8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	0018      	movs	r0, r3
 80005b8:	f002 fa16 	bl	80029e8 <HAL_RTC_SetDate>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 80005c0:	f000 f8fe 	bl	80007c0 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 24390, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80005c4:	4908      	ldr	r1, [pc, #32]	; (80005e8 <MX_RTC_Init+0xf0>)
 80005c6:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <MX_RTC_Init+0xe8>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	0018      	movs	r0, r3
 80005cc:	f002 fbe2 	bl	8002d94 <HAL_RTCEx_SetWakeUpTimer_IT>
 80005d0:	1e03      	subs	r3, r0, #0
 80005d2:	d001      	beq.n	80005d8 <MX_RTC_Init+0xe0>
  {
    Error_Handler();
 80005d4:	f000 f8f4 	bl	80007c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005d8:	46c0      	nop			; (mov r8, r8)
 80005da:	46bd      	mov	sp, r7
 80005dc:	b006      	add	sp, #24
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000044 	.word	0x20000044
 80005e4:	40002800 	.word	0x40002800
 80005e8:	00005f46 	.word	0x00005f46

080005ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005ec:	b590      	push	{r4, r7, lr}
 80005ee:	b08b      	sub	sp, #44	; 0x2c
 80005f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f2:	2414      	movs	r4, #20
 80005f4:	193b      	adds	r3, r7, r4
 80005f6:	0018      	movs	r0, r3
 80005f8:	2314      	movs	r3, #20
 80005fa:	001a      	movs	r2, r3
 80005fc:	2100      	movs	r1, #0
 80005fe:	f002 fcad 	bl	8002f5c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000602:	4b66      	ldr	r3, [pc, #408]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000604:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000606:	4b65      	ldr	r3, [pc, #404]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000608:	2104      	movs	r1, #4
 800060a:	430a      	orrs	r2, r1
 800060c:	635a      	str	r2, [r3, #52]	; 0x34
 800060e:	4b63      	ldr	r3, [pc, #396]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000612:	2204      	movs	r2, #4
 8000614:	4013      	ands	r3, r2
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b60      	ldr	r3, [pc, #384]	; (800079c <MX_GPIO_Init+0x1b0>)
 800061c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800061e:	4b5f      	ldr	r3, [pc, #380]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000620:	2101      	movs	r1, #1
 8000622:	430a      	orrs	r2, r1
 8000624:	635a      	str	r2, [r3, #52]	; 0x34
 8000626:	4b5d      	ldr	r3, [pc, #372]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800062a:	2201      	movs	r2, #1
 800062c:	4013      	ands	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b5a      	ldr	r3, [pc, #360]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000636:	4b59      	ldr	r3, [pc, #356]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000638:	2102      	movs	r1, #2
 800063a:	430a      	orrs	r2, r1
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
 800063e:	4b57      	ldr	r3, [pc, #348]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000642:	2202      	movs	r2, #2
 8000644:	4013      	ands	r3, r2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	4b54      	ldr	r3, [pc, #336]	; (800079c <MX_GPIO_Init+0x1b0>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064e:	4b53      	ldr	r3, [pc, #332]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000650:	2108      	movs	r1, #8
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	; 0x34
 8000656:	4b51      	ldr	r3, [pc, #324]	; (800079c <MX_GPIO_Init+0x1b0>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800065a:	2208      	movs	r2, #8
 800065c:	4013      	ands	r3, r2
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M23_Pin|H9_Pin|M22_Pin|M21_Pin
 8000662:	494f      	ldr	r1, [pc, #316]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 8000664:	4b4f      	ldr	r3, [pc, #316]	; (80007a4 <MX_GPIO_Init+0x1b8>)
 8000666:	2200      	movs	r2, #0
 8000668:	0018      	movs	r0, r3
 800066a:	f001 f980 	bl	800196e <HAL_GPIO_WritePin>
                          |M15_Pin|M14_Pin|M6_Pin|H2_Pin
                          |M0_Pin|M1_Pin|M24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M20_Pin|H8_Pin|M19_Pin|M18_Pin
 800066e:	494e      	ldr	r1, [pc, #312]	; (80007a8 <MX_GPIO_Init+0x1bc>)
 8000670:	23a0      	movs	r3, #160	; 0xa0
 8000672:	05db      	lsls	r3, r3, #23
 8000674:	2200      	movs	r2, #0
 8000676:	0018      	movs	r0, r3
 8000678:	f001 f979 	bl	800196e <HAL_GPIO_WritePin>
                          |H7_Pin|M17_Pin|M16_Pin|H6_Pin
                          |H3_Pin|M7_Pin|M4_Pin|M3_Pin
                          |H1_Pin|H0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M13_Pin|H5_Pin|M12_Pin|M11_Pin
 800067c:	494b      	ldr	r1, [pc, #300]	; (80007ac <MX_GPIO_Init+0x1c0>)
 800067e:	4b4c      	ldr	r3, [pc, #304]	; (80007b0 <MX_GPIO_Init+0x1c4>)
 8000680:	2200      	movs	r2, #0
 8000682:	0018      	movs	r0, r3
 8000684:	f001 f973 	bl	800196e <HAL_GPIO_WritePin>
                          |M10_Pin|H4_Pin|M9_Pin|M8_Pin
                          |H10_Pin|WORK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M5_Pin|M2_Pin|M29_Pin|M28_Pin
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	33ff      	adds	r3, #255	; 0xff
 800068c:	4849      	ldr	r0, [pc, #292]	; (80007b4 <MX_GPIO_Init+0x1c8>)
 800068e:	2200      	movs	r2, #0
 8000690:	0019      	movs	r1, r3
 8000692:	f001 f96c 	bl	800196e <HAL_GPIO_WritePin>
                          |H11_Pin|M27_Pin|M26_Pin|M25_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : M23_Pin H9_Pin M22_Pin M21_Pin
                           M15_Pin M14_Pin M6_Pin H2_Pin
                           M0_Pin M1_Pin M24_Pin */
  GPIO_InitStruct.Pin = M23_Pin|H9_Pin|M22_Pin|M21_Pin
 8000696:	193b      	adds	r3, r7, r4
 8000698:	4a41      	ldr	r2, [pc, #260]	; (80007a0 <MX_GPIO_Init+0x1b4>)
 800069a:	601a      	str	r2, [r3, #0]
                          |M15_Pin|M14_Pin|M6_Pin|H2_Pin
                          |M0_Pin|M1_Pin|M24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	193b      	adds	r3, r7, r4
 800069e:	2201      	movs	r2, #1
 80006a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	193b      	adds	r3, r7, r4
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ae:	193b      	adds	r3, r7, r4
 80006b0:	4a3c      	ldr	r2, [pc, #240]	; (80007a4 <MX_GPIO_Init+0x1b8>)
 80006b2:	0019      	movs	r1, r3
 80006b4:	0010      	movs	r0, r2
 80006b6:	f000 ffd9 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_Pin */
  GPIO_InitStruct.Pin = TOUCH_Pin;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2202      	movs	r2, #2
 80006be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	4a3d      	ldr	r2, [pc, #244]	; (80007b8 <MX_GPIO_Init+0x1cc>)
 80006c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TOUCH_GPIO_Port, &GPIO_InitStruct);
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	4a35      	ldr	r2, [pc, #212]	; (80007a4 <MX_GPIO_Init+0x1b8>)
 80006d0:	0019      	movs	r1, r3
 80006d2:	0010      	movs	r0, r2
 80006d4:	f000 ffca 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : M20_Pin H8_Pin M19_Pin M18_Pin
                           H7_Pin M17_Pin M16_Pin H6_Pin
                           H3_Pin M7_Pin M4_Pin M3_Pin
                           H1_Pin H0_Pin */
  GPIO_InitStruct.Pin = M20_Pin|H8_Pin|M19_Pin|M18_Pin
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	4a33      	ldr	r2, [pc, #204]	; (80007a8 <MX_GPIO_Init+0x1bc>)
 80006dc:	601a      	str	r2, [r3, #0]
                          |H7_Pin|M17_Pin|M16_Pin|H6_Pin
                          |H3_Pin|M7_Pin|M4_Pin|M3_Pin
                          |H1_Pin|H0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2201      	movs	r2, #1
 80006e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f0:	193a      	adds	r2, r7, r4
 80006f2:	23a0      	movs	r3, #160	; 0xa0
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 ffb7 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : M13_Pin H5_Pin M12_Pin M11_Pin
                           M10_Pin H4_Pin M9_Pin M8_Pin
                           H10_Pin WORK_Pin */
  GPIO_InitStruct.Pin = M13_Pin|H5_Pin|M12_Pin|M11_Pin
 80006fe:	0021      	movs	r1, r4
 8000700:	187b      	adds	r3, r7, r1
 8000702:	4a2a      	ldr	r2, [pc, #168]	; (80007ac <MX_GPIO_Init+0x1c0>)
 8000704:	601a      	str	r2, [r3, #0]
                          |M10_Pin|H4_Pin|M9_Pin|M8_Pin
                          |H10_Pin|WORK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2201      	movs	r2, #1
 800070a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000718:	000c      	movs	r4, r1
 800071a:	187b      	adds	r3, r7, r1
 800071c:	4a24      	ldr	r2, [pc, #144]	; (80007b0 <MX_GPIO_Init+0x1c4>)
 800071e:	0019      	movs	r1, r3
 8000720:	0010      	movs	r0, r2
 8000722:	f000 ffa3 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_Pin */
  GPIO_InitStruct.Pin = SET_Pin;
 8000726:	0021      	movs	r1, r4
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	0212      	lsls	r2, r2, #8
 800072e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000730:	187b      	adds	r3, r7, r1
 8000732:	4a22      	ldr	r2, [pc, #136]	; (80007bc <MX_GPIO_Init+0x1d0>)
 8000734:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000736:	187b      	adds	r3, r7, r1
 8000738:	2201      	movs	r2, #1
 800073a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SET_GPIO_Port, &GPIO_InitStruct);
 800073c:	000c      	movs	r4, r1
 800073e:	187b      	adds	r3, r7, r1
 8000740:	4a1b      	ldr	r2, [pc, #108]	; (80007b0 <MX_GPIO_Init+0x1c4>)
 8000742:	0019      	movs	r1, r3
 8000744:	0010      	movs	r0, r2
 8000746:	f000 ff91 	bl	800166c <HAL_GPIO_Init>

  /*Configure GPIO pins : M5_Pin M2_Pin M29_Pin M28_Pin
                           H11_Pin M27_Pin M26_Pin M25_Pin */
  GPIO_InitStruct.Pin = M5_Pin|M2_Pin|M29_Pin|M28_Pin
 800074a:	0021      	movs	r1, r4
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	32ff      	adds	r2, #255	; 0xff
 8000752:	601a      	str	r2, [r3, #0]
                          |H11_Pin|M27_Pin|M26_Pin|M25_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2201      	movs	r2, #1
 8000758:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000766:	187b      	adds	r3, r7, r1
 8000768:	4a12      	ldr	r2, [pc, #72]	; (80007b4 <MX_GPIO_Init+0x1c8>)
 800076a:	0019      	movs	r1, r3
 800076c:	0010      	movs	r0, r2
 800076e:	f000 ff7d 	bl	800166c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8000772:	2200      	movs	r2, #0
 8000774:	2100      	movs	r1, #0
 8000776:	2005      	movs	r0, #5
 8000778:	f000 ff46 	bl	8001608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800077c:	2005      	movs	r0, #5
 800077e:	f000 ff58 	bl	8001632 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2100      	movs	r1, #0
 8000786:	2007      	movs	r0, #7
 8000788:	f000 ff3e 	bl	8001608 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800078c:	2007      	movs	r0, #7
 800078e:	f000 ff50 	bl	8001632 <HAL_NVIC_EnableIRQ>

}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	46bd      	mov	sp, r7
 8000796:	b00b      	add	sp, #44	; 0x2c
 8000798:	bd90      	pop	{r4, r7, pc}
 800079a:	46c0      	nop			; (mov r8, r8)
 800079c:	40021000 	.word	0x40021000
 80007a0:	00001ffc 	.word	0x00001ffc
 80007a4:	50000800 	.word	0x50000800
 80007a8:	00009fff 	.word	0x00009fff
 80007ac:	00007c1f 	.word	0x00007c1f
 80007b0:	50000400 	.word	0x50000400
 80007b4:	50000c00 	.word	0x50000c00
 80007b8:	10310000 	.word	0x10310000
 80007bc:	10210000 	.word	0x10210000

080007c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007c6:	e7fe      	b.n	80007c6 <Error_Handler+0x6>

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <HAL_MspInit+0x4c>)
 80007d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_MspInit+0x4c>)
 80007d4:	2101      	movs	r1, #1
 80007d6:	430a      	orrs	r2, r1
 80007d8:	641a      	str	r2, [r3, #64]	; 0x40
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <HAL_MspInit+0x4c>)
 80007dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007de:	2201      	movs	r2, #1
 80007e0:	4013      	ands	r3, r2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <HAL_MspInit+0x4c>)
 80007e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <HAL_MspInit+0x4c>)
 80007ec:	2180      	movs	r1, #128	; 0x80
 80007ee:	0549      	lsls	r1, r1, #21
 80007f0:	430a      	orrs	r2, r1
 80007f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <HAL_MspInit+0x4c>)
 80007f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	055b      	lsls	r3, r3, #21
 80007fc:	4013      	ands	r3, r2
 80007fe:	603b      	str	r3, [r7, #0]
 8000800:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000802:	23c0      	movs	r3, #192	; 0xc0
 8000804:	00db      	lsls	r3, r3, #3
 8000806:	0018      	movs	r0, r3
 8000808:	f000 fe3c 	bl	8001484 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080c:	46c0      	nop			; (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b002      	add	sp, #8
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40021000 	.word	0x40021000

08000818 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a11      	ldr	r2, [pc, #68]	; (800086c <HAL_RTC_MspInit+0x54>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d11c      	bne.n	8000864 <HAL_RTC_MspInit+0x4c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_RTC_MspInit+0x58>)
 800082c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_RTC_MspInit+0x58>)
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0209      	lsls	r1, r1, #8
 8000834:	430a      	orrs	r2, r1
 8000836:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_RTC_MspInit+0x58>)
 800083a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_RTC_MspInit+0x58>)
 800083e:	2180      	movs	r1, #128	; 0x80
 8000840:	00c9      	lsls	r1, r1, #3
 8000842:	430a      	orrs	r2, r1
 8000844:	63da      	str	r2, [r3, #60]	; 0x3c
 8000846:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <HAL_RTC_MspInit+0x58>)
 8000848:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800084a:	2380      	movs	r3, #128	; 0x80
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	4013      	ands	r3, r2
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2100      	movs	r1, #0
 8000858:	2002      	movs	r0, #2
 800085a:	f000 fed5 	bl	8001608 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800085e:	2002      	movs	r0, #2
 8000860:	f000 fee7 	bl	8001632 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000864:	46c0      	nop			; (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	b004      	add	sp, #16
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40002800 	.word	0x40002800
 8000870:	40021000 	.word	0x40021000

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b580      	push	{r7, lr}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b580      	push	{r7, lr}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000898:	f000 fdb6 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089c:	46c0      	nop			; (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80008a8:	4b03      	ldr	r3, [pc, #12]	; (80008b8 <RTC_TAMP_IRQHandler+0x14>)
 80008aa:	0018      	movs	r0, r3
 80008ac:	f002 fb0c 	bl	8002ec8 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			; (mov r8, r8)
 80008b8:	20000044 	.word	0x20000044

080008bc <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80008c0:	2002      	movs	r0, #2
 80008c2:	f001 f871 	bl	80019a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80008d0:	2380      	movs	r3, #128	; 0x80
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 f867 	bl	80019a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <SystemInit+0x14>)
 80008e6:	2280      	movs	r2, #128	; 0x80
 80008e8:	0512      	lsls	r2, r2, #20
 80008ea:	609a      	str	r2, [r3, #8]
#endif
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008fc:	f7ff fff0 	bl	80008e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <LoopForever+0x6>)
  ldr r1, =_edata
 8000902:	490d      	ldr	r1, [pc, #52]	; (8000938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <LoopForever+0xe>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000908:	e002      	b.n	8000910 <LoopCopyDataInit>

0800090a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800090c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090e:	3304      	adds	r3, #4

08000910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000914:	d3f9      	bcc.n	800090a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000918:	4c0a      	ldr	r4, [pc, #40]	; (8000944 <LoopForever+0x16>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800091c:	e001      	b.n	8000922 <LoopFillZerobss>

0800091e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000920:	3204      	adds	r2, #4

08000922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000924:	d3fb      	bcc.n	800091e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000926:	f002 faf5 	bl	8002f14 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800092a:	f7ff fc75 	bl	8000218 <main>

0800092e <LoopForever>:

LoopForever:
  b LoopForever
 800092e:	e7fe      	b.n	800092e <LoopForever>
  ldr   r0, =_estack
 8000930:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000938:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800093c:	08003074 	.word	0x08003074
  ldr r2, =_sbss
 8000940:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000944:	2000007c 	.word	0x2000007c

08000948 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000948:	e7fe      	b.n	8000948 <ADC1_IRQHandler>
	...

0800094c <displayShowTimeForce>:
 *      Author: bartosz
 */

#include "display.h"

void displayShowTimeForce(uint8_t hours, uint8_t minutes, uint8_t secondsFlag) {
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	0004      	movs	r4, r0
 8000954:	0008      	movs	r0, r1
 8000956:	0011      	movs	r1, r2
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	1c22      	adds	r2, r4, #0
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	1dbb      	adds	r3, r7, #6
 8000960:	1c02      	adds	r2, r0, #0
 8000962:	701a      	strb	r2, [r3, #0]
 8000964:	1d7b      	adds	r3, r7, #5
 8000966:	1c0a      	adds	r2, r1, #0
 8000968:	701a      	strb	r2, [r3, #0]

//	displayTurnOff();

//turn on LEDs
	for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 800096a:	230f      	movs	r3, #15
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	2201      	movs	r2, #1
 8000970:	701a      	strb	r2, [r3, #0]
 8000972:	e00d      	b.n	8000990 <displayShowTimeForce+0x44>
		displayTurnMinutesLED(i, 1);
 8000974:	210f      	movs	r1, #15
 8000976:	000c      	movs	r4, r1
 8000978:	187b      	adds	r3, r7, r1
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	2101      	movs	r1, #1
 800097e:	0018      	movs	r0, r3
 8000980:	f000 fa7e 	bl	8000e80 <displayTurnMinutesLED>
	for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000984:	0021      	movs	r1, r4
 8000986:	187b      	adds	r3, r7, r1
 8000988:	781a      	ldrb	r2, [r3, #0]
 800098a:	187b      	adds	r3, r7, r1
 800098c:	3201      	adds	r2, #1
 800098e:	701a      	strb	r2, [r3, #0]
 8000990:	230f      	movs	r3, #15
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	781a      	ldrb	r2, [r3, #0]
 8000996:	1dbb      	adds	r3, r7, #6
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	085b      	lsrs	r3, r3, #1
 800099c:	b2db      	uxtb	r3, r3
 800099e:	3301      	adds	r3, #1
 80009a0:	429a      	cmp	r2, r3
 80009a2:	dbe7      	blt.n	8000974 <displayShowTimeForce+0x28>
	}
//turn off unused
	for (uint8_t i = minutes / 2 + 1; i < 59; i++) {
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	230e      	movs	r3, #14
 80009ae:	18fb      	adds	r3, r7, r3
 80009b0:	3201      	adds	r2, #1
 80009b2:	701a      	strb	r2, [r3, #0]
 80009b4:	e00d      	b.n	80009d2 <displayShowTimeForce+0x86>
		displayTurnMinutesLED(i, 0);
 80009b6:	210e      	movs	r1, #14
 80009b8:	000c      	movs	r4, r1
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2100      	movs	r1, #0
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 fa5d 	bl	8000e80 <displayTurnMinutesLED>
	for (uint8_t i = minutes / 2 + 1; i < 59; i++) {
 80009c6:	0021      	movs	r1, r4
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	781a      	ldrb	r2, [r3, #0]
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	3201      	adds	r2, #1
 80009d0:	701a      	strb	r2, [r3, #0]
 80009d2:	230e      	movs	r3, #14
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b3a      	cmp	r3, #58	; 0x3a
 80009da:	d9ec      	bls.n	80009b6 <displayShowTimeForce+0x6a>
	}

	if (minutes == 0) {
 80009dc:	1dbb      	adds	r3, r7, #6
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d104      	bne.n	80009ee <displayShowTimeForce+0xa2>
		displayTurnMinutesLED(0, 1);
 80009e4:	2101      	movs	r1, #1
 80009e6:	2000      	movs	r0, #0
 80009e8:	f000 fa4a 	bl	8000e80 <displayTurnMinutesLED>
 80009ec:	e003      	b.n	80009f6 <displayShowTimeForce+0xaa>
	} else {
		displayTurnMinutesLED(0, 0);
 80009ee:	2100      	movs	r1, #0
 80009f0:	2000      	movs	r0, #0
 80009f2:	f000 fa45 	bl	8000e80 <displayTurnMinutesLED>
	}

//turn off/on parity LED
	if (minutes % 2 == 1) {
 80009f6:	1dbb      	adds	r3, r7, #6
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2201      	movs	r2, #1
 80009fc:	4013      	ands	r3, r2
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d006      	beq.n	8000a12 <displayShowTimeForce+0xc6>
		HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 8000a04:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <displayShowTimeForce+0x198>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	2110      	movs	r1, #16
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 ffaf 	bl	800196e <HAL_GPIO_WritePin>
 8000a10:	e005      	b.n	8000a1e <displayShowTimeForce+0xd2>
	} else {
		HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 8000a12:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <displayShowTimeForce+0x198>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	2110      	movs	r1, #16
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f000 ffa8 	bl	800196e <HAL_GPIO_WritePin>
	}

	if (secondsFlag == 0) {
 8000a1e:	1d7b      	adds	r3, r7, #5
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d142      	bne.n	8000aac <displayShowTimeForce+0x160>
		for (uint8_t i = 1; i < hours + 1; i++) {
 8000a26:	230d      	movs	r3, #13
 8000a28:	18fb      	adds	r3, r7, r3
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
 8000a2e:	e00d      	b.n	8000a4c <displayShowTimeForce+0x100>
			displayTurnHoursLED(i, 1);
 8000a30:	210d      	movs	r1, #13
 8000a32:	000c      	movs	r4, r1
 8000a34:	187b      	adds	r3, r7, r1
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2101      	movs	r1, #1
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 f996 	bl	8000d6c <displayTurnHoursLED>
		for (uint8_t i = 1; i < hours + 1; i++) {
 8000a40:	0021      	movs	r1, r4
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	781a      	ldrb	r2, [r3, #0]
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	3201      	adds	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	230d      	movs	r3, #13
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	781a      	ldrb	r2, [r3, #0]
 8000a52:	1dfb      	adds	r3, r7, #7
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	3301      	adds	r3, #1
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	dbe9      	blt.n	8000a30 <displayShowTimeForce+0xe4>
		}

		if (hours == 0) {
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d104      	bne.n	8000a6e <displayShowTimeForce+0x122>
			displayTurnHoursLED(0, 1);
 8000a64:	2101      	movs	r1, #1
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 f980 	bl	8000d6c <displayTurnHoursLED>
 8000a6c:	e003      	b.n	8000a76 <displayShowTimeForce+0x12a>
		} else {
			displayTurnHoursLED(0, 0);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	2000      	movs	r0, #0
 8000a72:	f000 f97b 	bl	8000d6c <displayTurnHoursLED>
		}

		for (uint8_t i = hours + 1; i < 11; i++) {
 8000a76:	230c      	movs	r3, #12
 8000a78:	18fb      	adds	r3, r7, r3
 8000a7a:	1dfa      	adds	r2, r7, #7
 8000a7c:	7812      	ldrb	r2, [r2, #0]
 8000a7e:	3201      	adds	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e00d      	b.n	8000aa0 <displayShowTimeForce+0x154>
			displayTurnHoursLED(i, 0);
 8000a84:	210c      	movs	r1, #12
 8000a86:	000c      	movs	r4, r1
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f000 f96c 	bl	8000d6c <displayTurnHoursLED>
		for (uint8_t i = hours + 1; i < 11; i++) {
 8000a94:	0021      	movs	r1, r4
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	187b      	adds	r3, r7, r1
 8000a9c:	3201      	adds	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	18fb      	adds	r3, r7, r3
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b0a      	cmp	r3, #10
 8000aa8:	d9ec      	bls.n	8000a84 <displayShowTimeForce+0x138>
		for (uint8_t i = 0; i < 12; i++) {
			displayTurnHoursLED(i, 0);
		}
	}

}
 8000aaa:	e017      	b.n	8000adc <displayShowTimeForce+0x190>
		for (uint8_t i = 0; i < 12; i++) {
 8000aac:	230b      	movs	r3, #11
 8000aae:	18fb      	adds	r3, r7, r3
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	701a      	strb	r2, [r3, #0]
 8000ab4:	e00d      	b.n	8000ad2 <displayShowTimeForce+0x186>
			displayTurnHoursLED(i, 0);
 8000ab6:	210b      	movs	r1, #11
 8000ab8:	000c      	movs	r4, r1
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2100      	movs	r1, #0
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f000 f953 	bl	8000d6c <displayTurnHoursLED>
		for (uint8_t i = 0; i < 12; i++) {
 8000ac6:	0021      	movs	r1, r4
 8000ac8:	187b      	adds	r3, r7, r1
 8000aca:	781a      	ldrb	r2, [r3, #0]
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	3201      	adds	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	230b      	movs	r3, #11
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b0b      	cmp	r3, #11
 8000ada:	d9ec      	bls.n	8000ab6 <displayShowTimeForce+0x16a>
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b005      	add	sp, #20
 8000ae2:	bd90      	pop	{r4, r7, pc}
 8000ae4:	50000400 	.word	0x50000400

08000ae8 <displayTurnOff>:

void displayTurnOff(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 60; i++) {
 8000aee:	1dfb      	adds	r3, r7, #7
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	e00a      	b.n	8000b0c <displayTurnOff+0x24>
		displayTurnMinutesLED(i, 0);
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2100      	movs	r1, #0
 8000afc:	0018      	movs	r0, r3
 8000afe:	f000 f9bf 	bl	8000e80 <displayTurnMinutesLED>
	for (uint8_t i = 0; i < 60; i++) {
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781a      	ldrb	r2, [r3, #0]
 8000b06:	1dfb      	adds	r3, r7, #7
 8000b08:	3201      	adds	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b3b      	cmp	r3, #59	; 0x3b
 8000b12:	d9f0      	bls.n	8000af6 <displayTurnOff+0xe>
	}
	for (uint8_t i = 0; i < 12; i++) {
 8000b14:	1dbb      	adds	r3, r7, #6
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
 8000b1a:	e00a      	b.n	8000b32 <displayTurnOff+0x4a>
		displayTurnHoursLED(i, 0);
 8000b1c:	1dbb      	adds	r3, r7, #6
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2100      	movs	r1, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 f922 	bl	8000d6c <displayTurnHoursLED>
	for (uint8_t i = 0; i < 12; i++) {
 8000b28:	1dbb      	adds	r3, r7, #6
 8000b2a:	781a      	ldrb	r2, [r3, #0]
 8000b2c:	1dbb      	adds	r3, r7, #6
 8000b2e:	3201      	adds	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	1dbb      	adds	r3, r7, #6
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b0b      	cmp	r3, #11
 8000b38:	d9f0      	bls.n	8000b1c <displayTurnOff+0x34>
	}
}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <displayShowTime>:

void displayShowTime(uint8_t hours, uint8_t minutes, uint8_t timeH,
		uint8_t timeM) {
 8000b44:	b5b0      	push	{r4, r5, r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	0005      	movs	r5, r0
 8000b4c:	000c      	movs	r4, r1
 8000b4e:	0010      	movs	r0, r2
 8000b50:	0019      	movs	r1, r3
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	1c2a      	adds	r2, r5, #0
 8000b56:	701a      	strb	r2, [r3, #0]
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	1c22      	adds	r2, r4, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	1d7b      	adds	r3, r7, #5
 8000b60:	1c02      	adds	r2, r0, #0
 8000b62:	701a      	strb	r2, [r3, #0]
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	1c0a      	adds	r2, r1, #0
 8000b68:	701a      	strb	r2, [r3, #0]

	displaySplashMinutes(4);
 8000b6a:	2004      	movs	r0, #4
 8000b6c:	f000 f8be 	bl	8000cec <displaySplashMinutes>

	for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000b70:	230f      	movs	r3, #15
 8000b72:	18fb      	adds	r3, r7, r3
 8000b74:	2201      	movs	r2, #1
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e010      	b.n	8000b9c <displayShowTime+0x58>
		displayTurnMinutesLED(i, 1);
 8000b7a:	240f      	movs	r4, #15
 8000b7c:	193b      	adds	r3, r7, r4
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2101      	movs	r1, #1
 8000b82:	0018      	movs	r0, r3
 8000b84:	f000 f97c 	bl	8000e80 <displayTurnMinutesLED>
		HAL_Delay(timeM);
 8000b88:	1d3b      	adds	r3, r7, #4
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f000 fc57 	bl	8001440 <HAL_Delay>
	for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	781a      	ldrb	r2, [r3, #0]
 8000b96:	193b      	adds	r3, r7, r4
 8000b98:	3201      	adds	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	781a      	ldrb	r2, [r3, #0]
 8000ba2:	1dbb      	adds	r3, r7, #6
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	085b      	lsrs	r3, r3, #1
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	3301      	adds	r3, #1
 8000bac:	429a      	cmp	r2, r3
 8000bae:	dbe4      	blt.n	8000b7a <displayShowTime+0x36>
	}

	if (minutes == 0) {
 8000bb0:	1dbb      	adds	r3, r7, #6
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d104      	bne.n	8000bc2 <displayShowTime+0x7e>
		displayTurnMinutesLED(0, 1);
 8000bb8:	2101      	movs	r1, #1
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f000 f960 	bl	8000e80 <displayTurnMinutesLED>
 8000bc0:	e003      	b.n	8000bca <displayShowTime+0x86>
	} else {
		displayTurnMinutesLED(0, 0);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 f95b 	bl	8000e80 <displayTurnMinutesLED>
	}

	if (minutes % 2 == 1) {
 8000bca:	1dbb      	adds	r3, r7, #6
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d005      	beq.n	8000be4 <displayShowTime+0xa0>
		HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 8000bd8:	4b42      	ldr	r3, [pc, #264]	; (8000ce4 <displayShowTime+0x1a0>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	2110      	movs	r1, #16
 8000bde:	0018      	movs	r0, r3
 8000be0:	f000 fec5 	bl	800196e <HAL_GPIO_WritePin>
	}

//	displaySplashHours(10);

	for (uint8_t i = 1; i < hours + 1; i++) {
 8000be4:	230e      	movs	r3, #14
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	2201      	movs	r2, #1
 8000bea:	701a      	strb	r2, [r3, #0]
 8000bec:	e010      	b.n	8000c10 <displayShowTime+0xcc>
		displayTurnHoursLED(i, 1);
 8000bee:	240e      	movs	r4, #14
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f000 f8b8 	bl	8000d6c <displayTurnHoursLED>
		HAL_Delay(timeH);
 8000bfc:	1d7b      	adds	r3, r7, #5
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 fc1d 	bl	8001440 <HAL_Delay>
	for (uint8_t i = 1; i < hours + 1; i++) {
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	781a      	ldrb	r2, [r3, #0]
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	3201      	adds	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	230e      	movs	r3, #14
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781a      	ldrb	r2, [r3, #0]
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	dbe6      	blt.n	8000bee <displayShowTime+0xaa>
	}

	if (hours == 0) {
 8000c20:	1dfb      	adds	r3, r7, #7
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d104      	bne.n	8000c32 <displayShowTime+0xee>
		displayTurnHoursLED(0, 1);
 8000c28:	2101      	movs	r1, #1
 8000c2a:	2000      	movs	r0, #0
 8000c2c:	f000 f89e 	bl	8000d6c <displayTurnHoursLED>
 8000c30:	e003      	b.n	8000c3a <displayShowTime+0xf6>
	} else {
		displayTurnHoursLED(0, 0);
 8000c32:	2100      	movs	r1, #0
 8000c34:	2000      	movs	r0, #0
 8000c36:	f000 f899 	bl	8000d6c <displayTurnHoursLED>
	}

	HAL_Delay(1200);
 8000c3a:	2396      	movs	r3, #150	; 0x96
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f000 fbfe 	bl	8001440 <HAL_Delay>

	if (mode != MODE_FORCE) {
 8000c44:	4b28      	ldr	r3, [pc, #160]	; (8000ce8 <displayShowTime+0x1a4>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b05      	cmp	r3, #5
 8000c4c:	d045      	beq.n	8000cda <displayShowTime+0x196>
		for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000c4e:	230d      	movs	r3, #13
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
 8000c56:	e010      	b.n	8000c7a <displayShowTime+0x136>
			displayTurnMinutesLED(i, 0);
 8000c58:	240d      	movs	r4, #13
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2100      	movs	r1, #0
 8000c60:	0018      	movs	r0, r3
 8000c62:	f000 f90d 	bl	8000e80 <displayTurnMinutesLED>
			HAL_Delay(timeM);
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f000 fbe8 	bl	8001440 <HAL_Delay>
		for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000c70:	193b      	adds	r3, r7, r4
 8000c72:	781a      	ldrb	r2, [r3, #0]
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	3201      	adds	r2, #1
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	230d      	movs	r3, #13
 8000c7c:	18fb      	adds	r3, r7, r3
 8000c7e:	781a      	ldrb	r2, [r3, #0]
 8000c80:	1dbb      	adds	r3, r7, #6
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	085b      	lsrs	r3, r3, #1
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	3301      	adds	r3, #1
 8000c8a:	429a      	cmp	r2, r3
 8000c8c:	dbe4      	blt.n	8000c58 <displayShowTime+0x114>
		}

		for (uint8_t i = 1; i < hours + 1; i++) {
 8000c8e:	230c      	movs	r3, #12
 8000c90:	18fb      	adds	r3, r7, r3
 8000c92:	2201      	movs	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e010      	b.n	8000cba <displayShowTime+0x176>
			displayTurnHoursLED(i, 0);
 8000c98:	240c      	movs	r4, #12
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f000 f863 	bl	8000d6c <displayTurnHoursLED>
			HAL_Delay(timeH);
 8000ca6:	1d7b      	adds	r3, r7, #5
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 fbc8 	bl	8001440 <HAL_Delay>
		for (uint8_t i = 1; i < hours + 1; i++) {
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	781a      	ldrb	r2, [r3, #0]
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	3201      	adds	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	230c      	movs	r3, #12
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	781a      	ldrb	r2, [r3, #0]
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	dbe6      	blt.n	8000c98 <displayShowTime+0x154>
		}

		displayTurnOff();
 8000cca:	f7ff ff0d 	bl	8000ae8 <displayTurnOff>
		HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <displayShowTime+0x1a0>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f000 fe4a 	bl	800196e <HAL_GPIO_WritePin>
	}

}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	50000400 	.word	0x50000400
 8000ce8:	2000003d 	.word	0x2000003d

08000cec <displaySplashMinutes>:

void displaySplashMinutes(uint8_t time) {
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	0002      	movs	r2, r0
 8000cf4:	1dfb      	adds	r3, r7, #7
 8000cf6:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 30; i++) {
 8000cf8:	230f      	movs	r3, #15
 8000cfa:	18fb      	adds	r3, r7, r3
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
 8000d00:	e010      	b.n	8000d24 <displaySplashMinutes+0x38>
		displayTurnMinutesLED(i, 1);
 8000d02:	240f      	movs	r4, #15
 8000d04:	193b      	adds	r3, r7, r4
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2101      	movs	r1, #1
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 f8b8 	bl	8000e80 <displayTurnMinutesLED>
		HAL_Delay(time);
 8000d10:	1dfb      	adds	r3, r7, #7
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	0018      	movs	r0, r3
 8000d16:	f000 fb93 	bl	8001440 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++) {
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	3201      	adds	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
 8000d24:	230f      	movs	r3, #15
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	2b1d      	cmp	r3, #29
 8000d2c:	d9e9      	bls.n	8000d02 <displaySplashMinutes+0x16>
	}

	for (uint8_t i = 0; i < 30; i++) {
 8000d2e:	230e      	movs	r3, #14
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
 8000d36:	e010      	b.n	8000d5a <displaySplashMinutes+0x6e>
		displayTurnMinutesLED(i, 0);
 8000d38:	240e      	movs	r4, #14
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2100      	movs	r1, #0
 8000d40:	0018      	movs	r0, r3
 8000d42:	f000 f89d 	bl	8000e80 <displayTurnMinutesLED>
		HAL_Delay(time);
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f000 fb78 	bl	8001440 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++) {
 8000d50:	193b      	adds	r3, r7, r4
 8000d52:	781a      	ldrb	r2, [r3, #0]
 8000d54:	193b      	adds	r3, r7, r4
 8000d56:	3201      	adds	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	230e      	movs	r3, #14
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b1d      	cmp	r3, #29
 8000d62:	d9e9      	bls.n	8000d38 <displaySplashMinutes+0x4c>
	}
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	b005      	add	sp, #20
 8000d6a:	bd90      	pop	{r4, r7, pc}

08000d6c <displayTurnHoursLED>:
		displayTurnHoursLED(i, 0);
		HAL_Delay(time);
	}
}

void displayTurnHoursLED(uint8_t led, uint8_t state) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	0002      	movs	r2, r0
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	701a      	strb	r2, [r3, #0]
 8000d78:	1dbb      	adds	r3, r7, #6
 8000d7a:	1c0a      	adds	r2, r1, #0
 8000d7c:	701a      	strb	r2, [r3, #0]

	switch (led) {
 8000d7e:	1dfb      	adds	r3, r7, #7
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b0b      	cmp	r3, #11
 8000d84:	d86f      	bhi.n	8000e66 <displayTurnHoursLED+0xfa>
 8000d86:	009a      	lsls	r2, r3, #2
 8000d88:	4b39      	ldr	r3, [pc, #228]	; (8000e70 <displayTurnHoursLED+0x104>)
 8000d8a:	18d3      	adds	r3, r2, r3
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	469f      	mov	pc, r3

	case 0:
		HAL_GPIO_WritePin(H0_GPIO_Port, H0_Pin, state);
 8000d90:	1dbb      	adds	r3, r7, #6
 8000d92:	781a      	ldrb	r2, [r3, #0]
 8000d94:	2380      	movs	r3, #128	; 0x80
 8000d96:	0219      	lsls	r1, r3, #8
 8000d98:	23a0      	movs	r3, #160	; 0xa0
 8000d9a:	05db      	lsls	r3, r3, #23
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 fde6 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000da2:	e060      	b.n	8000e66 <displayTurnHoursLED+0xfa>
	case 1:
		HAL_GPIO_WritePin(H1_GPIO_Port, H1_Pin, state);
 8000da4:	1dbb      	adds	r3, r7, #6
 8000da6:	781a      	ldrb	r2, [r3, #0]
 8000da8:	2380      	movs	r3, #128	; 0x80
 8000daa:	0159      	lsls	r1, r3, #5
 8000dac:	23a0      	movs	r3, #160	; 0xa0
 8000dae:	05db      	lsls	r3, r3, #23
 8000db0:	0018      	movs	r0, r3
 8000db2:	f000 fddc 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000db6:	e056      	b.n	8000e66 <displayTurnHoursLED+0xfa>
	case 2:
		HAL_GPIO_WritePin(H2_GPIO_Port, H2_Pin, state);
 8000db8:	1dbb      	adds	r3, r7, #6
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	482d      	ldr	r0, [pc, #180]	; (8000e74 <displayTurnHoursLED+0x108>)
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	f000 fdd4 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000dc6:	e04e      	b.n	8000e66 <displayTurnHoursLED+0xfa>
	case 3:
		HAL_GPIO_WritePin(H3_GPIO_Port, H3_Pin, state);
 8000dc8:	1dbb      	adds	r3, r7, #6
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	2380      	movs	r3, #128	; 0x80
 8000dce:	0059      	lsls	r1, r3, #1
 8000dd0:	23a0      	movs	r3, #160	; 0xa0
 8000dd2:	05db      	lsls	r3, r3, #23
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f000 fdca 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000dda:	e044      	b.n	8000e66 <displayTurnHoursLED+0xfa>
	case 4:
		HAL_GPIO_WritePin(H4_GPIO_Port, H4_Pin, state);
 8000ddc:	1dbb      	adds	r3, r7, #6
 8000dde:	781a      	ldrb	r2, [r3, #0]
 8000de0:	2380      	movs	r3, #128	; 0x80
 8000de2:	015b      	lsls	r3, r3, #5
 8000de4:	4824      	ldr	r0, [pc, #144]	; (8000e78 <displayTurnHoursLED+0x10c>)
 8000de6:	0019      	movs	r1, r3
 8000de8:	f000 fdc1 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000dec:	e03b      	b.n	8000e66 <displayTurnHoursLED+0xfa>
	case 5:
		HAL_GPIO_WritePin(H5_GPIO_Port, H5_Pin, state);
 8000dee:	1dbb      	adds	r3, r7, #6
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4821      	ldr	r0, [pc, #132]	; (8000e78 <displayTurnHoursLED+0x10c>)
 8000df4:	001a      	movs	r2, r3
 8000df6:	2102      	movs	r1, #2
 8000df8:	f000 fdb9 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000dfc:	e033      	b.n	8000e66 <displayTurnHoursLED+0xfa>
	case 6:
		HAL_GPIO_WritePin(H6_GPIO_Port, H6_Pin, state);
 8000dfe:	1dbb      	adds	r3, r7, #6
 8000e00:	781a      	ldrb	r2, [r3, #0]
 8000e02:	23a0      	movs	r3, #160	; 0xa0
 8000e04:	05db      	lsls	r3, r3, #23
 8000e06:	2180      	movs	r1, #128	; 0x80
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f000 fdb0 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000e0e:	e02a      	b.n	8000e66 <displayTurnHoursLED+0xfa>
	case 7:
		HAL_GPIO_WritePin(H7_GPIO_Port, H7_Pin, state);
 8000e10:	1dbb      	adds	r3, r7, #6
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	23a0      	movs	r3, #160	; 0xa0
 8000e16:	05db      	lsls	r3, r3, #23
 8000e18:	2110      	movs	r1, #16
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f000 fda7 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000e20:	e021      	b.n	8000e66 <displayTurnHoursLED+0xfa>
	case 8:
		HAL_GPIO_WritePin(H8_GPIO_Port, H8_Pin, state);
 8000e22:	1dbb      	adds	r3, r7, #6
 8000e24:	781a      	ldrb	r2, [r3, #0]
 8000e26:	23a0      	movs	r3, #160	; 0xa0
 8000e28:	05db      	lsls	r3, r3, #23
 8000e2a:	2102      	movs	r1, #2
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f000 fd9e 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000e32:	e018      	b.n	8000e66 <displayTurnHoursLED+0xfa>
	case 9:
		HAL_GPIO_WritePin(H9_GPIO_Port, H9_Pin, state);
 8000e34:	1dbb      	adds	r3, r7, #6
 8000e36:	781a      	ldrb	r2, [r3, #0]
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	015b      	lsls	r3, r3, #5
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <displayTurnHoursLED+0x108>)
 8000e3e:	0019      	movs	r1, r3
 8000e40:	f000 fd95 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000e44:	e00f      	b.n	8000e66 <displayTurnHoursLED+0xfa>
	case 10:
		HAL_GPIO_WritePin(H10_GPIO_Port, H10_Pin, state);
 8000e46:	1dbb      	adds	r3, r7, #6
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	480b      	ldr	r0, [pc, #44]	; (8000e78 <displayTurnHoursLED+0x10c>)
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2108      	movs	r1, #8
 8000e50:	f000 fd8d 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000e54:	e007      	b.n	8000e66 <displayTurnHoursLED+0xfa>
	case 11:
		HAL_GPIO_WritePin(H11_GPIO_Port, H11_Pin, state);
 8000e56:	1dbb      	adds	r3, r7, #6
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	4808      	ldr	r0, [pc, #32]	; (8000e7c <displayTurnHoursLED+0x110>)
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	2108      	movs	r1, #8
 8000e60:	f000 fd85 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000e64:	46c0      	nop			; (mov r8, r8)

	}

}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	08002fc4 	.word	0x08002fc4
 8000e74:	50000800 	.word	0x50000800
 8000e78:	50000400 	.word	0x50000400
 8000e7c:	50000c00 	.word	0x50000c00

08000e80 <displayTurnMinutesLED>:

void displayTurnMinutesLED(uint8_t led, uint8_t state) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	0002      	movs	r2, r0
 8000e88:	1dfb      	adds	r3, r7, #7
 8000e8a:	701a      	strb	r2, [r3, #0]
 8000e8c:	1dbb      	adds	r3, r7, #6
 8000e8e:	1c0a      	adds	r2, r1, #0
 8000e90:	701a      	strb	r2, [r3, #0]

	switch (led) {
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b1d      	cmp	r3, #29
 8000e98:	d900      	bls.n	8000e9c <displayTurnMinutesLED+0x1c>
 8000e9a:	e108      	b.n	80010ae <displayTurnMinutesLED+0x22e>
 8000e9c:	009a      	lsls	r2, r3, #2
 8000e9e:	4b86      	ldr	r3, [pc, #536]	; (80010b8 <displayTurnMinutesLED+0x238>)
 8000ea0:	18d3      	adds	r3, r2, r3
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	469f      	mov	pc, r3

	case 0:
		HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, state);
 8000ea6:	1dbb      	adds	r3, r7, #6
 8000ea8:	781a      	ldrb	r2, [r3, #0]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4883      	ldr	r0, [pc, #524]	; (80010bc <displayTurnMinutesLED+0x23c>)
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	f000 fd5c 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000eb6:	e0fa      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 1:
		HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, state);
 8000eb8:	1dbb      	adds	r3, r7, #6
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	487e      	ldr	r0, [pc, #504]	; (80010bc <displayTurnMinutesLED+0x23c>)
 8000ec2:	0019      	movs	r1, r3
 8000ec4:	f000 fd53 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000ec8:	e0f1      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 2:
		HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, state);
 8000eca:	1dbb      	adds	r3, r7, #6
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	487c      	ldr	r0, [pc, #496]	; (80010c0 <displayTurnMinutesLED+0x240>)
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2101      	movs	r1, #1
 8000ed4:	f000 fd4b 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000ed8:	e0e9      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 3:
		HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin, state);
 8000eda:	1dbb      	adds	r3, r7, #6
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	0119      	lsls	r1, r3, #4
 8000ee2:	23a0      	movs	r3, #160	; 0xa0
 8000ee4:	05db      	lsls	r3, r3, #23
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 fd41 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000eec:	e0df      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 4:
		HAL_GPIO_WritePin(M4_GPIO_Port, M4_Pin, state);
 8000eee:	1dbb      	adds	r3, r7, #6
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	2380      	movs	r3, #128	; 0x80
 8000ef4:	00d9      	lsls	r1, r3, #3
 8000ef6:	23a0      	movs	r3, #160	; 0xa0
 8000ef8:	05db      	lsls	r3, r3, #23
 8000efa:	0018      	movs	r0, r3
 8000efc:	f000 fd37 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000f00:	e0d5      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 5:
		HAL_GPIO_WritePin(M5_GPIO_Port, M5_Pin, state);
 8000f02:	1dbb      	adds	r3, r7, #6
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	2380      	movs	r3, #128	; 0x80
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	486d      	ldr	r0, [pc, #436]	; (80010c0 <displayTurnMinutesLED+0x240>)
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	f000 fd2e 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000f12:	e0cc      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 6:
		HAL_GPIO_WritePin(M6_GPIO_Port, M6_Pin, state);
 8000f14:	1dbb      	adds	r3, r7, #6
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4868      	ldr	r0, [pc, #416]	; (80010bc <displayTurnMinutesLED+0x23c>)
 8000f1a:	001a      	movs	r2, r3
 8000f1c:	2140      	movs	r1, #64	; 0x40
 8000f1e:	f000 fd26 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000f22:	e0c4      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 7:
		HAL_GPIO_WritePin(M7_GPIO_Port, M7_Pin, state);
 8000f24:	1dbb      	adds	r3, r7, #6
 8000f26:	781a      	ldrb	r2, [r3, #0]
 8000f28:	2380      	movs	r3, #128	; 0x80
 8000f2a:	0099      	lsls	r1, r3, #2
 8000f2c:	23a0      	movs	r3, #160	; 0xa0
 8000f2e:	05db      	lsls	r3, r3, #23
 8000f30:	0018      	movs	r0, r3
 8000f32:	f000 fd1c 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000f36:	e0ba      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 8:
		HAL_GPIO_WritePin(M8_GPIO_Port, M8_Pin, state);
 8000f38:	1dbb      	adds	r3, r7, #6
 8000f3a:	781a      	ldrb	r2, [r3, #0]
 8000f3c:	2380      	movs	r3, #128	; 0x80
 8000f3e:	01db      	lsls	r3, r3, #7
 8000f40:	4860      	ldr	r0, [pc, #384]	; (80010c4 <displayTurnMinutesLED+0x244>)
 8000f42:	0019      	movs	r1, r3
 8000f44:	f000 fd13 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000f48:	e0b1      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 9:
		HAL_GPIO_WritePin(M9_GPIO_Port, M9_Pin, state);
 8000f4a:	1dbb      	adds	r3, r7, #6
 8000f4c:	781a      	ldrb	r2, [r3, #0]
 8000f4e:	2380      	movs	r3, #128	; 0x80
 8000f50:	019b      	lsls	r3, r3, #6
 8000f52:	485c      	ldr	r0, [pc, #368]	; (80010c4 <displayTurnMinutesLED+0x244>)
 8000f54:	0019      	movs	r1, r3
 8000f56:	f000 fd0a 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000f5a:	e0a8      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 10:
		HAL_GPIO_WritePin(M10_GPIO_Port, M10_Pin, state);
 8000f5c:	1dbb      	adds	r3, r7, #6
 8000f5e:	781a      	ldrb	r2, [r3, #0]
 8000f60:	2380      	movs	r3, #128	; 0x80
 8000f62:	011b      	lsls	r3, r3, #4
 8000f64:	4857      	ldr	r0, [pc, #348]	; (80010c4 <displayTurnMinutesLED+0x244>)
 8000f66:	0019      	movs	r1, r3
 8000f68:	f000 fd01 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000f6c:	e09f      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 11:
		HAL_GPIO_WritePin(M11_GPIO_Port, M11_Pin, state);
 8000f6e:	1dbb      	adds	r3, r7, #6
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	2380      	movs	r3, #128	; 0x80
 8000f74:	00db      	lsls	r3, r3, #3
 8000f76:	4853      	ldr	r0, [pc, #332]	; (80010c4 <displayTurnMinutesLED+0x244>)
 8000f78:	0019      	movs	r1, r3
 8000f7a:	f000 fcf8 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000f7e:	e096      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 12:
		HAL_GPIO_WritePin(M12_GPIO_Port, M12_Pin, state);
 8000f80:	1dbb      	adds	r3, r7, #6
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	484f      	ldr	r0, [pc, #316]	; (80010c4 <displayTurnMinutesLED+0x244>)
 8000f86:	001a      	movs	r2, r3
 8000f88:	2104      	movs	r1, #4
 8000f8a:	f000 fcf0 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000f8e:	e08e      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 13:
		HAL_GPIO_WritePin(M13_GPIO_Port, M13_Pin, state);
 8000f90:	1dbb      	adds	r3, r7, #6
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	484b      	ldr	r0, [pc, #300]	; (80010c4 <displayTurnMinutesLED+0x244>)
 8000f96:	001a      	movs	r2, r3
 8000f98:	2101      	movs	r1, #1
 8000f9a:	f000 fce8 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000f9e:	e086      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 14:
		HAL_GPIO_WritePin(M14_GPIO_Port, M14_Pin, state);
 8000fa0:	1dbb      	adds	r3, r7, #6
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4845      	ldr	r0, [pc, #276]	; (80010bc <displayTurnMinutesLED+0x23c>)
 8000fa6:	001a      	movs	r2, r3
 8000fa8:	2120      	movs	r1, #32
 8000faa:	f000 fce0 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000fae:	e07e      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 15:
		HAL_GPIO_WritePin(M15_GPIO_Port, M15_Pin, state);
 8000fb0:	1dbb      	adds	r3, r7, #6
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4841      	ldr	r0, [pc, #260]	; (80010bc <displayTurnMinutesLED+0x23c>)
 8000fb6:	001a      	movs	r2, r3
 8000fb8:	2110      	movs	r1, #16
 8000fba:	f000 fcd8 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000fbe:	e076      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 16:
		HAL_GPIO_WritePin(M16_GPIO_Port, M16_Pin, state);
 8000fc0:	1dbb      	adds	r3, r7, #6
 8000fc2:	781a      	ldrb	r2, [r3, #0]
 8000fc4:	23a0      	movs	r3, #160	; 0xa0
 8000fc6:	05db      	lsls	r3, r3, #23
 8000fc8:	2140      	movs	r1, #64	; 0x40
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 fccf 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000fd0:	e06d      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 17:
		HAL_GPIO_WritePin(M17_GPIO_Port, M17_Pin, state);
 8000fd2:	1dbb      	adds	r3, r7, #6
 8000fd4:	781a      	ldrb	r2, [r3, #0]
 8000fd6:	23a0      	movs	r3, #160	; 0xa0
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	2120      	movs	r1, #32
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f000 fcc6 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000fe2:	e064      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 18:
		HAL_GPIO_WritePin(M18_GPIO_Port, M18_Pin, state);
 8000fe4:	1dbb      	adds	r3, r7, #6
 8000fe6:	781a      	ldrb	r2, [r3, #0]
 8000fe8:	23a0      	movs	r3, #160	; 0xa0
 8000fea:	05db      	lsls	r3, r3, #23
 8000fec:	2108      	movs	r1, #8
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f000 fcbd 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8000ff4:	e05b      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 19:
		HAL_GPIO_WritePin(M19_GPIO_Port, M19_Pin, state);
 8000ff6:	1dbb      	adds	r3, r7, #6
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	23a0      	movs	r3, #160	; 0xa0
 8000ffc:	05db      	lsls	r3, r3, #23
 8000ffe:	2104      	movs	r1, #4
 8001000:	0018      	movs	r0, r3
 8001002:	f000 fcb4 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8001006:	e052      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 20:
		HAL_GPIO_WritePin(M20_GPIO_Port, M20_Pin, state);
 8001008:	1dbb      	adds	r3, r7, #6
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	23a0      	movs	r3, #160	; 0xa0
 800100e:	05db      	lsls	r3, r3, #23
 8001010:	2101      	movs	r1, #1
 8001012:	0018      	movs	r0, r3
 8001014:	f000 fcab 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8001018:	e049      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 21:
		HAL_GPIO_WritePin(M21_GPIO_Port, M21_Pin, state);
 800101a:	1dbb      	adds	r3, r7, #6
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	4827      	ldr	r0, [pc, #156]	; (80010bc <displayTurnMinutesLED+0x23c>)
 8001020:	001a      	movs	r2, r3
 8001022:	2108      	movs	r1, #8
 8001024:	f000 fca3 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8001028:	e041      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 22:
		HAL_GPIO_WritePin(M22_GPIO_Port, M22_Pin, state);
 800102a:	1dbb      	adds	r3, r7, #6
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	4823      	ldr	r0, [pc, #140]	; (80010bc <displayTurnMinutesLED+0x23c>)
 8001030:	001a      	movs	r2, r3
 8001032:	2104      	movs	r1, #4
 8001034:	f000 fc9b 	bl	800196e <HAL_GPIO_WritePin>
		break;
 8001038:	e039      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 23:
		HAL_GPIO_WritePin(M23_GPIO_Port, M23_Pin, state);
 800103a:	1dbb      	adds	r3, r7, #6
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	2380      	movs	r3, #128	; 0x80
 8001040:	011b      	lsls	r3, r3, #4
 8001042:	481e      	ldr	r0, [pc, #120]	; (80010bc <displayTurnMinutesLED+0x23c>)
 8001044:	0019      	movs	r1, r3
 8001046:	f000 fc92 	bl	800196e <HAL_GPIO_WritePin>
		break;
 800104a:	e030      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 24:
		HAL_GPIO_WritePin(M24_GPIO_Port, M24_Pin, state);
 800104c:	1dbb      	adds	r3, r7, #6
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4819      	ldr	r0, [pc, #100]	; (80010bc <displayTurnMinutesLED+0x23c>)
 8001056:	0019      	movs	r1, r3
 8001058:	f000 fc89 	bl	800196e <HAL_GPIO_WritePin>
		break;
 800105c:	e027      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 25:
		HAL_GPIO_WritePin(M25_GPIO_Port, M25_Pin, state);
 800105e:	1dbb      	adds	r3, r7, #6
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4817      	ldr	r0, [pc, #92]	; (80010c0 <displayTurnMinutesLED+0x240>)
 8001064:	001a      	movs	r2, r3
 8001066:	2140      	movs	r1, #64	; 0x40
 8001068:	f000 fc81 	bl	800196e <HAL_GPIO_WritePin>
		break;
 800106c:	e01f      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 26:
		HAL_GPIO_WritePin(M26_GPIO_Port, M26_Pin, state);
 800106e:	1dbb      	adds	r3, r7, #6
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4813      	ldr	r0, [pc, #76]	; (80010c0 <displayTurnMinutesLED+0x240>)
 8001074:	001a      	movs	r2, r3
 8001076:	2120      	movs	r1, #32
 8001078:	f000 fc79 	bl	800196e <HAL_GPIO_WritePin>
		break;
 800107c:	e017      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 27:
		HAL_GPIO_WritePin(M27_GPIO_Port, M27_Pin, state);
 800107e:	1dbb      	adds	r3, r7, #6
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	480f      	ldr	r0, [pc, #60]	; (80010c0 <displayTurnMinutesLED+0x240>)
 8001084:	001a      	movs	r2, r3
 8001086:	2110      	movs	r1, #16
 8001088:	f000 fc71 	bl	800196e <HAL_GPIO_WritePin>
		break;
 800108c:	e00f      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 28:
		HAL_GPIO_WritePin(M28_GPIO_Port, M28_Pin, state);
 800108e:	1dbb      	adds	r3, r7, #6
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <displayTurnMinutesLED+0x240>)
 8001094:	001a      	movs	r2, r3
 8001096:	2104      	movs	r1, #4
 8001098:	f000 fc69 	bl	800196e <HAL_GPIO_WritePin>
		break;
 800109c:	e007      	b.n	80010ae <displayTurnMinutesLED+0x22e>
	case 29:
		HAL_GPIO_WritePin(M29_GPIO_Port, M29_Pin, state);
 800109e:	1dbb      	adds	r3, r7, #6
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <displayTurnMinutesLED+0x240>)
 80010a4:	001a      	movs	r2, r3
 80010a6:	2102      	movs	r1, #2
 80010a8:	f000 fc61 	bl	800196e <HAL_GPIO_WritePin>
		break;
 80010ac:	46c0      	nop			; (mov r8, r8)

	}

}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	46bd      	mov	sp, r7
 80010b2:	b002      	add	sp, #8
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	08002ff4 	.word	0x08002ff4
 80010bc:	50000800 	.word	0x50000800
 80010c0:	50000c00 	.word	0x50000c00
 80010c4:	50000400 	.word	0x50000400

080010c8 <extiCallback>:

#include "interrupts.h"
#include "main.h"
#include "../rtc/rtc.h"

void extiCallback(uint16_t pin) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	0002      	movs	r2, r0
 80010d0:	1dbb      	adds	r3, r7, #6
 80010d2:	801a      	strh	r2, [r3, #0]

//	if(pin == 0){
//		pin = SET_Pin; // dunno why- SET pin is reading as - instead of 15
//	}
	dontSleepFlag = 1;
 80010d4:	4b51      	ldr	r3, [pc, #324]	; (800121c <extiCallback+0x154>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]

	if (pin == TOUCH_Pin) {
 80010da:	1dbb      	adds	r3, r7, #6
 80010dc:	881b      	ldrh	r3, [r3, #0]
 80010de:	2b02      	cmp	r3, #2
 80010e0:	d154      	bne.n	800118c <extiCallback+0xc4>

		if (mode == MODE_SLEEP) {
 80010e2:	4b4f      	ldr	r3, [pc, #316]	; (8001220 <extiCallback+0x158>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b04      	cmp	r3, #4
 80010ea:	d103      	bne.n	80010f4 <extiCallback+0x2c>
			mode = MODE_NORMAL;
 80010ec:	4b4c      	ldr	r3, [pc, #304]	; (8001220 <extiCallback+0x158>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
			displayTurnOff();
		}

	}

}
 80010f2:	e08e      	b.n	8001212 <extiCallback+0x14a>
		} else if (mode == MODE_SETTINGS_H) {
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <extiCallback+0x158>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d116      	bne.n	800112c <extiCallback+0x64>
			hours++;
 80010fe:	4b49      	ldr	r3, [pc, #292]	; (8001224 <extiCallback+0x15c>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	b25b      	sxtb	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	3301      	adds	r3, #1
 8001108:	b2db      	uxtb	r3, r3
 800110a:	b25a      	sxtb	r2, r3
 800110c:	4b45      	ldr	r3, [pc, #276]	; (8001224 <extiCallback+0x15c>)
 800110e:	701a      	strb	r2, [r3, #0]
			if (hours > 11)
 8001110:	4b44      	ldr	r3, [pc, #272]	; (8001224 <extiCallback+0x15c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	b25b      	sxtb	r3, r3
 8001116:	2b0b      	cmp	r3, #11
 8001118:	dd02      	ble.n	8001120 <extiCallback+0x58>
				hours = 0;
 800111a:	4b42      	ldr	r3, [pc, #264]	; (8001224 <extiCallback+0x15c>)
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
			seconds = 0;
 8001120:	4b41      	ldr	r3, [pc, #260]	; (8001228 <extiCallback+0x160>)
 8001122:	2200      	movs	r2, #0
 8001124:	701a      	strb	r2, [r3, #0]
			rtcSetTime();
 8001126:	f000 f8d5 	bl	80012d4 <rtcSetTime>
}
 800112a:	e072      	b.n	8001212 <extiCallback+0x14a>
		} else if (mode == MODE_SETTINGS_M) {
 800112c:	4b3c      	ldr	r3, [pc, #240]	; (8001220 <extiCallback+0x158>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b02      	cmp	r3, #2
 8001134:	d116      	bne.n	8001164 <extiCallback+0x9c>
			minutes++;
 8001136:	4b3d      	ldr	r3, [pc, #244]	; (800122c <extiCallback+0x164>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	b21b      	sxth	r3, r3
 800113c:	b29b      	uxth	r3, r3
 800113e:	3301      	adds	r3, #1
 8001140:	b29b      	uxth	r3, r3
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b39      	ldr	r3, [pc, #228]	; (800122c <extiCallback+0x164>)
 8001146:	801a      	strh	r2, [r3, #0]
			if (minutes > 59)
 8001148:	4b38      	ldr	r3, [pc, #224]	; (800122c <extiCallback+0x164>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	b21b      	sxth	r3, r3
 800114e:	2b3b      	cmp	r3, #59	; 0x3b
 8001150:	dd02      	ble.n	8001158 <extiCallback+0x90>
				minutes = 0;
 8001152:	4b36      	ldr	r3, [pc, #216]	; (800122c <extiCallback+0x164>)
 8001154:	2200      	movs	r2, #0
 8001156:	801a      	strh	r2, [r3, #0]
			seconds = 0;
 8001158:	4b33      	ldr	r3, [pc, #204]	; (8001228 <extiCallback+0x160>)
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
			rtcSetTime();
 800115e:	f000 f8b9 	bl	80012d4 <rtcSetTime>
}
 8001162:	e056      	b.n	8001212 <extiCallback+0x14a>
		} else if(mode == MODE_SETTINGS_S){
 8001164:	4b2e      	ldr	r3, [pc, #184]	; (8001220 <extiCallback+0x158>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b03      	cmp	r3, #3
 800116c:	d105      	bne.n	800117a <extiCallback+0xb2>
			seconds = 0;
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <extiCallback+0x160>)
 8001170:	2200      	movs	r2, #0
 8001172:	701a      	strb	r2, [r3, #0]
			rtcSetTime();
 8001174:	f000 f8ae 	bl	80012d4 <rtcSetTime>
}
 8001178:	e04b      	b.n	8001212 <extiCallback+0x14a>
		}else if(mode == MODE_FORCE){
 800117a:	4b29      	ldr	r3, [pc, #164]	; (8001220 <extiCallback+0x158>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b05      	cmp	r3, #5
 8001182:	d146      	bne.n	8001212 <extiCallback+0x14a>
			mode = MODE_NORMAL;
 8001184:	4b26      	ldr	r3, [pc, #152]	; (8001220 <extiCallback+0x158>)
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
}
 800118a:	e042      	b.n	8001212 <extiCallback+0x14a>
	else if (pin == SET_Pin) {
 800118c:	1dbb      	adds	r3, r7, #6
 800118e:	881a      	ldrh	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	; 0x80
 8001192:	021b      	lsls	r3, r3, #8
 8001194:	429a      	cmp	r2, r3
 8001196:	d13c      	bne.n	8001212 <extiCallback+0x14a>
		if (mode == MODE_SLEEP) {
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <extiCallback+0x158>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d108      	bne.n	80011b4 <extiCallback+0xec>
			mode = MODE_SETTINGS_H;
 80011a2:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <extiCallback+0x158>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
			seconds = 0;
 80011a8:	4b1f      	ldr	r3, [pc, #124]	; (8001228 <extiCallback+0x160>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
			rtcSetTime();
 80011ae:	f000 f891 	bl	80012d4 <rtcSetTime>
}
 80011b2:	e02e      	b.n	8001212 <extiCallback+0x14a>
		} else if (mode == MODE_SETTINGS_H) {
 80011b4:	4b1a      	ldr	r3, [pc, #104]	; (8001220 <extiCallback+0x158>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d103      	bne.n	80011c6 <extiCallback+0xfe>
			mode = MODE_SETTINGS_M;
 80011be:	4b18      	ldr	r3, [pc, #96]	; (8001220 <extiCallback+0x158>)
 80011c0:	2202      	movs	r2, #2
 80011c2:	701a      	strb	r2, [r3, #0]
}
 80011c4:	e025      	b.n	8001212 <extiCallback+0x14a>
		} else if (mode == MODE_SETTINGS_M) {
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <extiCallback+0x158>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	2b02      	cmp	r3, #2
 80011ce:	d103      	bne.n	80011d8 <extiCallback+0x110>
			mode = MODE_SETTINGS_S;
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <extiCallback+0x158>)
 80011d2:	2203      	movs	r2, #3
 80011d4:	701a      	strb	r2, [r3, #0]
}
 80011d6:	e01c      	b.n	8001212 <extiCallback+0x14a>
		} else if (mode == MODE_SETTINGS_S) {
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <extiCallback+0x158>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b03      	cmp	r3, #3
 80011e0:	d107      	bne.n	80011f2 <extiCallback+0x12a>
			rtcSetTime();
 80011e2:	f000 f877 	bl	80012d4 <rtcSetTime>
			displayTurnOff();
 80011e6:	f7ff fc7f 	bl	8000ae8 <displayTurnOff>
			mode = MODE_NORMAL;
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <extiCallback+0x158>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
}
 80011f0:	e00f      	b.n	8001212 <extiCallback+0x14a>
		} else if(mode == MODE_NORMAL){
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <extiCallback+0x158>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d103      	bne.n	8001204 <extiCallback+0x13c>
			mode = MODE_FORCE;
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <extiCallback+0x158>)
 80011fe:	2205      	movs	r2, #5
 8001200:	701a      	strb	r2, [r3, #0]
}
 8001202:	e006      	b.n	8001212 <extiCallback+0x14a>
		} else if(mode == MODE_FORCE){
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <extiCallback+0x158>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b05      	cmp	r3, #5
 800120c:	d101      	bne.n	8001212 <extiCallback+0x14a>
			displayTurnOff();
 800120e:	f7ff fc6b 	bl	8000ae8 <displayTurnOff>
}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	b002      	add	sp, #8
 8001218:	bd80      	pop	{r7, pc}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	2000003c 	.word	0x2000003c
 8001220:	2000003d 	.word	0x2000003d
 8001224:	20000074 	.word	0x20000074
 8001228:	20000070 	.word	0x20000070
 800122c:	20000072 	.word	0x20000072

08001230 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	0002      	movs	r2, r0
 8001238:	1dbb      	adds	r3, r7, #6
 800123a:	801a      	strh	r2, [r3, #0]

	extiCallback(GPIO_Pin);
 800123c:	1dbb      	adds	r3, r7, #6
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff ff41 	bl	80010c8 <extiCallback>

}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	46bd      	mov	sp, r7
 800124a:	b002      	add	sp, #8
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	0002      	movs	r2, r0
 8001256:	1dbb      	adds	r3, r7, #6
 8001258:	801a      	strh	r2, [r3, #0]

	extiCallback(GPIO_Pin);
 800125a:	1dbb      	adds	r3, r7, #6
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	0018      	movs	r0, r3
 8001260:	f7ff ff32 	bl	80010c8 <extiCallback>

}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	46bd      	mov	sp, r7
 8001268:	b002      	add	sp, #8
 800126a:	bd80      	pop	{r7, pc}

0800126c <rtcGetTime>:
 */

#include "rtc.h"


void rtcGetTime() {
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001270:	4912      	ldr	r1, [pc, #72]	; (80012bc <rtcGetTime+0x50>)
 8001272:	4b13      	ldr	r3, [pc, #76]	; (80012c0 <rtcGetTime+0x54>)
 8001274:	2200      	movs	r2, #0
 8001276:	0018      	movs	r0, r3
 8001278:	f001 fb5a 	bl	8002930 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800127c:	4911      	ldr	r1, [pc, #68]	; (80012c4 <rtcGetTime+0x58>)
 800127e:	4b10      	ldr	r3, [pc, #64]	; (80012c0 <rtcGetTime+0x54>)
 8001280:	2200      	movs	r2, #0
 8001282:	0018      	movs	r0, r3
 8001284:	f001 fc42 	bl	8002b0c <HAL_RTC_GetDate>



	if(sTime.Hours == 12){
 8001288:	4b0c      	ldr	r3, [pc, #48]	; (80012bc <rtcGetTime+0x50>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b0c      	cmp	r3, #12
 800128e:	d103      	bne.n	8001298 <rtcGetTime+0x2c>
		hours = 0;
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <rtcGetTime+0x5c>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
 8001296:	e004      	b.n	80012a2 <rtcGetTime+0x36>
	}else{
		hours = sTime.Hours;
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <rtcGetTime+0x50>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b25a      	sxtb	r2, r3
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <rtcGetTime+0x5c>)
 80012a0:	701a      	strb	r2, [r3, #0]
	}
	minutes = sTime.Minutes;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <rtcGetTime+0x50>)
 80012a4:	785b      	ldrb	r3, [r3, #1]
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <rtcGetTime+0x60>)
 80012aa:	801a      	strh	r2, [r3, #0]
	seconds = sTime.Seconds;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <rtcGetTime+0x50>)
 80012ae:	789b      	ldrb	r3, [r3, #2]
 80012b0:	b25a      	sxtb	r2, r3
 80012b2:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <rtcGetTime+0x64>)
 80012b4:	701a      	strb	r2, [r3, #0]

}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000028 	.word	0x20000028
 80012c0:	20000044 	.word	0x20000044
 80012c4:	20000040 	.word	0x20000040
 80012c8:	20000074 	.word	0x20000074
 80012cc:	20000072 	.word	0x20000072
 80012d0:	20000070 	.word	0x20000070

080012d4 <rtcSetTime>:

void rtcSetTime() {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

	sTime.Hours = hours;
 80012d8:	4b10      	ldr	r3, [pc, #64]	; (800131c <rtcSetTime+0x48>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	b25b      	sxtb	r3, r3
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	4b0f      	ldr	r3, [pc, #60]	; (8001320 <rtcSetTime+0x4c>)
 80012e2:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = minutes;
 80012e4:	4b0f      	ldr	r3, [pc, #60]	; (8001324 <rtcSetTime+0x50>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <rtcSetTime+0x4c>)
 80012ee:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = seconds;
 80012f0:	4b0d      	ldr	r3, [pc, #52]	; (8001328 <rtcSetTime+0x54>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	b2da      	uxtb	r2, r3
 80012f8:	4b09      	ldr	r3, [pc, #36]	; (8001320 <rtcSetTime+0x4c>)
 80012fa:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80012fc:	4908      	ldr	r1, [pc, #32]	; (8001320 <rtcSetTime+0x4c>)
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <rtcSetTime+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	0018      	movs	r0, r3
 8001304:	f001 fa6c 	bl	80027e0 <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001308:	4909      	ldr	r1, [pc, #36]	; (8001330 <rtcSetTime+0x5c>)
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <rtcSetTime+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	0018      	movs	r0, r3
 8001310:	f001 fb6a 	bl	80029e8 <HAL_RTC_SetDate>

//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0);

}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	20000074 	.word	0x20000074
 8001320:	20000028 	.word	0x20000028
 8001324:	20000072 	.word	0x20000072
 8001328:	20000070 	.word	0x20000070
 800132c:	20000044 	.word	0x20000044
 8001330:	20000040 	.word	0x20000040

08001334 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800133a:	1dfb      	adds	r3, r7, #7
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001340:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_Init+0x3c>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_Init+0x3c>)
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	0049      	lsls	r1, r1, #1
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800134e:	2000      	movs	r0, #0
 8001350:	f000 f810 	bl	8001374 <HAL_InitTick>
 8001354:	1e03      	subs	r3, r0, #0
 8001356:	d003      	beq.n	8001360 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	2201      	movs	r2, #1
 800135c:	701a      	strb	r2, [r3, #0]
 800135e:	e001      	b.n	8001364 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001360:	f7ff fa32 	bl	80007c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001364:	1dfb      	adds	r3, r7, #7
 8001366:	781b      	ldrb	r3, [r3, #0]
}
 8001368:	0018      	movs	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	b002      	add	sp, #8
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40022000 	.word	0x40022000

08001374 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b590      	push	{r4, r7, lr}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800137c:	230f      	movs	r3, #15
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_InitTick+0x88>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d02b      	beq.n	80013e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800138c:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <HAL_InitTick+0x8c>)
 800138e:	681c      	ldr	r4, [r3, #0]
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <HAL_InitTick+0x88>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	0019      	movs	r1, r3
 8001396:	23fa      	movs	r3, #250	; 0xfa
 8001398:	0098      	lsls	r0, r3, #2
 800139a:	f7fe feb1 	bl	8000100 <__udivsi3>
 800139e:	0003      	movs	r3, r0
 80013a0:	0019      	movs	r1, r3
 80013a2:	0020      	movs	r0, r4
 80013a4:	f7fe feac 	bl	8000100 <__udivsi3>
 80013a8:	0003      	movs	r3, r0
 80013aa:	0018      	movs	r0, r3
 80013ac:	f000 f951 	bl	8001652 <HAL_SYSTICK_Config>
 80013b0:	1e03      	subs	r3, r0, #0
 80013b2:	d112      	bne.n	80013da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d80a      	bhi.n	80013d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	2301      	movs	r3, #1
 80013be:	425b      	negs	r3, r3
 80013c0:	2200      	movs	r2, #0
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 f920 	bl	8001608 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013c8:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_InitTick+0x90>)
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	e00d      	b.n	80013ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80013d0:	230f      	movs	r3, #15
 80013d2:	18fb      	adds	r3, r7, r3
 80013d4:	2201      	movs	r2, #1
 80013d6:	701a      	strb	r2, [r3, #0]
 80013d8:	e008      	b.n	80013ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013da:	230f      	movs	r3, #15
 80013dc:	18fb      	adds	r3, r7, r3
 80013de:	2201      	movs	r2, #1
 80013e0:	701a      	strb	r2, [r3, #0]
 80013e2:	e003      	b.n	80013ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e4:	230f      	movs	r3, #15
 80013e6:	18fb      	adds	r3, r7, r3
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80013ec:	230f      	movs	r3, #15
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	781b      	ldrb	r3, [r3, #0]
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b005      	add	sp, #20
 80013f8:	bd90      	pop	{r4, r7, pc}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	20000008 	.word	0x20000008
 8001400:	20000000 	.word	0x20000000
 8001404:	20000004 	.word	0x20000004

08001408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <HAL_IncTick+0x1c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	001a      	movs	r2, r3
 8001412:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_IncTick+0x20>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	18d2      	adds	r2, r2, r3
 8001418:	4b03      	ldr	r3, [pc, #12]	; (8001428 <HAL_IncTick+0x20>)
 800141a:	601a      	str	r2, [r3, #0]
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	20000008 	.word	0x20000008
 8001428:	20000078 	.word	0x20000078

0800142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b02      	ldr	r3, [pc, #8]	; (800143c <HAL_GetTick+0x10>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	20000078 	.word	0x20000078

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff fff0 	bl	800142c <HAL_GetTick>
 800144c:	0003      	movs	r3, r0
 800144e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3301      	adds	r3, #1
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_Delay+0x40>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	001a      	movs	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	189b      	adds	r3, r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001466:	46c0      	nop			; (mov r8, r8)
 8001468:	f7ff ffe0 	bl	800142c <HAL_GetTick>
 800146c:	0002      	movs	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	46c0      	nop			; (mov r8, r8)
 800147a:	46bd      	mov	sp, r7
 800147c:	b004      	add	sp, #16
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000008 	.word	0x20000008

08001484 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a06      	ldr	r2, [pc, #24]	; (80014ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001492:	4013      	ands	r3, r2
 8001494:	0019      	movs	r1, r3
 8001496:	4b04      	ldr	r3, [pc, #16]	; (80014a8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]
}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b002      	add	sp, #8
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	40010000 	.word	0x40010000
 80014ac:	fffff9ff 	.word	0xfffff9ff

080014b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	0002      	movs	r2, r0
 80014b8:	1dfb      	adds	r3, r7, #7
 80014ba:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b7f      	cmp	r3, #127	; 0x7f
 80014c2:	d809      	bhi.n	80014d8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c4:	1dfb      	adds	r3, r7, #7
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	001a      	movs	r2, r3
 80014ca:	231f      	movs	r3, #31
 80014cc:	401a      	ands	r2, r3
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <__NVIC_EnableIRQ+0x30>)
 80014d0:	2101      	movs	r1, #1
 80014d2:	4091      	lsls	r1, r2
 80014d4:	000a      	movs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80014d8:	46c0      	nop			; (mov r8, r8)
 80014da:	46bd      	mov	sp, r7
 80014dc:	b002      	add	sp, #8
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	0002      	movs	r2, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	1dfb      	adds	r3, r7, #7
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b7f      	cmp	r3, #127	; 0x7f
 80014f8:	d828      	bhi.n	800154c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014fa:	4a2f      	ldr	r2, [pc, #188]	; (80015b8 <__NVIC_SetPriority+0xd4>)
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b25b      	sxtb	r3, r3
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	33c0      	adds	r3, #192	; 0xc0
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	589b      	ldr	r3, [r3, r2]
 800150a:	1dfa      	adds	r2, r7, #7
 800150c:	7812      	ldrb	r2, [r2, #0]
 800150e:	0011      	movs	r1, r2
 8001510:	2203      	movs	r2, #3
 8001512:	400a      	ands	r2, r1
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	21ff      	movs	r1, #255	; 0xff
 8001518:	4091      	lsls	r1, r2
 800151a:	000a      	movs	r2, r1
 800151c:	43d2      	mvns	r2, r2
 800151e:	401a      	ands	r2, r3
 8001520:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	019b      	lsls	r3, r3, #6
 8001526:	22ff      	movs	r2, #255	; 0xff
 8001528:	401a      	ands	r2, r3
 800152a:	1dfb      	adds	r3, r7, #7
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	0018      	movs	r0, r3
 8001530:	2303      	movs	r3, #3
 8001532:	4003      	ands	r3, r0
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001538:	481f      	ldr	r0, [pc, #124]	; (80015b8 <__NVIC_SetPriority+0xd4>)
 800153a:	1dfb      	adds	r3, r7, #7
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	b25b      	sxtb	r3, r3
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	430a      	orrs	r2, r1
 8001544:	33c0      	adds	r3, #192	; 0xc0
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800154a:	e031      	b.n	80015b0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800154c:	4a1b      	ldr	r2, [pc, #108]	; (80015bc <__NVIC_SetPriority+0xd8>)
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	0019      	movs	r1, r3
 8001554:	230f      	movs	r3, #15
 8001556:	400b      	ands	r3, r1
 8001558:	3b08      	subs	r3, #8
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3306      	adds	r3, #6
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	18d3      	adds	r3, r2, r3
 8001562:	3304      	adds	r3, #4
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	1dfa      	adds	r2, r7, #7
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	0011      	movs	r1, r2
 800156c:	2203      	movs	r2, #3
 800156e:	400a      	ands	r2, r1
 8001570:	00d2      	lsls	r2, r2, #3
 8001572:	21ff      	movs	r1, #255	; 0xff
 8001574:	4091      	lsls	r1, r2
 8001576:	000a      	movs	r2, r1
 8001578:	43d2      	mvns	r2, r2
 800157a:	401a      	ands	r2, r3
 800157c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	019b      	lsls	r3, r3, #6
 8001582:	22ff      	movs	r2, #255	; 0xff
 8001584:	401a      	ands	r2, r3
 8001586:	1dfb      	adds	r3, r7, #7
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	0018      	movs	r0, r3
 800158c:	2303      	movs	r3, #3
 800158e:	4003      	ands	r3, r0
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001594:	4809      	ldr	r0, [pc, #36]	; (80015bc <__NVIC_SetPriority+0xd8>)
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	001c      	movs	r4, r3
 800159c:	230f      	movs	r3, #15
 800159e:	4023      	ands	r3, r4
 80015a0:	3b08      	subs	r3, #8
 80015a2:	089b      	lsrs	r3, r3, #2
 80015a4:	430a      	orrs	r2, r1
 80015a6:	3306      	adds	r3, #6
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	18c3      	adds	r3, r0, r3
 80015ac:	3304      	adds	r3, #4
 80015ae:	601a      	str	r2, [r3, #0]
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b003      	add	sp, #12
 80015b6:	bd90      	pop	{r4, r7, pc}
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <SysTick_Config+0x40>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015d2:	2301      	movs	r3, #1
 80015d4:	e010      	b.n	80015f8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <SysTick_Config+0x44>)
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	3a01      	subs	r2, #1
 80015dc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015de:	2301      	movs	r3, #1
 80015e0:	425b      	negs	r3, r3
 80015e2:	2103      	movs	r1, #3
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff ff7d 	bl	80014e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <SysTick_Config+0x44>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <SysTick_Config+0x44>)
 80015f2:	2207      	movs	r2, #7
 80015f4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f6:	2300      	movs	r3, #0
}
 80015f8:	0018      	movs	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	b002      	add	sp, #8
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	00ffffff 	.word	0x00ffffff
 8001604:	e000e010 	.word	0xe000e010

08001608 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	60b9      	str	r1, [r7, #8]
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	210f      	movs	r1, #15
 8001614:	187b      	adds	r3, r7, r1
 8001616:	1c02      	adds	r2, r0, #0
 8001618:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800161a:	68ba      	ldr	r2, [r7, #8]
 800161c:	187b      	adds	r3, r7, r1
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b25b      	sxtb	r3, r3
 8001622:	0011      	movs	r1, r2
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff ff5d 	bl	80014e4 <__NVIC_SetPriority>
}
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	46bd      	mov	sp, r7
 800162e:	b004      	add	sp, #16
 8001630:	bd80      	pop	{r7, pc}

08001632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001632:	b580      	push	{r7, lr}
 8001634:	b082      	sub	sp, #8
 8001636:	af00      	add	r7, sp, #0
 8001638:	0002      	movs	r2, r0
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	b25b      	sxtb	r3, r3
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff ff33 	bl	80014b0 <__NVIC_EnableIRQ>
}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b002      	add	sp, #8
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	0018      	movs	r0, r3
 800165e:	f7ff ffaf 	bl	80015c0 <SysTick_Config>
 8001662:	0003      	movs	r3, r0
}
 8001664:	0018      	movs	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	b002      	add	sp, #8
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800167a:	e147      	b.n	800190c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2101      	movs	r1, #1
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	4091      	lsls	r1, r2
 8001686:	000a      	movs	r2, r1
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d100      	bne.n	8001694 <HAL_GPIO_Init+0x28>
 8001692:	e138      	b.n	8001906 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b01      	cmp	r3, #1
 800169a:	d00b      	beq.n	80016b4 <HAL_GPIO_Init+0x48>
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016a8:	2b11      	cmp	r3, #17
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b12      	cmp	r3, #18
 80016b2:	d130      	bne.n	8001716 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	2203      	movs	r2, #3
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	43da      	mvns	r2, r3
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	4013      	ands	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	409a      	lsls	r2, r3
 80016d6:	0013      	movs	r3, r2
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	43da      	mvns	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	4013      	ands	r3, r2
 80016f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	091b      	lsrs	r3, r3, #4
 8001700:	2201      	movs	r2, #1
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
 8001708:	0013      	movs	r3, r2
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4313      	orrs	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	409a      	lsls	r2, r3
 8001724:	0013      	movs	r3, r2
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	409a      	lsls	r2, r3
 8001738:	0013      	movs	r3, r2
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d003      	beq.n	8001756 <HAL_GPIO_Init+0xea>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b12      	cmp	r3, #18
 8001754:	d123      	bne.n	800179e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	08da      	lsrs	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3208      	adds	r2, #8
 800175e:	0092      	lsls	r2, r2, #2
 8001760:	58d3      	ldr	r3, [r2, r3]
 8001762:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	2207      	movs	r2, #7
 8001768:	4013      	ands	r3, r2
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	220f      	movs	r2, #15
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	43da      	mvns	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	2107      	movs	r1, #7
 8001782:	400b      	ands	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	08da      	lsrs	r2, r3, #3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3208      	adds	r2, #8
 8001798:	0092      	lsls	r2, r2, #2
 800179a:	6939      	ldr	r1, [r7, #16]
 800179c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	2203      	movs	r2, #3
 80017aa:	409a      	lsls	r2, r3
 80017ac:	0013      	movs	r3, r2
 80017ae:	43da      	mvns	r2, r3
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	4013      	ands	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	2203      	movs	r2, #3
 80017bc:	401a      	ands	r2, r3
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	409a      	lsls	r2, r3
 80017c4:	0013      	movs	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	055b      	lsls	r3, r3, #21
 80017da:	4013      	ands	r3, r2
 80017dc:	d100      	bne.n	80017e0 <HAL_GPIO_Init+0x174>
 80017de:	e092      	b.n	8001906 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80017e0:	4a50      	ldr	r2, [pc, #320]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3318      	adds	r3, #24
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	589b      	ldr	r3, [r3, r2]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	2203      	movs	r2, #3
 80017f2:	4013      	ands	r3, r2
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	220f      	movs	r2, #15
 80017f8:	409a      	lsls	r2, r3
 80017fa:	0013      	movs	r3, r2
 80017fc:	43da      	mvns	r2, r3
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	23a0      	movs	r3, #160	; 0xa0
 8001808:	05db      	lsls	r3, r3, #23
 800180a:	429a      	cmp	r2, r3
 800180c:	d013      	beq.n	8001836 <HAL_GPIO_Init+0x1ca>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a45      	ldr	r2, [pc, #276]	; (8001928 <HAL_GPIO_Init+0x2bc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d00d      	beq.n	8001832 <HAL_GPIO_Init+0x1c6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a44      	ldr	r2, [pc, #272]	; (800192c <HAL_GPIO_Init+0x2c0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d007      	beq.n	800182e <HAL_GPIO_Init+0x1c2>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a43      	ldr	r2, [pc, #268]	; (8001930 <HAL_GPIO_Init+0x2c4>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_GPIO_Init+0x1be>
 8001826:	2303      	movs	r3, #3
 8001828:	e006      	b.n	8001838 <HAL_GPIO_Init+0x1cc>
 800182a:	2305      	movs	r3, #5
 800182c:	e004      	b.n	8001838 <HAL_GPIO_Init+0x1cc>
 800182e:	2302      	movs	r3, #2
 8001830:	e002      	b.n	8001838 <HAL_GPIO_Init+0x1cc>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_GPIO_Init+0x1cc>
 8001836:	2300      	movs	r3, #0
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	2103      	movs	r1, #3
 800183c:	400a      	ands	r2, r1
 800183e:	00d2      	lsls	r2, r2, #3
 8001840:	4093      	lsls	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001848:	4936      	ldr	r1, [pc, #216]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	089b      	lsrs	r3, r3, #2
 800184e:	3318      	adds	r3, #24
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001856:	4a33      	ldr	r2, [pc, #204]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 8001858:	2380      	movs	r3, #128	; 0x80
 800185a:	58d3      	ldr	r3, [r2, r3]
 800185c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	43da      	mvns	r2, r3
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	2380      	movs	r3, #128	; 0x80
 800186e:	025b      	lsls	r3, r3, #9
 8001870:	4013      	ands	r3, r2
 8001872:	d003      	beq.n	800187c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800187c:	4929      	ldr	r1, [pc, #164]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 800187e:	2280      	movs	r2, #128	; 0x80
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001884:	4a27      	ldr	r2, [pc, #156]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 8001886:	2384      	movs	r3, #132	; 0x84
 8001888:	58d3      	ldr	r3, [r2, r3]
 800188a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	43da      	mvns	r2, r3
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	4013      	ands	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	2380      	movs	r3, #128	; 0x80
 800189c:	029b      	lsls	r3, r3, #10
 800189e:	4013      	ands	r3, r2
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018aa:	491e      	ldr	r1, [pc, #120]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80018ac:	2284      	movs	r2, #132	; 0x84
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	43da      	mvns	r2, r3
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	035b      	lsls	r3, r3, #13
 80018ca:	4013      	ands	r3, r2
 80018cc:	d003      	beq.n	80018d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018d6:	4b13      	ldr	r3, [pc, #76]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43da      	mvns	r2, r3
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4013      	ands	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	2380      	movs	r3, #128	; 0x80
 80018f2:	039b      	lsls	r3, r3, #14
 80018f4:	4013      	ands	r3, r2
 80018f6:	d003      	beq.n	8001900 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001900:	4b08      	ldr	r3, [pc, #32]	; (8001924 <HAL_GPIO_Init+0x2b8>)
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	40da      	lsrs	r2, r3
 8001914:	1e13      	subs	r3, r2, #0
 8001916:	d000      	beq.n	800191a <HAL_GPIO_Init+0x2ae>
 8001918:	e6b0      	b.n	800167c <HAL_GPIO_Init+0x10>
  }
}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b006      	add	sp, #24
 8001920:	bd80      	pop	{r7, pc}
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	40021800 	.word	0x40021800
 8001928:	50000400 	.word	0x50000400
 800192c:	50000800 	.word	0x50000800
 8001930:	50000c00 	.word	0x50000c00

08001934 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	000a      	movs	r2, r1
 800193e:	1cbb      	adds	r3, r7, #2
 8001940:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	1cba      	adds	r2, r7, #2
 8001948:	8812      	ldrh	r2, [r2, #0]
 800194a:	4013      	ands	r3, r2
 800194c:	d004      	beq.n	8001958 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800194e:	230f      	movs	r3, #15
 8001950:	18fb      	adds	r3, r7, r3
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e003      	b.n	8001960 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001958:	230f      	movs	r3, #15
 800195a:	18fb      	adds	r3, r7, r3
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001960:	230f      	movs	r3, #15
 8001962:	18fb      	adds	r3, r7, r3
 8001964:	781b      	ldrb	r3, [r3, #0]
}
 8001966:	0018      	movs	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	b004      	add	sp, #16
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	0008      	movs	r0, r1
 8001978:	0011      	movs	r1, r2
 800197a:	1cbb      	adds	r3, r7, #2
 800197c:	1c02      	adds	r2, r0, #0
 800197e:	801a      	strh	r2, [r3, #0]
 8001980:	1c7b      	adds	r3, r7, #1
 8001982:	1c0a      	adds	r2, r1, #0
 8001984:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001986:	1c7b      	adds	r3, r7, #1
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800198e:	1cbb      	adds	r3, r7, #2
 8001990:	881a      	ldrh	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001996:	e003      	b.n	80019a0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001998:	1cbb      	adds	r3, r7, #2
 800199a:	881a      	ldrh	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019a0:	46c0      	nop			; (mov r8, r8)
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b002      	add	sp, #8
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	0002      	movs	r2, r0
 80019b0:	1dbb      	adds	r3, r7, #6
 80019b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80019b4:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	1dba      	adds	r2, r7, #6
 80019ba:	8812      	ldrh	r2, [r2, #0]
 80019bc:	4013      	ands	r3, r2
 80019be:	d008      	beq.n	80019d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80019c0:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80019c2:	1dba      	adds	r2, r7, #6
 80019c4:	8812      	ldrh	r2, [r2, #0]
 80019c6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80019c8:	1dbb      	adds	r3, r7, #6
 80019ca:	881b      	ldrh	r3, [r3, #0]
 80019cc:	0018      	movs	r0, r3
 80019ce:	f7ff fc2f 	bl	8001230 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	1dba      	adds	r2, r7, #6
 80019d8:	8812      	ldrh	r2, [r2, #0]
 80019da:	4013      	ands	r3, r2
 80019dc:	d008      	beq.n	80019f0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80019e0:	1dba      	adds	r2, r7, #6
 80019e2:	8812      	ldrh	r2, [r2, #0]
 80019e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80019e6:	1dbb      	adds	r3, r7, #6
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7ff fc2f 	bl	800124e <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b002      	add	sp, #8
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021800 	.word	0x40021800

080019fc <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001a06:	2180      	movs	r1, #128	; 0x80
 8001a08:	0049      	lsls	r1, r1, #1
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	601a      	str	r2, [r3, #0]
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40007000 	.word	0x40007000

08001a18 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	000a      	movs	r2, r1
 8001a22:	1cfb      	adds	r3, r7, #3
 8001a24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d009      	beq.n	8001a40 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8001a2c:	4b14      	ldr	r3, [pc, #80]	; (8001a80 <HAL_PWR_EnterSTOPMode+0x68>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2207      	movs	r2, #7
 8001a32:	4393      	bics	r3, r2
 8001a34:	001a      	movs	r2, r3
 8001a36:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_PWR_EnterSTOPMode+0x68>)
 8001a38:	2101      	movs	r1, #1
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	e005      	b.n	8001a4c <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8001a40:	4b0f      	ldr	r3, [pc, #60]	; (8001a80 <HAL_PWR_EnterSTOPMode+0x68>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_PWR_EnterSTOPMode+0x68>)
 8001a46:	2107      	movs	r1, #7
 8001a48:	438a      	bics	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a4c:	4b0d      	ldr	r3, [pc, #52]	; (8001a84 <HAL_PWR_EnterSTOPMode+0x6c>)
 8001a4e:	691a      	ldr	r2, [r3, #16]
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <HAL_PWR_EnterSTOPMode+0x6c>)
 8001a52:	2104      	movs	r1, #4
 8001a54:	430a      	orrs	r2, r1
 8001a56:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001a58:	1cfb      	adds	r3, r7, #3
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d101      	bne.n	8001a64 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001a60:	bf30      	wfi
 8001a62:	e002      	b.n	8001a6a <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001a64:	bf40      	sev
    __WFE();
 8001a66:	bf20      	wfe
    __WFE();
 8001a68:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_PWR_EnterSTOPMode+0x6c>)
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_PWR_EnterSTOPMode+0x6c>)
 8001a70:	2104      	movs	r1, #4
 8001a72:	438a      	bics	r2, r1
 8001a74:	611a      	str	r2, [r3, #16]
}
 8001a76:	46c0      	nop			; (mov r8, r8)
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	b002      	add	sp, #8
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	46c0      	nop			; (mov r8, r8)
 8001a80:	40007000 	.word	0x40007000
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a19      	ldr	r2, [pc, #100]	; (8001afc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	0019      	movs	r1, r3
 8001a9a:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d11f      	bne.n	8001aec <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001aac:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	189b      	adds	r3, r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4912      	ldr	r1, [pc, #72]	; (8001b04 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001aba:	0018      	movs	r0, r3
 8001abc:	f7fe fb20 	bl	8000100 <__udivsi3>
 8001ac0:	0003      	movs	r3, r0
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ac6:	e008      	b.n	8001ada <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	e001      	b.n	8001ada <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e009      	b.n	8001aee <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ada:	4b07      	ldr	r3, [pc, #28]	; (8001af8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	2380      	movs	r3, #128	; 0x80
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	2380      	movs	r3, #128	; 0x80
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d0ed      	beq.n	8001ac8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	0018      	movs	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b004      	add	sp, #16
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	46c0      	nop			; (mov r8, r8)
 8001af8:	40007000 	.word	0x40007000
 8001afc:	fffff9ff 	.word	0xfffff9ff
 8001b00:	20000000 	.word	0x20000000
 8001b04:	000f4240 	.word	0x000f4240

08001b08 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e2f9      	b.n	800210e <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	4013      	ands	r3, r2
 8001b22:	d100      	bne.n	8001b26 <HAL_RCC_OscConfig+0x1e>
 8001b24:	e07c      	b.n	8001c20 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b26:	4bc3      	ldr	r3, [pc, #780]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2238      	movs	r2, #56	; 0x38
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b30:	4bc0      	ldr	r3, [pc, #768]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	2203      	movs	r2, #3
 8001b36:	4013      	ands	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	2b10      	cmp	r3, #16
 8001b3e:	d102      	bne.n	8001b46 <HAL_RCC_OscConfig+0x3e>
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b03      	cmp	r3, #3
 8001b44:	d002      	beq.n	8001b4c <HAL_RCC_OscConfig+0x44>
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d10b      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4c:	4bb9      	ldr	r3, [pc, #740]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	029b      	lsls	r3, r3, #10
 8001b54:	4013      	ands	r3, r2
 8001b56:	d062      	beq.n	8001c1e <HAL_RCC_OscConfig+0x116>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d15e      	bne.n	8001c1e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e2d4      	b.n	800210e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685a      	ldr	r2, [r3, #4]
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	025b      	lsls	r3, r3, #9
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d107      	bne.n	8001b80 <HAL_RCC_OscConfig+0x78>
 8001b70:	4bb0      	ldr	r3, [pc, #704]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	4baf      	ldr	r3, [pc, #700]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001b76:	2180      	movs	r1, #128	; 0x80
 8001b78:	0249      	lsls	r1, r1, #9
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	e020      	b.n	8001bc2 <HAL_RCC_OscConfig+0xba>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	23a0      	movs	r3, #160	; 0xa0
 8001b86:	02db      	lsls	r3, r3, #11
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d10e      	bne.n	8001baa <HAL_RCC_OscConfig+0xa2>
 8001b8c:	4ba9      	ldr	r3, [pc, #676]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4ba8      	ldr	r3, [pc, #672]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001b92:	2180      	movs	r1, #128	; 0x80
 8001b94:	02c9      	lsls	r1, r1, #11
 8001b96:	430a      	orrs	r2, r1
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	4ba6      	ldr	r3, [pc, #664]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	4ba5      	ldr	r3, [pc, #660]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001ba0:	2180      	movs	r1, #128	; 0x80
 8001ba2:	0249      	lsls	r1, r1, #9
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e00b      	b.n	8001bc2 <HAL_RCC_OscConfig+0xba>
 8001baa:	4ba2      	ldr	r3, [pc, #648]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	4ba1      	ldr	r3, [pc, #644]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	49a1      	ldr	r1, [pc, #644]	; (8001e38 <HAL_RCC_OscConfig+0x330>)
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	4b9f      	ldr	r3, [pc, #636]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4b9e      	ldr	r3, [pc, #632]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001bbc:	499f      	ldr	r1, [pc, #636]	; (8001e3c <HAL_RCC_OscConfig+0x334>)
 8001bbe:	400a      	ands	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d014      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bca:	f7ff fc2f 	bl	800142c <HAL_GetTick>
 8001bce:	0003      	movs	r3, r0
 8001bd0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd4:	f7ff fc2a 	bl	800142c <HAL_GetTick>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b64      	cmp	r3, #100	; 0x64
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e293      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001be6:	4b93      	ldr	r3, [pc, #588]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	029b      	lsls	r3, r3, #10
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0xcc>
 8001bf2:	e015      	b.n	8001c20 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fc1a 	bl	800142c <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfe:	f7ff fc15 	bl	800142c <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b64      	cmp	r3, #100	; 0x64
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e27e      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c10:	4b88      	ldr	r3, [pc, #544]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0xf6>
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2202      	movs	r2, #2
 8001c26:	4013      	ands	r3, r2
 8001c28:	d100      	bne.n	8001c2c <HAL_RCC_OscConfig+0x124>
 8001c2a:	e099      	b.n	8001d60 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c2c:	4b81      	ldr	r3, [pc, #516]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2238      	movs	r2, #56	; 0x38
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c36:	4b7f      	ldr	r3, [pc, #508]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2b10      	cmp	r3, #16
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0x144>
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d002      	beq.n	8001c52 <HAL_RCC_OscConfig+0x14a>
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d135      	bne.n	8001cbe <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c52:	4b78      	ldr	r3, [pc, #480]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d005      	beq.n	8001c6a <HAL_RCC_OscConfig+0x162>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e251      	b.n	800210e <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c6a:	4b72      	ldr	r3, [pc, #456]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	4a74      	ldr	r2, [pc, #464]	; (8001e40 <HAL_RCC_OscConfig+0x338>)
 8001c70:	4013      	ands	r3, r2
 8001c72:	0019      	movs	r1, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	695b      	ldr	r3, [r3, #20]
 8001c78:	021a      	lsls	r2, r3, #8
 8001c7a:	4b6e      	ldr	r3, [pc, #440]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d112      	bne.n	8001cac <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c86:	4b6b      	ldr	r3, [pc, #428]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6e      	ldr	r2, [pc, #440]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	0019      	movs	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691a      	ldr	r2, [r3, #16]
 8001c94:	4b67      	ldr	r3, [pc, #412]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c9a:	4b66      	ldr	r3, [pc, #408]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	0adb      	lsrs	r3, r3, #11
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	4a68      	ldr	r2, [pc, #416]	; (8001e48 <HAL_RCC_OscConfig+0x340>)
 8001ca6:	40da      	lsrs	r2, r3
 8001ca8:	4b68      	ldr	r3, [pc, #416]	; (8001e4c <HAL_RCC_OscConfig+0x344>)
 8001caa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001cac:	4b68      	ldr	r3, [pc, #416]	; (8001e50 <HAL_RCC_OscConfig+0x348>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	0018      	movs	r0, r3
 8001cb2:	f7ff fb5f 	bl	8001374 <HAL_InitTick>
 8001cb6:	1e03      	subs	r3, r0, #0
 8001cb8:	d051      	beq.n	8001d5e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e227      	b.n	800210e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d030      	beq.n	8001d28 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001cc6:	4b5b      	ldr	r3, [pc, #364]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a5e      	ldr	r2, [pc, #376]	; (8001e44 <HAL_RCC_OscConfig+0x33c>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	0019      	movs	r1, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	4b57      	ldr	r3, [pc, #348]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001cda:	4b56      	ldr	r3, [pc, #344]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4b55      	ldr	r3, [pc, #340]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	0049      	lsls	r1, r1, #1
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce8:	f7ff fba0 	bl	800142c <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff fb9b 	bl	800142c <HAL_GetTick>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e204      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d04:	4b4b      	ldr	r3, [pc, #300]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	2380      	movs	r3, #128	; 0x80
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d10:	4b48      	ldr	r3, [pc, #288]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	4a4a      	ldr	r2, [pc, #296]	; (8001e40 <HAL_RCC_OscConfig+0x338>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	0019      	movs	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	021a      	lsls	r2, r3, #8
 8001d20:	4b44      	ldr	r3, [pc, #272]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001d22:	430a      	orrs	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	e01b      	b.n	8001d60 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001d28:	4b42      	ldr	r3, [pc, #264]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b41      	ldr	r3, [pc, #260]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001d2e:	4949      	ldr	r1, [pc, #292]	; (8001e54 <HAL_RCC_OscConfig+0x34c>)
 8001d30:	400a      	ands	r2, r1
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff fb7a 	bl	800142c <HAL_GetTick>
 8001d38:	0003      	movs	r3, r0
 8001d3a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3e:	f7ff fb75 	bl	800142c <HAL_GetTick>
 8001d42:	0002      	movs	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e1de      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d50:	4b38      	ldr	r3, [pc, #224]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	; 0x80
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d1f0      	bne.n	8001d3e <HAL_RCC_OscConfig+0x236>
 8001d5c:	e000      	b.n	8001d60 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d5e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2208      	movs	r2, #8
 8001d66:	4013      	ands	r3, r2
 8001d68:	d047      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001d6a:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2238      	movs	r2, #56	; 0x38
 8001d70:	4013      	ands	r3, r2
 8001d72:	2b18      	cmp	r3, #24
 8001d74:	d10a      	bne.n	8001d8c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001d76:	4b2f      	ldr	r3, [pc, #188]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d03c      	beq.n	8001dfa <HAL_RCC_OscConfig+0x2f2>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d138      	bne.n	8001dfa <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e1c0      	b.n	800210e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d019      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001d96:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d98:	4b26      	ldr	r3, [pc, #152]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff fb44 	bl	800142c <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001daa:	f7ff fb3f 	bl	800142c <HAL_GetTick>
 8001dae:	0002      	movs	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e1a8      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dbc:	4b1d      	ldr	r3, [pc, #116]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d0f1      	beq.n	8001daa <HAL_RCC_OscConfig+0x2a2>
 8001dc6:	e018      	b.n	8001dfa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001dca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dcc:	4b19      	ldr	r3, [pc, #100]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001dce:	2101      	movs	r1, #1
 8001dd0:	438a      	bics	r2, r1
 8001dd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fb2a 	bl	800142c <HAL_GetTick>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dde:	f7ff fb25 	bl	800142c <HAL_GetTick>
 8001de2:	0002      	movs	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e18e      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df4:	2202      	movs	r2, #2
 8001df6:	4013      	ands	r3, r2
 8001df8:	d1f1      	bne.n	8001dde <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2204      	movs	r2, #4
 8001e00:	4013      	ands	r3, r2
 8001e02:	d100      	bne.n	8001e06 <HAL_RCC_OscConfig+0x2fe>
 8001e04:	e0c6      	b.n	8001f94 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e06:	231f      	movs	r3, #31
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2238      	movs	r2, #56	; 0x38
 8001e14:	4013      	ands	r3, r2
 8001e16:	2b20      	cmp	r3, #32
 8001e18:	d11e      	bne.n	8001e58 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_RCC_OscConfig+0x32c>)
 8001e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1e:	2202      	movs	r2, #2
 8001e20:	4013      	ands	r3, r2
 8001e22:	d100      	bne.n	8001e26 <HAL_RCC_OscConfig+0x31e>
 8001e24:	e0b6      	b.n	8001f94 <HAL_RCC_OscConfig+0x48c>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d000      	beq.n	8001e30 <HAL_RCC_OscConfig+0x328>
 8001e2e:	e0b1      	b.n	8001f94 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e16c      	b.n	800210e <HAL_RCC_OscConfig+0x606>
 8001e34:	40021000 	.word	0x40021000
 8001e38:	fffeffff 	.word	0xfffeffff
 8001e3c:	fffbffff 	.word	0xfffbffff
 8001e40:	ffff80ff 	.word	0xffff80ff
 8001e44:	ffffc7ff 	.word	0xffffc7ff
 8001e48:	00f42400 	.word	0x00f42400
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000004 	.word	0x20000004
 8001e54:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e58:	4baf      	ldr	r3, [pc, #700]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001e5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	055b      	lsls	r3, r3, #21
 8001e60:	4013      	ands	r3, r2
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0x360>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x362>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d011      	beq.n	8001e92 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001e6e:	4baa      	ldr	r3, [pc, #680]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e72:	4ba9      	ldr	r3, [pc, #676]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001e74:	2180      	movs	r1, #128	; 0x80
 8001e76:	0549      	lsls	r1, r1, #21
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e7c:	4ba6      	ldr	r3, [pc, #664]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	055b      	lsls	r3, r3, #21
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001e8a:	231f      	movs	r3, #31
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	2201      	movs	r2, #1
 8001e90:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e92:	4ba2      	ldr	r3, [pc, #648]	; (800211c <HAL_RCC_OscConfig+0x614>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	2380      	movs	r3, #128	; 0x80
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d11a      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e9e:	4b9f      	ldr	r3, [pc, #636]	; (800211c <HAL_RCC_OscConfig+0x614>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b9e      	ldr	r3, [pc, #632]	; (800211c <HAL_RCC_OscConfig+0x614>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0049      	lsls	r1, r1, #1
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001eac:	f7ff fabe 	bl	800142c <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb6:	f7ff fab9 	bl	800142c <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e122      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec8:	4b94      	ldr	r3, [pc, #592]	; (800211c <HAL_RCC_OscConfig+0x614>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	005b      	lsls	r3, r3, #1
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x3e2>
 8001edc:	4b8e      	ldr	r3, [pc, #568]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001ede:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ee0:	4b8d      	ldr	r3, [pc, #564]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ee8:	e01c      	b.n	8001f24 <HAL_RCC_OscConfig+0x41c>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x404>
 8001ef2:	4b89      	ldr	r3, [pc, #548]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001ef4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ef6:	4b88      	ldr	r3, [pc, #544]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001ef8:	2104      	movs	r1, #4
 8001efa:	430a      	orrs	r2, r1
 8001efc:	65da      	str	r2, [r3, #92]	; 0x5c
 8001efe:	4b86      	ldr	r3, [pc, #536]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001f00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f02:	4b85      	ldr	r3, [pc, #532]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001f04:	2101      	movs	r1, #1
 8001f06:	430a      	orrs	r2, r1
 8001f08:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0x41c>
 8001f0c:	4b82      	ldr	r3, [pc, #520]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001f0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f10:	4b81      	ldr	r3, [pc, #516]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	438a      	bics	r2, r1
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f18:	4b7f      	ldr	r3, [pc, #508]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001f1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f1c:	4b7e      	ldr	r3, [pc, #504]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001f1e:	2104      	movs	r1, #4
 8001f20:	438a      	bics	r2, r1
 8001f22:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d014      	beq.n	8001f56 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2c:	f7ff fa7e 	bl	800142c <HAL_GetTick>
 8001f30:	0003      	movs	r3, r0
 8001f32:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f34:	e009      	b.n	8001f4a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f36:	f7ff fa79 	bl	800142c <HAL_GetTick>
 8001f3a:	0002      	movs	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	4a77      	ldr	r2, [pc, #476]	; (8002120 <HAL_RCC_OscConfig+0x618>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e0e1      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f4a:	4b73      	ldr	r3, [pc, #460]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	2202      	movs	r2, #2
 8001f50:	4013      	ands	r3, r2
 8001f52:	d0f0      	beq.n	8001f36 <HAL_RCC_OscConfig+0x42e>
 8001f54:	e013      	b.n	8001f7e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7ff fa69 	bl	800142c <HAL_GetTick>
 8001f5a:	0003      	movs	r3, r0
 8001f5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f5e:	e009      	b.n	8001f74 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7ff fa64 	bl	800142c <HAL_GetTick>
 8001f64:	0002      	movs	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	4a6d      	ldr	r2, [pc, #436]	; (8002120 <HAL_RCC_OscConfig+0x618>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e0cc      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f74:	4b68      	ldr	r3, [pc, #416]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	2202      	movs	r2, #2
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	d1f0      	bne.n	8001f60 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001f7e:	231f      	movs	r3, #31
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4b63      	ldr	r3, [pc, #396]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f8c:	4b62      	ldr	r3, [pc, #392]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001f8e:	4965      	ldr	r1, [pc, #404]	; (8002124 <HAL_RCC_OscConfig+0x61c>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d100      	bne.n	8001f9e <HAL_RCC_OscConfig+0x496>
 8001f9c:	e0b6      	b.n	800210c <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9e:	4b5e      	ldr	r3, [pc, #376]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2238      	movs	r2, #56	; 0x38
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d100      	bne.n	8001fac <HAL_RCC_OscConfig+0x4a4>
 8001faa:	e07e      	b.n	80020aa <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d153      	bne.n	800205c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb4:	4b58      	ldr	r3, [pc, #352]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4b57      	ldr	r3, [pc, #348]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001fba:	495b      	ldr	r1, [pc, #364]	; (8002128 <HAL_RCC_OscConfig+0x620>)
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fa34 	bl	800142c <HAL_GetTick>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fca:	f7ff fa2f 	bl	800142c <HAL_GetTick>
 8001fce:	0002      	movs	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e098      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fdc:	4b4e      	ldr	r3, [pc, #312]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	049b      	lsls	r3, r3, #18
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	d1f0      	bne.n	8001fca <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fe8:	4b4b      	ldr	r3, [pc, #300]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4a4f      	ldr	r2, [pc, #316]	; (800212c <HAL_RCC_OscConfig+0x624>)
 8001fee:	4013      	ands	r3, r2
 8001ff0:	0019      	movs	r1, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1a      	ldr	r2, [r3, #32]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	431a      	orrs	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	431a      	orrs	r2, r3
 8002010:	4b41      	ldr	r3, [pc, #260]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8002012:	430a      	orrs	r2, r1
 8002014:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002016:	4b40      	ldr	r3, [pc, #256]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	0449      	lsls	r1, r1, #17
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002024:	4b3c      	ldr	r3, [pc, #240]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8002026:	68da      	ldr	r2, [r3, #12]
 8002028:	4b3b      	ldr	r3, [pc, #236]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	0549      	lsls	r1, r1, #21
 800202e:	430a      	orrs	r2, r1
 8002030:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002032:	f7ff f9fb 	bl	800142c <HAL_GetTick>
 8002036:	0003      	movs	r3, r0
 8002038:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203c:	f7ff f9f6 	bl	800142c <HAL_GetTick>
 8002040:	0002      	movs	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e05f      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800204e:	4b32      	ldr	r3, [pc, #200]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	2380      	movs	r3, #128	; 0x80
 8002054:	049b      	lsls	r3, r3, #18
 8002056:	4013      	ands	r3, r2
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x534>
 800205a:	e057      	b.n	800210c <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8002062:	4931      	ldr	r1, [pc, #196]	; (8002128 <HAL_RCC_OscConfig+0x620>)
 8002064:	400a      	ands	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002068:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 800206a:	68da      	ldr	r2, [r3, #12]
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 800206e:	2103      	movs	r1, #3
 8002070:	438a      	bics	r2, r1
 8002072:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 8002076:	68da      	ldr	r2, [r3, #12]
 8002078:	4b27      	ldr	r3, [pc, #156]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 800207a:	492d      	ldr	r1, [pc, #180]	; (8002130 <HAL_RCC_OscConfig+0x628>)
 800207c:	400a      	ands	r2, r1
 800207e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002080:	f7ff f9d4 	bl	800142c <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208a:	f7ff f9cf 	bl	800142c <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e038      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800209c:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	049b      	lsls	r3, r3, #18
 80020a4:	4013      	ands	r3, r2
 80020a6:	d1f0      	bne.n	800208a <HAL_RCC_OscConfig+0x582>
 80020a8:	e030      	b.n	800210c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e02b      	b.n	800210e <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_RCC_OscConfig+0x610>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	2203      	movs	r2, #3
 80020c0:	401a      	ands	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d11e      	bne.n	8002108 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2270      	movs	r2, #112	; 0x70
 80020ce:	401a      	ands	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d117      	bne.n	8002108 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	23fe      	movs	r3, #254	; 0xfe
 80020dc:	01db      	lsls	r3, r3, #7
 80020de:	401a      	ands	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d10e      	bne.n	8002108 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	23f8      	movs	r3, #248	; 0xf8
 80020ee:	039b      	lsls	r3, r3, #14
 80020f0:	401a      	ands	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d106      	bne.n	8002108 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	0f5b      	lsrs	r3, r3, #29
 80020fe:	075a      	lsls	r2, r3, #29
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	0018      	movs	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	b008      	add	sp, #32
 8002114:	bd80      	pop	{r7, pc}
 8002116:	46c0      	nop			; (mov r8, r8)
 8002118:	40021000 	.word	0x40021000
 800211c:	40007000 	.word	0x40007000
 8002120:	00001388 	.word	0x00001388
 8002124:	efffffff 	.word	0xefffffff
 8002128:	feffffff 	.word	0xfeffffff
 800212c:	1fc1808c 	.word	0x1fc1808c
 8002130:	effeffff 	.word	0xeffeffff

08002134 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d101      	bne.n	8002148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e0e9      	b.n	800231c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002148:	4b76      	ldr	r3, [pc, #472]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2207      	movs	r2, #7
 800214e:	4013      	ands	r3, r2
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d91e      	bls.n	8002194 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002156:	4b73      	ldr	r3, [pc, #460]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2207      	movs	r2, #7
 800215c:	4393      	bics	r3, r2
 800215e:	0019      	movs	r1, r3
 8002160:	4b70      	ldr	r3, [pc, #448]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002168:	f7ff f960 	bl	800142c <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002170:	e009      	b.n	8002186 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002172:	f7ff f95b 	bl	800142c <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	4a6a      	ldr	r2, [pc, #424]	; (8002328 <HAL_RCC_ClockConfig+0x1f4>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e0ca      	b.n	800231c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002186:	4b67      	ldr	r3, [pc, #412]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2207      	movs	r2, #7
 800218c:	4013      	ands	r3, r2
 800218e:	683a      	ldr	r2, [r7, #0]
 8002190:	429a      	cmp	r2, r3
 8002192:	d1ee      	bne.n	8002172 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2202      	movs	r2, #2
 800219a:	4013      	ands	r3, r2
 800219c:	d015      	beq.n	80021ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	2204      	movs	r2, #4
 80021a4:	4013      	ands	r3, r2
 80021a6:	d006      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80021a8:	4b60      	ldr	r3, [pc, #384]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	4b5f      	ldr	r3, [pc, #380]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 80021ae:	21e0      	movs	r1, #224	; 0xe0
 80021b0:	01c9      	lsls	r1, r1, #7
 80021b2:	430a      	orrs	r2, r1
 80021b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b6:	4b5d      	ldr	r3, [pc, #372]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4a5d      	ldr	r2, [pc, #372]	; (8002330 <HAL_RCC_ClockConfig+0x1fc>)
 80021bc:	4013      	ands	r3, r2
 80021be:	0019      	movs	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	4b59      	ldr	r3, [pc, #356]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2201      	movs	r2, #1
 80021d0:	4013      	ands	r3, r2
 80021d2:	d057      	beq.n	8002284 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d107      	bne.n	80021ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021dc:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	029b      	lsls	r3, r3, #10
 80021e4:	4013      	ands	r3, r2
 80021e6:	d12b      	bne.n	8002240 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e097      	b.n	800231c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d107      	bne.n	8002204 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f4:	4b4d      	ldr	r3, [pc, #308]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	049b      	lsls	r3, r3, #18
 80021fc:	4013      	ands	r3, r2
 80021fe:	d11f      	bne.n	8002240 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e08b      	b.n	800231c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d107      	bne.n	800221c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800220c:	4b47      	ldr	r3, [pc, #284]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4013      	ands	r3, r2
 8002216:	d113      	bne.n	8002240 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e07f      	b.n	800231c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d106      	bne.n	8002232 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002224:	4b41      	ldr	r3, [pc, #260]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 8002226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002228:	2202      	movs	r2, #2
 800222a:	4013      	ands	r3, r2
 800222c:	d108      	bne.n	8002240 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e074      	b.n	800231c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002232:	4b3e      	ldr	r3, [pc, #248]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	2202      	movs	r2, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e06d      	b.n	800231c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002240:	4b3a      	ldr	r3, [pc, #232]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	2207      	movs	r2, #7
 8002246:	4393      	bics	r3, r2
 8002248:	0019      	movs	r1, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4b37      	ldr	r3, [pc, #220]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 8002250:	430a      	orrs	r2, r1
 8002252:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002254:	f7ff f8ea 	bl	800142c <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225c:	e009      	b.n	8002272 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800225e:	f7ff f8e5 	bl	800142c <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	4a2f      	ldr	r2, [pc, #188]	; (8002328 <HAL_RCC_ClockConfig+0x1f4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e054      	b.n	800231c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002272:	4b2e      	ldr	r3, [pc, #184]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2238      	movs	r2, #56	; 0x38
 8002278:	401a      	ands	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	429a      	cmp	r2, r3
 8002282:	d1ec      	bne.n	800225e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002284:	4b27      	ldr	r3, [pc, #156]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2207      	movs	r2, #7
 800228a:	4013      	ands	r3, r2
 800228c:	683a      	ldr	r2, [r7, #0]
 800228e:	429a      	cmp	r2, r3
 8002290:	d21e      	bcs.n	80022d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002292:	4b24      	ldr	r3, [pc, #144]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2207      	movs	r2, #7
 8002298:	4393      	bics	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022a4:	f7ff f8c2 	bl	800142c <HAL_GetTick>
 80022a8:	0003      	movs	r3, r0
 80022aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022ac:	e009      	b.n	80022c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ae:	f7ff f8bd 	bl	800142c <HAL_GetTick>
 80022b2:	0002      	movs	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	4a1b      	ldr	r2, [pc, #108]	; (8002328 <HAL_RCC_ClockConfig+0x1f4>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e02c      	b.n	800231c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2207      	movs	r2, #7
 80022c8:	4013      	ands	r3, r2
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1ee      	bne.n	80022ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2204      	movs	r2, #4
 80022d6:	4013      	ands	r3, r2
 80022d8:	d009      	beq.n	80022ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80022da:	4b14      	ldr	r3, [pc, #80]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4a15      	ldr	r2, [pc, #84]	; (8002334 <HAL_RCC_ClockConfig+0x200>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	0019      	movs	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80022ee:	f000 f829 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 80022f2:	0001      	movs	r1, r0
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_RCC_ClockConfig+0x1f8>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	220f      	movs	r2, #15
 80022fc:	401a      	ands	r2, r3
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <HAL_RCC_ClockConfig+0x204>)
 8002300:	0092      	lsls	r2, r2, #2
 8002302:	58d3      	ldr	r3, [r2, r3]
 8002304:	221f      	movs	r2, #31
 8002306:	4013      	ands	r3, r2
 8002308:	000a      	movs	r2, r1
 800230a:	40da      	lsrs	r2, r3
 800230c:	4b0b      	ldr	r3, [pc, #44]	; (800233c <HAL_RCC_ClockConfig+0x208>)
 800230e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002310:	4b0b      	ldr	r3, [pc, #44]	; (8002340 <HAL_RCC_ClockConfig+0x20c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	0018      	movs	r0, r3
 8002316:	f7ff f82d 	bl	8001374 <HAL_InitTick>
 800231a:	0003      	movs	r3, r0
}
 800231c:	0018      	movs	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	b004      	add	sp, #16
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40022000 	.word	0x40022000
 8002328:	00001388 	.word	0x00001388
 800232c:	40021000 	.word	0x40021000
 8002330:	fffff0ff 	.word	0xfffff0ff
 8002334:	ffff8fff 	.word	0xffff8fff
 8002338:	08002f84 	.word	0x08002f84
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800234a:	4b3c      	ldr	r3, [pc, #240]	; (800243c <HAL_RCC_GetSysClockFreq+0xf8>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2238      	movs	r2, #56	; 0x38
 8002350:	4013      	ands	r3, r2
 8002352:	d10f      	bne.n	8002374 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002354:	4b39      	ldr	r3, [pc, #228]	; (800243c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	0adb      	lsrs	r3, r3, #11
 800235a:	2207      	movs	r2, #7
 800235c:	4013      	ands	r3, r2
 800235e:	2201      	movs	r2, #1
 8002360:	409a      	lsls	r2, r3
 8002362:	0013      	movs	r3, r2
 8002364:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002366:	6839      	ldr	r1, [r7, #0]
 8002368:	4835      	ldr	r0, [pc, #212]	; (8002440 <HAL_RCC_GetSysClockFreq+0xfc>)
 800236a:	f7fd fec9 	bl	8000100 <__udivsi3>
 800236e:	0003      	movs	r3, r0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	e05d      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2238      	movs	r2, #56	; 0x38
 800237a:	4013      	ands	r3, r2
 800237c:	2b08      	cmp	r3, #8
 800237e:	d102      	bne.n	8002386 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002380:	4b30      	ldr	r3, [pc, #192]	; (8002444 <HAL_RCC_GetSysClockFreq+0x100>)
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	e054      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2238      	movs	r2, #56	; 0x38
 800238c:	4013      	ands	r3, r2
 800238e:	2b10      	cmp	r3, #16
 8002390:	d138      	bne.n	8002404 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002392:	4b2a      	ldr	r3, [pc, #168]	; (800243c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2203      	movs	r2, #3
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_GetSysClockFreq+0xf8>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	091b      	lsrs	r3, r3, #4
 80023a2:	2207      	movs	r2, #7
 80023a4:	4013      	ands	r3, r2
 80023a6:	3301      	adds	r3, #1
 80023a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2b03      	cmp	r3, #3
 80023ae:	d10d      	bne.n	80023cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	4824      	ldr	r0, [pc, #144]	; (8002444 <HAL_RCC_GetSysClockFreq+0x100>)
 80023b4:	f7fd fea4 	bl	8000100 <__udivsi3>
 80023b8:	0003      	movs	r3, r0
 80023ba:	0019      	movs	r1, r3
 80023bc:	4b1f      	ldr	r3, [pc, #124]	; (800243c <HAL_RCC_GetSysClockFreq+0xf8>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	227f      	movs	r2, #127	; 0x7f
 80023c4:	4013      	ands	r3, r2
 80023c6:	434b      	muls	r3, r1
 80023c8:	617b      	str	r3, [r7, #20]
        break;
 80023ca:	e00d      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	481c      	ldr	r0, [pc, #112]	; (8002440 <HAL_RCC_GetSysClockFreq+0xfc>)
 80023d0:	f7fd fe96 	bl	8000100 <__udivsi3>
 80023d4:	0003      	movs	r3, r0
 80023d6:	0019      	movs	r1, r3
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_RCC_GetSysClockFreq+0xf8>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	227f      	movs	r2, #127	; 0x7f
 80023e0:	4013      	ands	r3, r2
 80023e2:	434b      	muls	r3, r1
 80023e4:	617b      	str	r3, [r7, #20]
        break;
 80023e6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <HAL_RCC_GetSysClockFreq+0xf8>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	0f5b      	lsrs	r3, r3, #29
 80023ee:	2207      	movs	r2, #7
 80023f0:	4013      	ands	r3, r2
 80023f2:	3301      	adds	r3, #1
 80023f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	6978      	ldr	r0, [r7, #20]
 80023fa:	f7fd fe81 	bl	8000100 <__udivsi3>
 80023fe:	0003      	movs	r3, r0
 8002400:	613b      	str	r3, [r7, #16]
 8002402:	e015      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002404:	4b0d      	ldr	r3, [pc, #52]	; (800243c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2238      	movs	r2, #56	; 0x38
 800240a:	4013      	ands	r3, r2
 800240c:	2b20      	cmp	r3, #32
 800240e:	d103      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002410:	2380      	movs	r3, #128	; 0x80
 8002412:	021b      	lsls	r3, r3, #8
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	e00b      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <HAL_RCC_GetSysClockFreq+0xf8>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2238      	movs	r2, #56	; 0x38
 800241e:	4013      	ands	r3, r2
 8002420:	2b18      	cmp	r3, #24
 8002422:	d103      	bne.n	800242c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002424:	23fa      	movs	r3, #250	; 0xfa
 8002426:	01db      	lsls	r3, r3, #7
 8002428:	613b      	str	r3, [r7, #16]
 800242a:	e001      	b.n	8002430 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002430:	693b      	ldr	r3, [r7, #16]
}
 8002432:	0018      	movs	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	b006      	add	sp, #24
 8002438:	bd80      	pop	{r7, pc}
 800243a:	46c0      	nop			; (mov r8, r8)
 800243c:	40021000 	.word	0x40021000
 8002440:	00f42400 	.word	0x00f42400
 8002444:	007a1200 	.word	0x007a1200

08002448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b086      	sub	sp, #24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002450:	2313      	movs	r3, #19
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002458:	2312      	movs	r3, #18
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	029b      	lsls	r3, r3, #10
 8002468:	4013      	ands	r3, r2
 800246a:	d100      	bne.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800246c:	e0a4      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800246e:	2311      	movs	r3, #17
 8002470:	18fb      	adds	r3, r7, r3
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002476:	4b87      	ldr	r3, [pc, #540]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002478:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800247a:	2380      	movs	r3, #128	; 0x80
 800247c:	055b      	lsls	r3, r3, #21
 800247e:	4013      	ands	r3, r2
 8002480:	d111      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	4b84      	ldr	r3, [pc, #528]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002484:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002486:	4b83      	ldr	r3, [pc, #524]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002488:	2180      	movs	r1, #128	; 0x80
 800248a:	0549      	lsls	r1, r1, #21
 800248c:	430a      	orrs	r2, r1
 800248e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002490:	4b80      	ldr	r3, [pc, #512]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002492:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	055b      	lsls	r3, r3, #21
 8002498:	4013      	ands	r3, r2
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249e:	2311      	movs	r3, #17
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024a6:	4b7c      	ldr	r3, [pc, #496]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b7b      	ldr	r3, [pc, #492]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	0049      	lsls	r1, r1, #1
 80024b0:	430a      	orrs	r2, r1
 80024b2:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024b4:	f7fe ffba 	bl	800142c <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024bc:	e00b      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024be:	f7fe ffb5 	bl	800142c <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	2b02      	cmp	r3, #2
 80024ca:	d904      	bls.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80024cc:	2313      	movs	r3, #19
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	2203      	movs	r2, #3
 80024d2:	701a      	strb	r2, [r3, #0]
        break;
 80024d4:	e005      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024d6:	4b70      	ldr	r3, [pc, #448]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	005b      	lsls	r3, r3, #1
 80024de:	4013      	ands	r3, r2
 80024e0:	d0ed      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 80024e2:	2313      	movs	r3, #19
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d154      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80024ec:	4b69      	ldr	r3, [pc, #420]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024f0:	23c0      	movs	r3, #192	; 0xc0
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4013      	ands	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d019      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xea>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	699b      	ldr	r3, [r3, #24]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	429a      	cmp	r2, r3
 8002506:	d014      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002508:	4b62      	ldr	r3, [pc, #392]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800250a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250c:	4a63      	ldr	r2, [pc, #396]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800250e:	4013      	ands	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002512:	4b60      	ldr	r3, [pc, #384]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002514:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002516:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0249      	lsls	r1, r1, #9
 800251c:	430a      	orrs	r2, r1
 800251e:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002520:	4b5c      	ldr	r3, [pc, #368]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002522:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002524:	4b5b      	ldr	r3, [pc, #364]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002526:	495e      	ldr	r1, [pc, #376]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002528:	400a      	ands	r2, r1
 800252a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800252c:	4b59      	ldr	r3, [pc, #356]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800252e:	697a      	ldr	r2, [r7, #20]
 8002530:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	2201      	movs	r2, #1
 8002536:	4013      	ands	r3, r2
 8002538:	d016      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253a:	f7fe ff77 	bl	800142c <HAL_GetTick>
 800253e:	0003      	movs	r3, r0
 8002540:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	e00c      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002544:	f7fe ff72 	bl	800142c <HAL_GetTick>
 8002548:	0002      	movs	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d904      	bls.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002554:	2313      	movs	r3, #19
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	2203      	movs	r2, #3
 800255a:	701a      	strb	r2, [r3, #0]
            break;
 800255c:	e004      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800255e:	4b4d      	ldr	r3, [pc, #308]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002562:	2202      	movs	r2, #2
 8002564:	4013      	ands	r3, r2
 8002566:	d0ed      	beq.n	8002544 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002568:	2313      	movs	r3, #19
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d10a      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002572:	4b48      	ldr	r3, [pc, #288]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002576:	4a49      	ldr	r2, [pc, #292]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002578:	4013      	ands	r3, r2
 800257a:	0019      	movs	r1, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	699a      	ldr	r2, [r3, #24]
 8002580:	4b44      	ldr	r3, [pc, #272]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002582:	430a      	orrs	r2, r1
 8002584:	65da      	str	r2, [r3, #92]	; 0x5c
 8002586:	e00c      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002588:	2312      	movs	r3, #18
 800258a:	18fb      	adds	r3, r7, r3
 800258c:	2213      	movs	r2, #19
 800258e:	18ba      	adds	r2, r7, r2
 8002590:	7812      	ldrb	r2, [r2, #0]
 8002592:	701a      	strb	r2, [r3, #0]
 8002594:	e005      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002596:	2312      	movs	r3, #18
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	2213      	movs	r2, #19
 800259c:	18ba      	adds	r2, r7, r2
 800259e:	7812      	ldrb	r2, [r2, #0]
 80025a0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025a2:	2311      	movs	r3, #17
 80025a4:	18fb      	adds	r3, r7, r3
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d105      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ac:	4b39      	ldr	r3, [pc, #228]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025b2:	493d      	ldr	r1, [pc, #244]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2201      	movs	r2, #1
 80025be:	4013      	ands	r3, r2
 80025c0:	d009      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025c2:	4b34      	ldr	r3, [pc, #208]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c6:	2203      	movs	r2, #3
 80025c8:	4393      	bics	r3, r2
 80025ca:	0019      	movs	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025d2:	430a      	orrs	r2, r1
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2202      	movs	r2, #2
 80025dc:	4013      	ands	r3, r2
 80025de:	d009      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025e0:	4b2c      	ldr	r3, [pc, #176]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	220c      	movs	r2, #12
 80025e6:	4393      	bics	r3, r2
 80025e8:	0019      	movs	r1, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689a      	ldr	r2, [r3, #8]
 80025ee:	4b29      	ldr	r3, [pc, #164]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025f0:	430a      	orrs	r2, r1
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2220      	movs	r2, #32
 80025fa:	4013      	ands	r3, r2
 80025fc:	d009      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025fe:	4b25      	ldr	r3, [pc, #148]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002602:	4a2a      	ldr	r2, [pc, #168]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002604:	4013      	ands	r3, r2
 8002606:	0019      	movs	r1, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68da      	ldr	r2, [r3, #12]
 800260c:	4b21      	ldr	r3, [pc, #132]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800260e:	430a      	orrs	r2, r1
 8002610:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	01db      	lsls	r3, r3, #7
 800261a:	4013      	ands	r3, r2
 800261c:	d015      	beq.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800261e:	4b1d      	ldr	r3, [pc, #116]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	0899      	lsrs	r1, r3, #2
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695a      	ldr	r2, [r3, #20]
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800262c:	430a      	orrs	r2, r1
 800262e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695a      	ldr	r2, [r3, #20]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	05db      	lsls	r3, r3, #23
 8002638:	429a      	cmp	r2, r3
 800263a:	d106      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800263e:	68da      	ldr	r2, [r3, #12]
 8002640:	4b14      	ldr	r3, [pc, #80]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002642:	2180      	movs	r1, #128	; 0x80
 8002644:	0249      	lsls	r1, r1, #9
 8002646:	430a      	orrs	r2, r1
 8002648:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	4013      	ands	r3, r2
 8002654:	d016      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002656:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	4a15      	ldr	r2, [pc, #84]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800265c:	4013      	ands	r3, r2
 800265e:	0019      	movs	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	691a      	ldr	r2, [r3, #16]
 8002664:	4b0b      	ldr	r3, [pc, #44]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002666:	430a      	orrs	r2, r1
 8002668:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	2380      	movs	r3, #128	; 0x80
 8002670:	01db      	lsls	r3, r3, #7
 8002672:	429a      	cmp	r2, r3
 8002674:	d106      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800267c:	2180      	movs	r1, #128	; 0x80
 800267e:	0249      	lsls	r1, r1, #9
 8002680:	430a      	orrs	r2, r1
 8002682:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002684:	2312      	movs	r3, #18
 8002686:	18fb      	adds	r3, r7, r3
 8002688:	781b      	ldrb	r3, [r3, #0]
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b006      	add	sp, #24
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	40021000 	.word	0x40021000
 8002698:	40007000 	.word	0x40007000
 800269c:	fffffcff 	.word	0xfffffcff
 80026a0:	fffeffff 	.word	0xfffeffff
 80026a4:	00001388 	.word	0x00001388
 80026a8:	efffffff 	.word	0xefffffff
 80026ac:	ffffcfff 	.word	0xffffcfff
 80026b0:	ffff3fff 	.word	0xffff3fff

080026b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026b4:	b5b0      	push	{r4, r5, r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026bc:	230f      	movs	r3, #15
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d100      	bne.n	80026cc <HAL_RTC_Init+0x18>
 80026ca:	e07f      	b.n	80027cc <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2229      	movs	r2, #41	; 0x29
 80026d0:	5c9b      	ldrb	r3, [r3, r2]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10b      	bne.n	80026f0 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2228      	movs	r2, #40	; 0x28
 80026dc:	2100      	movs	r1, #0
 80026de:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2288      	movs	r2, #136	; 0x88
 80026e4:	0212      	lsls	r2, r2, #8
 80026e6:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	0018      	movs	r0, r3
 80026ec:	f7fe f894 	bl	8000818 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2229      	movs	r2, #41	; 0x29
 80026f4:	2102      	movs	r1, #2
 80026f6:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	22ca      	movs	r2, #202	; 0xca
 80026fe:	625a      	str	r2, [r3, #36]	; 0x24
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2253      	movs	r2, #83	; 0x53
 8002706:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002708:	250f      	movs	r5, #15
 800270a:	197c      	adds	r4, r7, r5
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0018      	movs	r0, r3
 8002710:	f000 fa71 	bl	8002bf6 <RTC_EnterInitMode>
 8002714:	0003      	movs	r3, r0
 8002716:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8002718:	197b      	adds	r3, r7, r5
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d148      	bne.n	80027b2 <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	492c      	ldr	r1, [pc, #176]	; (80027dc <HAL_RTC_Init+0x128>)
 800272c:	400a      	ands	r2, r1
 800272e:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6999      	ldr	r1, [r3, #24]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69db      	ldr	r3, [r3, #28]
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	430a      	orrs	r2, r1
 800274c:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6912      	ldr	r2, [r2, #16]
 8002756:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6919      	ldr	r1, [r3, #16]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	041a      	lsls	r2, r3, #16
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	430a      	orrs	r2, r1
 800276a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800276c:	250f      	movs	r5, #15
 800276e:	197c      	adds	r4, r7, r5
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	0018      	movs	r0, r3
 8002774:	f000 fa82 	bl	8002c7c <RTC_ExitInitMode>
 8002778:	0003      	movs	r3, r0
 800277a:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800277c:	197b      	adds	r3, r7, r5
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d116      	bne.n	80027b2 <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699a      	ldr	r2, [r3, #24]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	00d2      	lsls	r2, r2, #3
 8002790:	08d2      	lsrs	r2, r2, #3
 8002792:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6999      	ldr	r1, [r3, #24]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	22ff      	movs	r2, #255	; 0xff
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80027ba:	230f      	movs	r3, #15
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d103      	bne.n	80027cc <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2229      	movs	r2, #41	; 0x29
 80027c8:	2101      	movs	r1, #1
 80027ca:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80027cc:	230f      	movs	r3, #15
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	781b      	ldrb	r3, [r3, #0]
}
 80027d2:	0018      	movs	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	b004      	add	sp, #16
 80027d8:	bdb0      	pop	{r4, r5, r7, pc}
 80027da:	46c0      	nop			; (mov r8, r8)
 80027dc:	fb8fffbf 	.word	0xfb8fffbf

080027e0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2228      	movs	r2, #40	; 0x28
 80027f0:	5c9b      	ldrb	r3, [r3, r2]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_RTC_SetTime+0x1a>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e092      	b.n	8002920 <HAL_RTC_SetTime+0x140>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2228      	movs	r2, #40	; 0x28
 80027fe:	2101      	movs	r1, #1
 8002800:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2229      	movs	r2, #41	; 0x29
 8002806:	2102      	movs	r1, #2
 8002808:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	22ca      	movs	r2, #202	; 0xca
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2253      	movs	r2, #83	; 0x53
 8002818:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800281a:	2513      	movs	r5, #19
 800281c:	197c      	adds	r4, r7, r5
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	0018      	movs	r0, r3
 8002822:	f000 f9e8 	bl	8002bf6 <RTC_EnterInitMode>
 8002826:	0003      	movs	r3, r0
 8002828:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800282a:	197b      	adds	r3, r7, r5
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d162      	bne.n	80028f8 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d125      	bne.n	8002884 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	2240      	movs	r2, #64	; 0x40
 8002840:	4013      	ands	r3, r2
 8002842:	d102      	bne.n	800284a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2200      	movs	r2, #0
 8002848:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	0018      	movs	r0, r3
 8002850:	f000 fa5a 	bl	8002d08 <RTC_ByteToBcd2>
 8002854:	0003      	movs	r3, r0
 8002856:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	785b      	ldrb	r3, [r3, #1]
 800285c:	0018      	movs	r0, r3
 800285e:	f000 fa53 	bl	8002d08 <RTC_ByteToBcd2>
 8002862:	0003      	movs	r3, r0
 8002864:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002866:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	789b      	ldrb	r3, [r3, #2]
 800286c:	0018      	movs	r0, r3
 800286e:	f000 fa4b 	bl	8002d08 <RTC_ByteToBcd2>
 8002872:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002874:	0022      	movs	r2, r4
 8002876:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	78db      	ldrb	r3, [r3, #3]
 800287c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800287e:	4313      	orrs	r3, r2
 8002880:	617b      	str	r3, [r7, #20]
 8002882:	e017      	b.n	80028b4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2240      	movs	r2, #64	; 0x40
 800288c:	4013      	ands	r3, r2
 800288e:	d102      	bne.n	8002896 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2200      	movs	r2, #0
 8002894:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	785b      	ldrb	r3, [r3, #1]
 80028a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80028a2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80028a4:	68ba      	ldr	r2, [r7, #8]
 80028a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80028a8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	78db      	ldrb	r3, [r3, #3]
 80028ae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	491b      	ldr	r1, [pc, #108]	; (8002928 <HAL_RTC_SetTime+0x148>)
 80028bc:	400a      	ands	r2, r1
 80028be:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4918      	ldr	r1, [pc, #96]	; (800292c <HAL_RTC_SetTime+0x14c>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6999      	ldr	r1, [r3, #24]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	431a      	orrs	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028e8:	2313      	movs	r3, #19
 80028ea:	18fc      	adds	r4, r7, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f000 f9c4 	bl	8002c7c <RTC_ExitInitMode>
 80028f4:	0003      	movs	r3, r0
 80028f6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	22ff      	movs	r2, #255	; 0xff
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8002900:	2313      	movs	r3, #19
 8002902:	18fb      	adds	r3, r7, r3
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2229      	movs	r2, #41	; 0x29
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2228      	movs	r2, #40	; 0x28
 8002916:	2100      	movs	r1, #0
 8002918:	5499      	strb	r1, [r3, r2]

  return status;
 800291a:	2313      	movs	r3, #19
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	781b      	ldrb	r3, [r3, #0]
}
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	b006      	add	sp, #24
 8002926:	bdb0      	pop	{r4, r5, r7, pc}
 8002928:	007f7f7f 	.word	0x007f7f7f
 800292c:	fffbffff 	.word	0xfffbffff

08002930 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	045b      	lsls	r3, r3, #17
 800294e:	0c5a      	lsrs	r2, r3, #17
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a22      	ldr	r2, [pc, #136]	; (80029e4 <HAL_RTC_GetTime+0xb4>)
 800295c:	4013      	ands	r3, r2
 800295e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	0c1b      	lsrs	r3, r3, #16
 8002964:	b2db      	uxtb	r3, r3
 8002966:	223f      	movs	r2, #63	; 0x3f
 8002968:	4013      	ands	r3, r2
 800296a:	b2da      	uxtb	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	0a1b      	lsrs	r3, r3, #8
 8002974:	b2db      	uxtb	r3, r3
 8002976:	227f      	movs	r2, #127	; 0x7f
 8002978:	4013      	ands	r3, r2
 800297a:	b2da      	uxtb	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	b2db      	uxtb	r3, r3
 8002984:	227f      	movs	r2, #127	; 0x7f
 8002986:	4013      	ands	r3, r2
 8002988:	b2da      	uxtb	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	0d9b      	lsrs	r3, r3, #22
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2201      	movs	r2, #1
 8002996:	4013      	ands	r3, r2
 8002998:	b2da      	uxtb	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d11a      	bne.n	80029da <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	0018      	movs	r0, r3
 80029aa:	f000 f9d6 	bl	8002d5a <RTC_Bcd2ToByte>
 80029ae:	0003      	movs	r3, r0
 80029b0:	001a      	movs	r2, r3
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	785b      	ldrb	r3, [r3, #1]
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 f9cd 	bl	8002d5a <RTC_Bcd2ToByte>
 80029c0:	0003      	movs	r3, r0
 80029c2:	001a      	movs	r2, r3
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	789b      	ldrb	r3, [r3, #2]
 80029cc:	0018      	movs	r0, r3
 80029ce:	f000 f9c4 	bl	8002d5a <RTC_Bcd2ToByte>
 80029d2:	0003      	movs	r3, r0
 80029d4:	001a      	movs	r2, r3
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b006      	add	sp, #24
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	007f7f7f 	.word	0x007f7f7f

080029e8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029e8:	b5b0      	push	{r4, r5, r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	2228      	movs	r2, #40	; 0x28
 80029f8:	5c9b      	ldrb	r3, [r3, r2]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d101      	bne.n	8002a02 <HAL_RTC_SetDate+0x1a>
 80029fe:	2302      	movs	r3, #2
 8002a00:	e07e      	b.n	8002b00 <HAL_RTC_SetDate+0x118>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2228      	movs	r2, #40	; 0x28
 8002a06:	2101      	movs	r1, #1
 8002a08:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2229      	movs	r2, #41	; 0x29
 8002a0e:	2102      	movs	r1, #2
 8002a10:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d10e      	bne.n	8002a36 <HAL_RTC_SetDate+0x4e>
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	785b      	ldrb	r3, [r3, #1]
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	2310      	movs	r3, #16
 8002a20:	4013      	ands	r3, r2
 8002a22:	d008      	beq.n	8002a36 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	785b      	ldrb	r3, [r3, #1]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	330a      	adds	r3, #10
 8002a30:	b2da      	uxtb	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d11c      	bne.n	8002a76 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	78db      	ldrb	r3, [r3, #3]
 8002a40:	0018      	movs	r0, r3
 8002a42:	f000 f961 	bl	8002d08 <RTC_ByteToBcd2>
 8002a46:	0003      	movs	r3, r0
 8002a48:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	785b      	ldrb	r3, [r3, #1]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 f95a 	bl	8002d08 <RTC_ByteToBcd2>
 8002a54:	0003      	movs	r3, r0
 8002a56:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a58:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	789b      	ldrb	r3, [r3, #2]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 f952 	bl	8002d08 <RTC_ByteToBcd2>
 8002a64:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a66:	0022      	movs	r2, r4
 8002a68:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	e00e      	b.n	8002a94 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	78db      	ldrb	r3, [r3, #3]
 8002a7a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	785b      	ldrb	r3, [r3, #1]
 8002a80:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002a82:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8002a84:	68ba      	ldr	r2, [r7, #8]
 8002a86:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002a88:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002a90:	4313      	orrs	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	22ca      	movs	r2, #202	; 0xca
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2253      	movs	r2, #83	; 0x53
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002aa4:	2513      	movs	r5, #19
 8002aa6:	197c      	adds	r4, r7, r5
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 f8a3 	bl	8002bf6 <RTC_EnterInitMode>
 8002ab0:	0003      	movs	r3, r0
 8002ab2:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002ab4:	197b      	adds	r3, r7, r5
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10d      	bne.n	8002ad8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	4911      	ldr	r1, [pc, #68]	; (8002b08 <HAL_RTC_SetDate+0x120>)
 8002ac4:	400a      	ands	r2, r1
 8002ac6:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ac8:	2313      	movs	r3, #19
 8002aca:	18fc      	adds	r4, r7, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	0018      	movs	r0, r3
 8002ad0:	f000 f8d4 	bl	8002c7c <RTC_ExitInitMode>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	22ff      	movs	r2, #255	; 0xff
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002ae0:	2313      	movs	r3, #19
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2229      	movs	r2, #41	; 0x29
 8002aee:	2101      	movs	r1, #1
 8002af0:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2228      	movs	r2, #40	; 0x28
 8002af6:	2100      	movs	r1, #0
 8002af8:	5499      	strb	r1, [r3, r2]

  return status;
 8002afa:	2313      	movs	r3, #19
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	781b      	ldrb	r3, [r3, #0]
}
 8002b00:	0018      	movs	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	b006      	add	sp, #24
 8002b06:	bdb0      	pop	{r4, r5, r7, pc}
 8002b08:	00ffff3f 	.word	0x00ffff3f

08002b0c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4a21      	ldr	r2, [pc, #132]	; (8002ba4 <HAL_RTC_GetDate+0x98>)
 8002b20:	4013      	ands	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	0c1b      	lsrs	r3, r3, #16
 8002b28:	b2da      	uxtb	r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	0a1b      	lsrs	r3, r3, #8
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	221f      	movs	r2, #31
 8002b36:	4013      	ands	r3, r2
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	223f      	movs	r2, #63	; 0x3f
 8002b44:	4013      	ands	r3, r2
 8002b46:	b2da      	uxtb	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	0b5b      	lsrs	r3, r3, #13
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	2207      	movs	r2, #7
 8002b54:	4013      	ands	r3, r2
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11a      	bne.n	8002b98 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	78db      	ldrb	r3, [r3, #3]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 f8f7 	bl	8002d5a <RTC_Bcd2ToByte>
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	001a      	movs	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	785b      	ldrb	r3, [r3, #1]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 f8ee 	bl	8002d5a <RTC_Bcd2ToByte>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	001a      	movs	r2, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	789b      	ldrb	r3, [r3, #2]
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	f000 f8e5 	bl	8002d5a <RTC_Bcd2ToByte>
 8002b90:	0003      	movs	r3, r0
 8002b92:	001a      	movs	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	b006      	add	sp, #24
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	46c0      	nop			; (mov r8, r8)
 8002ba4:	00ffff3f 	.word	0x00ffff3f

08002ba8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	21a0      	movs	r1, #160	; 0xa0
 8002bbc:	438a      	bics	r2, r1
 8002bbe:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002bc0:	f7fe fc34 	bl	800142c <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002bc8:	e00a      	b.n	8002be0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002bca:	f7fe fc2f 	bl	800142c <HAL_GetTick>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1ad2      	subs	r2, r2, r3
 8002bd4:	23fa      	movs	r3, #250	; 0xfa
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d901      	bls.n	8002be0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e006      	b.n	8002bee <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	4013      	ands	r3, r2
 8002bea:	d0ee      	beq.n	8002bca <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	0018      	movs	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b004      	add	sp, #16
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002bfe:	230f      	movs	r3, #15
 8002c00:	18fb      	adds	r3, r7, r3
 8002c02:	2200      	movs	r2, #0
 8002c04:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	2240      	movs	r2, #64	; 0x40
 8002c0e:	4013      	ands	r3, r2
 8002c10:	d12d      	bne.n	8002c6e <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c22:	f7fe fc03 	bl	800142c <HAL_GetTick>
 8002c26:	0003      	movs	r3, r0
 8002c28:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c2a:	e015      	b.n	8002c58 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002c2c:	f7fe fbfe 	bl	800142c <HAL_GetTick>
 8002c30:	0002      	movs	r2, r0
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	1ad2      	subs	r2, r2, r3
 8002c36:	210f      	movs	r1, #15
 8002c38:	187b      	adds	r3, r7, r1
 8002c3a:	1879      	adds	r1, r7, r1
 8002c3c:	7809      	ldrb	r1, [r1, #0]
 8002c3e:	7019      	strb	r1, [r3, #0]
 8002c40:	23fa      	movs	r3, #250	; 0xfa
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d907      	bls.n	8002c58 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8002c48:	230f      	movs	r3, #15
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2229      	movs	r2, #41	; 0x29
 8002c54:	2103      	movs	r1, #3
 8002c56:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	2240      	movs	r2, #64	; 0x40
 8002c60:	4013      	ands	r3, r2
 8002c62:	d104      	bne.n	8002c6e <RTC_EnterInitMode+0x78>
 8002c64:	230f      	movs	r3, #15
 8002c66:	18fb      	adds	r3, r7, r3
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	d1de      	bne.n	8002c2c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002c6e:	230f      	movs	r3, #15
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	781b      	ldrb	r3, [r3, #0]
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c84:	230f      	movs	r3, #15
 8002c86:	18fb      	adds	r3, r7, r3
 8002c88:	2200      	movs	r2, #0
 8002c8a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <RTC_ExitInitMode+0x88>)
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <RTC_ExitInitMode+0x88>)
 8002c92:	2180      	movs	r1, #128	; 0x80
 8002c94:	438a      	bics	r2, r1
 8002c96:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002c98:	4b1a      	ldr	r3, [pc, #104]	; (8002d04 <RTC_ExitInitMode+0x88>)
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d10e      	bne.n	8002cc0 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7ff ff7f 	bl	8002ba8 <HAL_RTC_WaitForSynchro>
 8002caa:	1e03      	subs	r3, r0, #0
 8002cac:	d022      	beq.n	8002cf4 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2229      	movs	r2, #41	; 0x29
 8002cb2:	2103      	movs	r1, #3
 8002cb4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002cb6:	230f      	movs	r3, #15
 8002cb8:	18fb      	adds	r3, r7, r3
 8002cba:	2203      	movs	r2, #3
 8002cbc:	701a      	strb	r2, [r3, #0]
 8002cbe:	e019      	b.n	8002cf4 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <RTC_ExitInitMode+0x88>)
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <RTC_ExitInitMode+0x88>)
 8002cc6:	2120      	movs	r1, #32
 8002cc8:	438a      	bics	r2, r1
 8002cca:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7ff ff6a 	bl	8002ba8 <HAL_RTC_WaitForSynchro>
 8002cd4:	1e03      	subs	r3, r0, #0
 8002cd6:	d007      	beq.n	8002ce8 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2229      	movs	r2, #41	; 0x29
 8002cdc:	2103      	movs	r1, #3
 8002cde:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002ce0:	230f      	movs	r3, #15
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <RTC_ExitInitMode+0x88>)
 8002cea:	699a      	ldr	r2, [r3, #24]
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <RTC_ExitInitMode+0x88>)
 8002cee:	2120      	movs	r1, #32
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002cf4:	230f      	movs	r3, #15
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	781b      	ldrb	r3, [r3, #0]
}
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	b004      	add	sp, #16
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	40002800 	.word	0x40002800

08002d08 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	0002      	movs	r2, r0
 8002d10:	1dfb      	adds	r3, r7, #7
 8002d12:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002d18:	230b      	movs	r3, #11
 8002d1a:	18fb      	adds	r3, r7, r3
 8002d1c:	1dfa      	adds	r2, r7, #7
 8002d1e:	7812      	ldrb	r2, [r2, #0]
 8002d20:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002d22:	e008      	b.n	8002d36 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	3301      	adds	r3, #1
 8002d28:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002d2a:	220b      	movs	r2, #11
 8002d2c:	18bb      	adds	r3, r7, r2
 8002d2e:	18ba      	adds	r2, r7, r2
 8002d30:	7812      	ldrb	r2, [r2, #0]
 8002d32:	3a0a      	subs	r2, #10
 8002d34:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002d36:	230b      	movs	r3, #11
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b09      	cmp	r3, #9
 8002d3e:	d8f1      	bhi.n	8002d24 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	011b      	lsls	r3, r3, #4
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	230b      	movs	r3, #11
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	b2db      	uxtb	r3, r3
}
 8002d52:	0018      	movs	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b004      	add	sp, #16
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	0002      	movs	r2, r0
 8002d62:	1dfb      	adds	r3, r7, #7
 8002d64:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002d66:	1dfb      	adds	r3, r7, #7
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	091b      	lsrs	r3, r3, #4
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	001a      	movs	r2, r3
 8002d70:	0013      	movs	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	189b      	adds	r3, r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	1dfb      	adds	r3, r7, #7
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	210f      	movs	r1, #15
 8002d84:	400b      	ands	r3, r1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	18d3      	adds	r3, r2, r3
 8002d8a:	b2db      	uxtb	r3, r3
}
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b004      	add	sp, #16
 8002d92:	bd80      	pop	{r7, pc}

08002d94 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2228      	movs	r2, #40	; 0x28
 8002da4:	5c9b      	ldrb	r3, [r3, r2]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d101      	bne.n	8002dae <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e082      	b.n	8002eb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2228      	movs	r2, #40	; 0x28
 8002db2:	2101      	movs	r1, #1
 8002db4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2229      	movs	r2, #41	; 0x29
 8002dba:	2102      	movs	r1, #2
 8002dbc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	22ca      	movs	r2, #202	; 0xca
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2253      	movs	r2, #83	; 0x53
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699a      	ldr	r2, [r3, #24]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4938      	ldr	r1, [pc, #224]	; (8002ebc <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8002dda:	400a      	ands	r2, r1
 8002ddc:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2104      	movs	r1, #4
 8002dea:	430a      	orrs	r2, r1
 8002dec:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002dee:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2240      	movs	r2, #64	; 0x40
 8002df4:	4013      	ands	r3, r2
 8002df6:	d121      	bne.n	8002e3c <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8002df8:	f7fe fb18 	bl	800142c <HAL_GetTick>
 8002dfc:	0003      	movs	r3, r0
 8002dfe:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002e00:	e016      	b.n	8002e30 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002e02:	f7fe fb13 	bl	800142c <HAL_GetTick>
 8002e06:	0002      	movs	r2, r0
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	1ad2      	subs	r2, r2, r3
 8002e0c:	23fa      	movs	r3, #250	; 0xfa
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d90d      	bls.n	8002e30 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	22ff      	movs	r2, #255	; 0xff
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2229      	movs	r2, #41	; 0x29
 8002e20:	2103      	movs	r1, #3
 8002e22:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2228      	movs	r2, #40	; 0x28
 8002e28:	2100      	movs	r1, #0
 8002e2a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e041      	b.n	8002eb4 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	2204      	movs	r2, #4
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d0e2      	beq.n	8002e02 <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	699a      	ldr	r2, [r3, #24]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2107      	movs	r1, #7
 8002e50:	438a      	bics	r2, r1
 8002e52:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6999      	ldr	r1, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002e64:	4a17      	ldr	r2, [pc, #92]	; (8002ec4 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	58d3      	ldr	r3, [r2, r3]
 8002e6a:	4916      	ldr	r1, [pc, #88]	; (8002ec4 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002e6c:	2280      	movs	r2, #128	; 0x80
 8002e6e:	0312      	lsls	r2, r2, #12
 8002e70:	4313      	orrs	r3, r2
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699a      	ldr	r2, [r3, #24]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2180      	movs	r1, #128	; 0x80
 8002e82:	01c9      	lsls	r1, r1, #7
 8002e84:	430a      	orrs	r2, r1
 8002e86:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699a      	ldr	r2, [r3, #24]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	00c9      	lsls	r1, r1, #3
 8002e96:	430a      	orrs	r2, r1
 8002e98:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	22ff      	movs	r2, #255	; 0xff
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2229      	movs	r2, #41	; 0x29
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2228      	movs	r2, #40	; 0x28
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b006      	add	sp, #24
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	fffffbff 	.word	0xfffffbff
 8002ec0:	40002800 	.word	0x40002800
 8002ec4:	40021800 	.word	0x40021800

08002ec8 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2104      	movs	r1, #4
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 f808 	bl	8002f04 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2229      	movs	r2, #41	; 0x29
 8002ef8:	2101      	movs	r1, #1
 8002efa:	5499      	strb	r1, [r3, r2]
}
 8002efc:	46c0      	nop			; (mov r8, r8)
 8002efe:	46bd      	mov	sp, r7
 8002f00:	b002      	add	sp, #8
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b002      	add	sp, #8
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <__libc_init_array>:
 8002f14:	b570      	push	{r4, r5, r6, lr}
 8002f16:	2600      	movs	r6, #0
 8002f18:	4d0c      	ldr	r5, [pc, #48]	; (8002f4c <__libc_init_array+0x38>)
 8002f1a:	4c0d      	ldr	r4, [pc, #52]	; (8002f50 <__libc_init_array+0x3c>)
 8002f1c:	1b64      	subs	r4, r4, r5
 8002f1e:	10a4      	asrs	r4, r4, #2
 8002f20:	42a6      	cmp	r6, r4
 8002f22:	d109      	bne.n	8002f38 <__libc_init_array+0x24>
 8002f24:	2600      	movs	r6, #0
 8002f26:	f000 f821 	bl	8002f6c <_init>
 8002f2a:	4d0a      	ldr	r5, [pc, #40]	; (8002f54 <__libc_init_array+0x40>)
 8002f2c:	4c0a      	ldr	r4, [pc, #40]	; (8002f58 <__libc_init_array+0x44>)
 8002f2e:	1b64      	subs	r4, r4, r5
 8002f30:	10a4      	asrs	r4, r4, #2
 8002f32:	42a6      	cmp	r6, r4
 8002f34:	d105      	bne.n	8002f42 <__libc_init_array+0x2e>
 8002f36:	bd70      	pop	{r4, r5, r6, pc}
 8002f38:	00b3      	lsls	r3, r6, #2
 8002f3a:	58eb      	ldr	r3, [r5, r3]
 8002f3c:	4798      	blx	r3
 8002f3e:	3601      	adds	r6, #1
 8002f40:	e7ee      	b.n	8002f20 <__libc_init_array+0xc>
 8002f42:	00b3      	lsls	r3, r6, #2
 8002f44:	58eb      	ldr	r3, [r5, r3]
 8002f46:	4798      	blx	r3
 8002f48:	3601      	adds	r6, #1
 8002f4a:	e7f2      	b.n	8002f32 <__libc_init_array+0x1e>
 8002f4c:	0800306c 	.word	0x0800306c
 8002f50:	0800306c 	.word	0x0800306c
 8002f54:	0800306c 	.word	0x0800306c
 8002f58:	08003070 	.word	0x08003070

08002f5c <memset>:
 8002f5c:	0003      	movs	r3, r0
 8002f5e:	1812      	adds	r2, r2, r0
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d100      	bne.n	8002f66 <memset+0xa>
 8002f64:	4770      	bx	lr
 8002f66:	7019      	strb	r1, [r3, #0]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	e7f9      	b.n	8002f60 <memset+0x4>

08002f6c <_init>:
 8002f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f6e:	46c0      	nop			; (mov r8, r8)
 8002f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f72:	bc08      	pop	{r3}
 8002f74:	469e      	mov	lr, r3
 8002f76:	4770      	bx	lr

08002f78 <_fini>:
 8002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7a:	46c0      	nop			; (mov r8, r8)
 8002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f7e:	bc08      	pop	{r3}
 8002f80:	469e      	mov	lr, r3
 8002f82:	4770      	bx	lr
