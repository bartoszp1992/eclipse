
eclipse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019e0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08001a98  08001a98  00011a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001b80  08001b80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001b80  08001b80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001b80  08001b80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001b80  08001b80  00011b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001b84  08001b84  00011b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001b88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  2000000c  08001b94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001b94  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000043a7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001214  00000000  00000000  000243db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b0  00000000  00000000  000255f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003f8  00000000  00000000  00025aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001382f  00000000  00000000  00025e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005461  00000000  00000000  000396c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078c36  00000000  00000000  0003eb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b775e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e5c  00000000  00000000  000b77dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08001a80 	.word	0x08001a80

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08001a80 	.word	0x08001a80

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800021e:	f000 fbdb 	bl	80009d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000222:	f000 f839 	bl	8000298 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000226:	f000 f87f 	bl	8000328 <MX_GPIO_Init>
//		for (uint8_t i = 0; i < 12; i++) {
//						displayTurnHoursLED(i, 1);
//						HAL_Delay(20);
//					}

		if (testFlag == 1) {
 800022a:	4b1a      	ldr	r3, [pc, #104]	; (8000294 <main+0x7c>)
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	2b01      	cmp	r3, #1
 8000230:	d1fb      	bne.n	800022a <main+0x12>
			for (uint8_t i = 0; i < 30; i++) {
 8000232:	1dfb      	adds	r3, r7, #7
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]
 8000238:	e00d      	b.n	8000256 <main+0x3e>
				displayTurnMinutesLED(i, 1);
 800023a:	1dfb      	adds	r3, r7, #7
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2101      	movs	r1, #1
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fa71 	bl	8000728 <displayTurnMinutesLED>
				HAL_Delay(10);
 8000246:	200a      	movs	r0, #10
 8000248:	f000 fc4c 	bl	8000ae4 <HAL_Delay>
			for (uint8_t i = 0; i < 30; i++) {
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	781a      	ldrb	r2, [r3, #0]
 8000250:	1dfb      	adds	r3, r7, #7
 8000252:	3201      	adds	r2, #1
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	1dfb      	adds	r3, r7, #7
 8000258:	781b      	ldrb	r3, [r3, #0]
 800025a:	2b1d      	cmp	r3, #29
 800025c:	d9ed      	bls.n	800023a <main+0x22>
//			for (uint8_t i = 0; i < 30; i++) {
//				displayTurnMinutesLED(i, 0);
//				HAL_Delay(10);
//			}

			for (uint8_t i = 0; i < 12; i++) {
 800025e:	1dbb      	adds	r3, r7, #6
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]
 8000264:	e00d      	b.n	8000282 <main+0x6a>
				displayTurnHoursLED(i, 1);
 8000266:	1dbb      	adds	r3, r7, #6
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	2101      	movs	r1, #1
 800026c:	0018      	movs	r0, r3
 800026e:	f000 f9d1 	bl	8000614 <displayTurnHoursLED>
				HAL_Delay(20);
 8000272:	2014      	movs	r0, #20
 8000274:	f000 fc36 	bl	8000ae4 <HAL_Delay>
			for (uint8_t i = 0; i < 12; i++) {
 8000278:	1dbb      	adds	r3, r7, #6
 800027a:	781a      	ldrb	r2, [r3, #0]
 800027c:	1dbb      	adds	r3, r7, #6
 800027e:	3201      	adds	r2, #1
 8000280:	701a      	strb	r2, [r3, #0]
 8000282:	1dbb      	adds	r3, r7, #6
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	2b0b      	cmp	r3, #11
 8000288:	d9ed      	bls.n	8000266 <main+0x4e>

//			for (uint8_t i = 0; i < 12; i++) {
//				displayTurnHoursLED(i, 0);
//				HAL_Delay(20);
//			}
			testFlag = 0;
 800028a:	4b02      	ldr	r3, [pc, #8]	; (8000294 <main+0x7c>)
 800028c:	2200      	movs	r2, #0
 800028e:	701a      	strb	r2, [r3, #0]
		if (testFlag == 1) {
 8000290:	e7cb      	b.n	800022a <main+0x12>
 8000292:	46c0      	nop			; (mov r8, r8)
 8000294:	20000028 	.word	0x20000028

08000298 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b093      	sub	sp, #76	; 0x4c
 800029c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800029e:	2414      	movs	r4, #20
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	2334      	movs	r3, #52	; 0x34
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f001 fbe1 	bl	8001a70 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	0018      	movs	r0, r3
 80002b2:	2310      	movs	r3, #16
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f001 fbda 	bl	8001a70 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	0018      	movs	r0, r3
 80002c2:	f000 fed1 	bl	8001068 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2202      	movs	r2, #2
 80002ca:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2280      	movs	r2, #128	; 0x80
 80002d0:	0052      	lsls	r2, r2, #1
 80002d2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	2200      	movs	r2, #0
 80002d8:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	2240      	movs	r2, #64	; 0x40
 80002de:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	0018      	movs	r0, r3
 80002ea:	f000 fefd 	bl	80010e8 <HAL_RCC_OscConfig>
 80002ee:	1e03      	subs	r3, r0, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x5e>
		Error_Handler();
 80002f2:	f000 f903 	bl	80004fc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2207      	movs	r2, #7
 80002fa:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002fc:	1d3b      	adds	r3, r7, #4
 80002fe:	2200      	movs	r2, #0
 8000300:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2100      	movs	r1, #0
 8000312:	0018      	movs	r0, r3
 8000314:	f001 f9fe 	bl	8001714 <HAL_RCC_ClockConfig>
 8000318:	1e03      	subs	r3, r0, #0
 800031a:	d001      	beq.n	8000320 <SystemClock_Config+0x88>
		Error_Handler();
 800031c:	f000 f8ee 	bl	80004fc <Error_Handler>
	}
}
 8000320:	46c0      	nop			; (mov r8, r8)
 8000322:	46bd      	mov	sp, r7
 8000324:	b013      	add	sp, #76	; 0x4c
 8000326:	bd90      	pop	{r4, r7, pc}

08000328 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b08b      	sub	sp, #44	; 0x2c
 800032c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800032e:	2414      	movs	r4, #20
 8000330:	193b      	adds	r3, r7, r4
 8000332:	0018      	movs	r0, r3
 8000334:	2314      	movs	r3, #20
 8000336:	001a      	movs	r2, r3
 8000338:	2100      	movs	r1, #0
 800033a:	f001 fb99 	bl	8001a70 <memset>

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800033e:	4b66      	ldr	r3, [pc, #408]	; (80004d8 <MX_GPIO_Init+0x1b0>)
 8000340:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000342:	4b65      	ldr	r3, [pc, #404]	; (80004d8 <MX_GPIO_Init+0x1b0>)
 8000344:	2104      	movs	r1, #4
 8000346:	430a      	orrs	r2, r1
 8000348:	635a      	str	r2, [r3, #52]	; 0x34
 800034a:	4b63      	ldr	r3, [pc, #396]	; (80004d8 <MX_GPIO_Init+0x1b0>)
 800034c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800034e:	2204      	movs	r2, #4
 8000350:	4013      	ands	r3, r2
 8000352:	613b      	str	r3, [r7, #16]
 8000354:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000356:	4b60      	ldr	r3, [pc, #384]	; (80004d8 <MX_GPIO_Init+0x1b0>)
 8000358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800035a:	4b5f      	ldr	r3, [pc, #380]	; (80004d8 <MX_GPIO_Init+0x1b0>)
 800035c:	2101      	movs	r1, #1
 800035e:	430a      	orrs	r2, r1
 8000360:	635a      	str	r2, [r3, #52]	; 0x34
 8000362:	4b5d      	ldr	r3, [pc, #372]	; (80004d8 <MX_GPIO_Init+0x1b0>)
 8000364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000366:	2201      	movs	r2, #1
 8000368:	4013      	ands	r3, r2
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800036e:	4b5a      	ldr	r3, [pc, #360]	; (80004d8 <MX_GPIO_Init+0x1b0>)
 8000370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000372:	4b59      	ldr	r3, [pc, #356]	; (80004d8 <MX_GPIO_Init+0x1b0>)
 8000374:	2102      	movs	r1, #2
 8000376:	430a      	orrs	r2, r1
 8000378:	635a      	str	r2, [r3, #52]	; 0x34
 800037a:	4b57      	ldr	r3, [pc, #348]	; (80004d8 <MX_GPIO_Init+0x1b0>)
 800037c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800037e:	2202      	movs	r2, #2
 8000380:	4013      	ands	r3, r2
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000386:	4b54      	ldr	r3, [pc, #336]	; (80004d8 <MX_GPIO_Init+0x1b0>)
 8000388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800038a:	4b53      	ldr	r3, [pc, #332]	; (80004d8 <MX_GPIO_Init+0x1b0>)
 800038c:	2108      	movs	r1, #8
 800038e:	430a      	orrs	r2, r1
 8000390:	635a      	str	r2, [r3, #52]	; 0x34
 8000392:	4b51      	ldr	r3, [pc, #324]	; (80004d8 <MX_GPIO_Init+0x1b0>)
 8000394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000396:	2208      	movs	r2, #8
 8000398:	4013      	ands	r3, r2
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 800039e:	494f      	ldr	r1, [pc, #316]	; (80004dc <MX_GPIO_Init+0x1b4>)
 80003a0:	4b4f      	ldr	r3, [pc, #316]	; (80004e0 <MX_GPIO_Init+0x1b8>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	0018      	movs	r0, r3
 80003a6:	f000 fe17 	bl	8000fd8 <HAL_GPIO_WritePin>
			M23_Pin | H9_Pin | M22_Pin | M21_Pin | M15_Pin | M14_Pin | M6_Pin
					| H2_Pin | M0_Pin | M1_Pin | M24_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 80003aa:	494e      	ldr	r1, [pc, #312]	; (80004e4 <MX_GPIO_Init+0x1bc>)
 80003ac:	23a0      	movs	r3, #160	; 0xa0
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	2200      	movs	r2, #0
 80003b2:	0018      	movs	r0, r3
 80003b4:	f000 fe10 	bl	8000fd8 <HAL_GPIO_WritePin>
			M20_Pin | H8_Pin | M19_Pin | M18_Pin | H7_Pin | M17_Pin | M16_Pin
					| H6_Pin | H3_Pin | M7_Pin | M4_Pin | M3_Pin | H1_Pin
					| H0_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80003b8:	494b      	ldr	r1, [pc, #300]	; (80004e8 <MX_GPIO_Init+0x1c0>)
 80003ba:	4b4c      	ldr	r3, [pc, #304]	; (80004ec <MX_GPIO_Init+0x1c4>)
 80003bc:	2200      	movs	r2, #0
 80003be:	0018      	movs	r0, r3
 80003c0:	f000 fe0a 	bl	8000fd8 <HAL_GPIO_WritePin>
			M13_Pin | H5_Pin | M12_Pin | M11_Pin | M10_Pin | H4_Pin | M9_Pin
					| M8_Pin | H10_Pin | WORK_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD,
 80003c4:	2380      	movs	r3, #128	; 0x80
 80003c6:	33ff      	adds	r3, #255	; 0xff
 80003c8:	4849      	ldr	r0, [pc, #292]	; (80004f0 <MX_GPIO_Init+0x1c8>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	0019      	movs	r1, r3
 80003ce:	f000 fe03 	bl	8000fd8 <HAL_GPIO_WritePin>
					| M25_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : M23_Pin H9_Pin M22_Pin M21_Pin
	 M15_Pin M14_Pin M6_Pin H2_Pin
	 M0_Pin M1_Pin M24_Pin */
	GPIO_InitStruct.Pin = M23_Pin | H9_Pin | M22_Pin | M21_Pin | M15_Pin
 80003d2:	193b      	adds	r3, r7, r4
 80003d4:	4a41      	ldr	r2, [pc, #260]	; (80004dc <MX_GPIO_Init+0x1b4>)
 80003d6:	601a      	str	r2, [r3, #0]
			| M14_Pin | M6_Pin | H2_Pin | M0_Pin | M1_Pin | M24_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	2201      	movs	r2, #1
 80003dc:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	193b      	adds	r3, r7, r4
 80003e0:	2200      	movs	r2, #0
 80003e2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	193b      	adds	r3, r7, r4
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003ea:	193b      	adds	r3, r7, r4
 80003ec:	4a3c      	ldr	r2, [pc, #240]	; (80004e0 <MX_GPIO_Init+0x1b8>)
 80003ee:	0019      	movs	r1, r3
 80003f0:	0010      	movs	r0, r2
 80003f2:	f000 fc8d 	bl	8000d10 <HAL_GPIO_Init>

	/*Configure GPIO pin : TOUCH_Pin */
	GPIO_InitStruct.Pin = TOUCH_Pin;
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	2202      	movs	r2, #2
 80003fa:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	4a3d      	ldr	r2, [pc, #244]	; (80004f4 <MX_GPIO_Init+0x1cc>)
 8000400:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	193b      	adds	r3, r7, r4
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(TOUCH_GPIO_Port, &GPIO_InitStruct);
 8000408:	193b      	adds	r3, r7, r4
 800040a:	4a35      	ldr	r2, [pc, #212]	; (80004e0 <MX_GPIO_Init+0x1b8>)
 800040c:	0019      	movs	r1, r3
 800040e:	0010      	movs	r0, r2
 8000410:	f000 fc7e 	bl	8000d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : M20_Pin H8_Pin M19_Pin M18_Pin
	 H7_Pin M17_Pin M16_Pin H6_Pin
	 H3_Pin M7_Pin M4_Pin M3_Pin
	 H1_Pin H0_Pin */
	GPIO_InitStruct.Pin = M20_Pin | H8_Pin | M19_Pin | M18_Pin | H7_Pin
 8000414:	193b      	adds	r3, r7, r4
 8000416:	4a33      	ldr	r2, [pc, #204]	; (80004e4 <MX_GPIO_Init+0x1bc>)
 8000418:	601a      	str	r2, [r3, #0]
			| M17_Pin | M16_Pin | H6_Pin | H3_Pin | M7_Pin | M4_Pin | M3_Pin
			| H1_Pin | H0_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800041a:	193b      	adds	r3, r7, r4
 800041c:	2201      	movs	r2, #1
 800041e:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	193b      	adds	r3, r7, r4
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000426:	193b      	adds	r3, r7, r4
 8000428:	2200      	movs	r2, #0
 800042a:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042c:	193a      	adds	r2, r7, r4
 800042e:	23a0      	movs	r3, #160	; 0xa0
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	0011      	movs	r1, r2
 8000434:	0018      	movs	r0, r3
 8000436:	f000 fc6b 	bl	8000d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : M13_Pin H5_Pin M12_Pin M11_Pin
	 M10_Pin H4_Pin M9_Pin M8_Pin
	 H10_Pin WORK_Pin */
	GPIO_InitStruct.Pin = M13_Pin | H5_Pin | M12_Pin | M11_Pin | M10_Pin
 800043a:	0021      	movs	r1, r4
 800043c:	187b      	adds	r3, r7, r1
 800043e:	4a2a      	ldr	r2, [pc, #168]	; (80004e8 <MX_GPIO_Init+0x1c0>)
 8000440:	601a      	str	r2, [r3, #0]
			| H4_Pin | M9_Pin | M8_Pin | H10_Pin | WORK_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000442:	187b      	adds	r3, r7, r1
 8000444:	2201      	movs	r2, #1
 8000446:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000448:	187b      	adds	r3, r7, r1
 800044a:	2200      	movs	r2, #0
 800044c:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2200      	movs	r2, #0
 8000452:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000454:	000c      	movs	r4, r1
 8000456:	187b      	adds	r3, r7, r1
 8000458:	4a24      	ldr	r2, [pc, #144]	; (80004ec <MX_GPIO_Init+0x1c4>)
 800045a:	0019      	movs	r1, r3
 800045c:	0010      	movs	r0, r2
 800045e:	f000 fc57 	bl	8000d10 <HAL_GPIO_Init>

	/*Configure GPIO pin : SET_Pin */
	GPIO_InitStruct.Pin = SET_Pin;
 8000462:	0021      	movs	r1, r4
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2280      	movs	r2, #128	; 0x80
 8000468:	0212      	lsls	r2, r2, #8
 800046a:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	4a22      	ldr	r2, [pc, #136]	; (80004f8 <MX_GPIO_Init+0x1d0>)
 8000470:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2200      	movs	r2, #0
 8000476:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(SET_GPIO_Port, &GPIO_InitStruct);
 8000478:	000c      	movs	r4, r1
 800047a:	187b      	adds	r3, r7, r1
 800047c:	4a1b      	ldr	r2, [pc, #108]	; (80004ec <MX_GPIO_Init+0x1c4>)
 800047e:	0019      	movs	r1, r3
 8000480:	0010      	movs	r0, r2
 8000482:	f000 fc45 	bl	8000d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : M5_Pin M2_Pin M29_Pin M28_Pin
	 H11_Pin M27_Pin M26_Pin M25_Pin */
	GPIO_InitStruct.Pin = M5_Pin | M2_Pin | M29_Pin | M28_Pin | H11_Pin
 8000486:	0021      	movs	r1, r4
 8000488:	187b      	adds	r3, r7, r1
 800048a:	2280      	movs	r2, #128	; 0x80
 800048c:	32ff      	adds	r2, #255	; 0xff
 800048e:	601a      	str	r2, [r3, #0]
			| M27_Pin | M26_Pin | M25_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2201      	movs	r2, #1
 8000494:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	187b      	adds	r3, r7, r1
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	187b      	adds	r3, r7, r1
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004a2:	187b      	adds	r3, r7, r1
 80004a4:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <MX_GPIO_Init+0x1c8>)
 80004a6:	0019      	movs	r1, r3
 80004a8:	0010      	movs	r0, r2
 80004aa:	f000 fc31 	bl	8000d10 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2100      	movs	r1, #0
 80004b2:	2005      	movs	r0, #5
 80004b4:	f000 fbfa 	bl	8000cac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80004b8:	2005      	movs	r0, #5
 80004ba:	f000 fc0c 	bl	8000cd6 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2100      	movs	r1, #0
 80004c2:	2007      	movs	r0, #7
 80004c4:	f000 fbf2 	bl	8000cac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004c8:	2007      	movs	r0, #7
 80004ca:	f000 fc04 	bl	8000cd6 <HAL_NVIC_EnableIRQ>

}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b00b      	add	sp, #44	; 0x2c
 80004d4:	bd90      	pop	{r4, r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	40021000 	.word	0x40021000
 80004dc:	00001ffc 	.word	0x00001ffc
 80004e0:	50000800 	.word	0x50000800
 80004e4:	00009fff 	.word	0x00009fff
 80004e8:	00007c1f 	.word	0x00007c1f
 80004ec:	50000400 	.word	0x50000400
 80004f0:	50000c00 	.word	0x50000c00
 80004f4:	10310000 	.word	0x10310000
 80004f8:	10110000 	.word	0x10110000

080004fc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000500:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000502:	e7fe      	b.n	8000502 <Error_Handler+0x6>

08000504 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800050a:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_MspInit+0x4c>)
 800050c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <HAL_MspInit+0x4c>)
 8000510:	2101      	movs	r1, #1
 8000512:	430a      	orrs	r2, r1
 8000514:	641a      	str	r2, [r3, #64]	; 0x40
 8000516:	4b0e      	ldr	r3, [pc, #56]	; (8000550 <HAL_MspInit+0x4c>)
 8000518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051a:	2201      	movs	r2, #1
 800051c:	4013      	ands	r3, r2
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_MspInit+0x4c>)
 8000524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <HAL_MspInit+0x4c>)
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	0549      	lsls	r1, r1, #21
 800052c:	430a      	orrs	r2, r1
 800052e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <HAL_MspInit+0x4c>)
 8000532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000534:	2380      	movs	r3, #128	; 0x80
 8000536:	055b      	lsls	r3, r3, #21
 8000538:	4013      	ands	r3, r2
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800053e:	23c0      	movs	r3, #192	; 0xc0
 8000540:	00db      	lsls	r3, r3, #3
 8000542:	0018      	movs	r0, r3
 8000544:	f000 faf0 	bl	8000b28 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b002      	add	sp, #8
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000

08000554 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000558:	e7fe      	b.n	8000558 <NMI_Handler+0x4>

0800055a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800055a:	b580      	push	{r7, lr}
 800055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055e:	e7fe      	b.n	800055e <HardFault_Handler+0x4>

08000560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}

0800056a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}

08000574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000578:	f000 fa98 	bl	8000aac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057c:	46c0      	nop			; (mov r8, r8)
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}

08000582 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000582:	b580      	push	{r7, lr}
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000586:	2002      	movs	r0, #2
 8000588:	f000 fd44 	bl	8001014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}

08000592 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000592:	b580      	push	{r7, lr}
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000596:	2380      	movs	r3, #128	; 0x80
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	0018      	movs	r0, r3
 800059c:	f000 fd3a 	bl	8001014 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80005a0:	46c0      	nop			; (mov r8, r8)
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005ac:	4b03      	ldr	r3, [pc, #12]	; (80005bc <SystemInit+0x14>)
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	0512      	lsls	r2, r2, #20
 80005b2:	609a      	str	r2, [r3, #8]
#endif
}
 80005b4:	46c0      	nop			; (mov r8, r8)
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005c0:	480d      	ldr	r0, [pc, #52]	; (80005f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005c2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c4:	f7ff fff0 	bl	80005a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <LoopForever+0x6>)
  ldr r1, =_edata
 80005ca:	490d      	ldr	r1, [pc, #52]	; (8000600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <LoopForever+0xe>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d0:	e002      	b.n	80005d8 <LoopCopyDataInit>

080005d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d6:	3304      	adds	r3, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005dc:	d3f9      	bcc.n	80005d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e0:	4c0a      	ldr	r4, [pc, #40]	; (800060c <LoopForever+0x16>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e4:	e001      	b.n	80005ea <LoopFillZerobss>

080005e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e8:	3204      	adds	r2, #4

080005ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ec:	d3fb      	bcc.n	80005e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ee:	f001 fa1b 	bl	8001a28 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80005f2:	f7ff fe11 	bl	8000218 <main>

080005f6 <LoopForever>:

LoopForever:
  b LoopForever
 80005f6:	e7fe      	b.n	80005f6 <LoopForever>
  ldr   r0, =_estack
 80005f8:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000604:	08001b88 	.word	0x08001b88
  ldr r2, =_sbss
 8000608:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800060c:	20000030 	.word	0x20000030

08000610 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_IRQHandler>
	...

08000614 <displayTurnHoursLED>:
 */

#include "display.h"


void displayTurnHoursLED(uint8_t led, uint8_t state) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	0002      	movs	r2, r0
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	1dbb      	adds	r3, r7, #6
 8000622:	1c0a      	adds	r2, r1, #0
 8000624:	701a      	strb	r2, [r3, #0]

	switch (led) {
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b0b      	cmp	r3, #11
 800062c:	d86f      	bhi.n	800070e <displayTurnHoursLED+0xfa>
 800062e:	009a      	lsls	r2, r3, #2
 8000630:	4b39      	ldr	r3, [pc, #228]	; (8000718 <displayTurnHoursLED+0x104>)
 8000632:	18d3      	adds	r3, r2, r3
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	469f      	mov	pc, r3

	case 0:
		HAL_GPIO_WritePin(H0_GPIO_Port, H0_Pin, state);
 8000638:	1dbb      	adds	r3, r7, #6
 800063a:	781a      	ldrb	r2, [r3, #0]
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	0219      	lsls	r1, r3, #8
 8000640:	23a0      	movs	r3, #160	; 0xa0
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	0018      	movs	r0, r3
 8000646:	f000 fcc7 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 800064a:	e060      	b.n	800070e <displayTurnHoursLED+0xfa>
	case 1:
		HAL_GPIO_WritePin(H1_GPIO_Port, H1_Pin, state);
 800064c:	1dbb      	adds	r3, r7, #6
 800064e:	781a      	ldrb	r2, [r3, #0]
 8000650:	2380      	movs	r3, #128	; 0x80
 8000652:	0159      	lsls	r1, r3, #5
 8000654:	23a0      	movs	r3, #160	; 0xa0
 8000656:	05db      	lsls	r3, r3, #23
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fcbd 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 800065e:	e056      	b.n	800070e <displayTurnHoursLED+0xfa>
	case 2:
		HAL_GPIO_WritePin(H2_GPIO_Port, H2_Pin, state);
 8000660:	1dbb      	adds	r3, r7, #6
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	482d      	ldr	r0, [pc, #180]	; (800071c <displayTurnHoursLED+0x108>)
 8000666:	001a      	movs	r2, r3
 8000668:	2180      	movs	r1, #128	; 0x80
 800066a:	f000 fcb5 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 800066e:	e04e      	b.n	800070e <displayTurnHoursLED+0xfa>
	case 3:
		HAL_GPIO_WritePin(H3_GPIO_Port, H3_Pin, state);
 8000670:	1dbb      	adds	r3, r7, #6
 8000672:	781a      	ldrb	r2, [r3, #0]
 8000674:	2380      	movs	r3, #128	; 0x80
 8000676:	0059      	lsls	r1, r3, #1
 8000678:	23a0      	movs	r3, #160	; 0xa0
 800067a:	05db      	lsls	r3, r3, #23
 800067c:	0018      	movs	r0, r3
 800067e:	f000 fcab 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000682:	e044      	b.n	800070e <displayTurnHoursLED+0xfa>
	case 4:
		HAL_GPIO_WritePin(H4_GPIO_Port, H4_Pin, state);
 8000684:	1dbb      	adds	r3, r7, #6
 8000686:	781a      	ldrb	r2, [r3, #0]
 8000688:	2380      	movs	r3, #128	; 0x80
 800068a:	015b      	lsls	r3, r3, #5
 800068c:	4824      	ldr	r0, [pc, #144]	; (8000720 <displayTurnHoursLED+0x10c>)
 800068e:	0019      	movs	r1, r3
 8000690:	f000 fca2 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000694:	e03b      	b.n	800070e <displayTurnHoursLED+0xfa>
	case 5:
		HAL_GPIO_WritePin(H5_GPIO_Port, H5_Pin, state);
 8000696:	1dbb      	adds	r3, r7, #6
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	4821      	ldr	r0, [pc, #132]	; (8000720 <displayTurnHoursLED+0x10c>)
 800069c:	001a      	movs	r2, r3
 800069e:	2102      	movs	r1, #2
 80006a0:	f000 fc9a 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80006a4:	e033      	b.n	800070e <displayTurnHoursLED+0xfa>
	case 6:
		HAL_GPIO_WritePin(H6_GPIO_Port, H6_Pin, state);
 80006a6:	1dbb      	adds	r3, r7, #6
 80006a8:	781a      	ldrb	r2, [r3, #0]
 80006aa:	23a0      	movs	r3, #160	; 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2180      	movs	r1, #128	; 0x80
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fc91 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80006b6:	e02a      	b.n	800070e <displayTurnHoursLED+0xfa>
	case 7:
		HAL_GPIO_WritePin(H7_GPIO_Port, H7_Pin, state);
 80006b8:	1dbb      	adds	r3, r7, #6
 80006ba:	781a      	ldrb	r2, [r3, #0]
 80006bc:	23a0      	movs	r3, #160	; 0xa0
 80006be:	05db      	lsls	r3, r3, #23
 80006c0:	2110      	movs	r1, #16
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 fc88 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80006c8:	e021      	b.n	800070e <displayTurnHoursLED+0xfa>
	case 8:
		HAL_GPIO_WritePin(H8_GPIO_Port, H8_Pin, state);
 80006ca:	1dbb      	adds	r3, r7, #6
 80006cc:	781a      	ldrb	r2, [r3, #0]
 80006ce:	23a0      	movs	r3, #160	; 0xa0
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	2102      	movs	r1, #2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fc7f 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80006da:	e018      	b.n	800070e <displayTurnHoursLED+0xfa>
	case 9:
		HAL_GPIO_WritePin(H9_GPIO_Port, H9_Pin, state);
 80006dc:	1dbb      	adds	r3, r7, #6
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	2380      	movs	r3, #128	; 0x80
 80006e2:	015b      	lsls	r3, r3, #5
 80006e4:	480d      	ldr	r0, [pc, #52]	; (800071c <displayTurnHoursLED+0x108>)
 80006e6:	0019      	movs	r1, r3
 80006e8:	f000 fc76 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80006ec:	e00f      	b.n	800070e <displayTurnHoursLED+0xfa>
	case 10:
		HAL_GPIO_WritePin(H10_GPIO_Port, H10_Pin, state);
 80006ee:	1dbb      	adds	r3, r7, #6
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	480b      	ldr	r0, [pc, #44]	; (8000720 <displayTurnHoursLED+0x10c>)
 80006f4:	001a      	movs	r2, r3
 80006f6:	2108      	movs	r1, #8
 80006f8:	f000 fc6e 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80006fc:	e007      	b.n	800070e <displayTurnHoursLED+0xfa>
	case 11:
		HAL_GPIO_WritePin(H11_GPIO_Port, H11_Pin, state);
 80006fe:	1dbb      	adds	r3, r7, #6
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4808      	ldr	r0, [pc, #32]	; (8000724 <displayTurnHoursLED+0x110>)
 8000704:	001a      	movs	r2, r3
 8000706:	2108      	movs	r1, #8
 8000708:	f000 fc66 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 800070c:	46c0      	nop			; (mov r8, r8)

	}

}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b002      	add	sp, #8
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	08001ad8 	.word	0x08001ad8
 800071c:	50000800 	.word	0x50000800
 8000720:	50000400 	.word	0x50000400
 8000724:	50000c00 	.word	0x50000c00

08000728 <displayTurnMinutesLED>:

void displayTurnMinutesLED(uint8_t led, uint8_t state) {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	0002      	movs	r2, r0
 8000730:	1dfb      	adds	r3, r7, #7
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	1dbb      	adds	r3, r7, #6
 8000736:	1c0a      	adds	r2, r1, #0
 8000738:	701a      	strb	r2, [r3, #0]

	switch (led) {
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b1d      	cmp	r3, #29
 8000740:	d900      	bls.n	8000744 <displayTurnMinutesLED+0x1c>
 8000742:	e108      	b.n	8000956 <displayTurnMinutesLED+0x22e>
 8000744:	009a      	lsls	r2, r3, #2
 8000746:	4b86      	ldr	r3, [pc, #536]	; (8000960 <displayTurnMinutesLED+0x238>)
 8000748:	18d3      	adds	r3, r2, r3
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	469f      	mov	pc, r3

	case 0:
		HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, state);
 800074e:	1dbb      	adds	r3, r7, #6
 8000750:	781a      	ldrb	r2, [r3, #0]
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4883      	ldr	r0, [pc, #524]	; (8000964 <displayTurnMinutesLED+0x23c>)
 8000758:	0019      	movs	r1, r3
 800075a:	f000 fc3d 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 800075e:	e0fa      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 1:
		HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, state);
 8000760:	1dbb      	adds	r3, r7, #6
 8000762:	781a      	ldrb	r2, [r3, #0]
 8000764:	2380      	movs	r3, #128	; 0x80
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	487e      	ldr	r0, [pc, #504]	; (8000964 <displayTurnMinutesLED+0x23c>)
 800076a:	0019      	movs	r1, r3
 800076c:	f000 fc34 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000770:	e0f1      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 2:
		HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, state);
 8000772:	1dbb      	adds	r3, r7, #6
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	487c      	ldr	r0, [pc, #496]	; (8000968 <displayTurnMinutesLED+0x240>)
 8000778:	001a      	movs	r2, r3
 800077a:	2101      	movs	r1, #1
 800077c:	f000 fc2c 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000780:	e0e9      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 3:
		HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin, state);
 8000782:	1dbb      	adds	r3, r7, #6
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	0119      	lsls	r1, r3, #4
 800078a:	23a0      	movs	r3, #160	; 0xa0
 800078c:	05db      	lsls	r3, r3, #23
 800078e:	0018      	movs	r0, r3
 8000790:	f000 fc22 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000794:	e0df      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 4:
		HAL_GPIO_WritePin(M4_GPIO_Port, M4_Pin, state);
 8000796:	1dbb      	adds	r3, r7, #6
 8000798:	781a      	ldrb	r2, [r3, #0]
 800079a:	2380      	movs	r3, #128	; 0x80
 800079c:	00d9      	lsls	r1, r3, #3
 800079e:	23a0      	movs	r3, #160	; 0xa0
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	0018      	movs	r0, r3
 80007a4:	f000 fc18 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80007a8:	e0d5      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 5:
		HAL_GPIO_WritePin(M5_GPIO_Port, M5_Pin, state);
 80007aa:	1dbb      	adds	r3, r7, #6
 80007ac:	781a      	ldrb	r2, [r3, #0]
 80007ae:	2380      	movs	r3, #128	; 0x80
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	486d      	ldr	r0, [pc, #436]	; (8000968 <displayTurnMinutesLED+0x240>)
 80007b4:	0019      	movs	r1, r3
 80007b6:	f000 fc0f 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80007ba:	e0cc      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 6:
		HAL_GPIO_WritePin(M6_GPIO_Port, M6_Pin, state);
 80007bc:	1dbb      	adds	r3, r7, #6
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4868      	ldr	r0, [pc, #416]	; (8000964 <displayTurnMinutesLED+0x23c>)
 80007c2:	001a      	movs	r2, r3
 80007c4:	2140      	movs	r1, #64	; 0x40
 80007c6:	f000 fc07 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80007ca:	e0c4      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 7:
		HAL_GPIO_WritePin(M7_GPIO_Port, M7_Pin, state);
 80007cc:	1dbb      	adds	r3, r7, #6
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	2380      	movs	r3, #128	; 0x80
 80007d2:	0099      	lsls	r1, r3, #2
 80007d4:	23a0      	movs	r3, #160	; 0xa0
 80007d6:	05db      	lsls	r3, r3, #23
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fbfd 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80007de:	e0ba      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 8:
		HAL_GPIO_WritePin(M8_GPIO_Port, M8_Pin, state);
 80007e0:	1dbb      	adds	r3, r7, #6
 80007e2:	781a      	ldrb	r2, [r3, #0]
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	01db      	lsls	r3, r3, #7
 80007e8:	4860      	ldr	r0, [pc, #384]	; (800096c <displayTurnMinutesLED+0x244>)
 80007ea:	0019      	movs	r1, r3
 80007ec:	f000 fbf4 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80007f0:	e0b1      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 9:
		HAL_GPIO_WritePin(M9_GPIO_Port, M9_Pin, state);
 80007f2:	1dbb      	adds	r3, r7, #6
 80007f4:	781a      	ldrb	r2, [r3, #0]
 80007f6:	2380      	movs	r3, #128	; 0x80
 80007f8:	019b      	lsls	r3, r3, #6
 80007fa:	485c      	ldr	r0, [pc, #368]	; (800096c <displayTurnMinutesLED+0x244>)
 80007fc:	0019      	movs	r1, r3
 80007fe:	f000 fbeb 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000802:	e0a8      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 10:
		HAL_GPIO_WritePin(M10_GPIO_Port, M10_Pin, state);
 8000804:	1dbb      	adds	r3, r7, #6
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	2380      	movs	r3, #128	; 0x80
 800080a:	011b      	lsls	r3, r3, #4
 800080c:	4857      	ldr	r0, [pc, #348]	; (800096c <displayTurnMinutesLED+0x244>)
 800080e:	0019      	movs	r1, r3
 8000810:	f000 fbe2 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000814:	e09f      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 11:
		HAL_GPIO_WritePin(M11_GPIO_Port, M11_Pin, state);
 8000816:	1dbb      	adds	r3, r7, #6
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	4853      	ldr	r0, [pc, #332]	; (800096c <displayTurnMinutesLED+0x244>)
 8000820:	0019      	movs	r1, r3
 8000822:	f000 fbd9 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000826:	e096      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 12:
		HAL_GPIO_WritePin(M12_GPIO_Port, M12_Pin, state);
 8000828:	1dbb      	adds	r3, r7, #6
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	484f      	ldr	r0, [pc, #316]	; (800096c <displayTurnMinutesLED+0x244>)
 800082e:	001a      	movs	r2, r3
 8000830:	2104      	movs	r1, #4
 8000832:	f000 fbd1 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000836:	e08e      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 13:
		HAL_GPIO_WritePin(M13_GPIO_Port, M13_Pin, state);
 8000838:	1dbb      	adds	r3, r7, #6
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	484b      	ldr	r0, [pc, #300]	; (800096c <displayTurnMinutesLED+0x244>)
 800083e:	001a      	movs	r2, r3
 8000840:	2101      	movs	r1, #1
 8000842:	f000 fbc9 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000846:	e086      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 14:
		HAL_GPIO_WritePin(M14_GPIO_Port, M14_Pin, state);
 8000848:	1dbb      	adds	r3, r7, #6
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4845      	ldr	r0, [pc, #276]	; (8000964 <displayTurnMinutesLED+0x23c>)
 800084e:	001a      	movs	r2, r3
 8000850:	2120      	movs	r1, #32
 8000852:	f000 fbc1 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000856:	e07e      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 15:
		HAL_GPIO_WritePin(M15_GPIO_Port, M15_Pin, state);
 8000858:	1dbb      	adds	r3, r7, #6
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	4841      	ldr	r0, [pc, #260]	; (8000964 <displayTurnMinutesLED+0x23c>)
 800085e:	001a      	movs	r2, r3
 8000860:	2110      	movs	r1, #16
 8000862:	f000 fbb9 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000866:	e076      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 16:
		HAL_GPIO_WritePin(M16_GPIO_Port, M16_Pin, state);
 8000868:	1dbb      	adds	r3, r7, #6
 800086a:	781a      	ldrb	r2, [r3, #0]
 800086c:	23a0      	movs	r3, #160	; 0xa0
 800086e:	05db      	lsls	r3, r3, #23
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	0018      	movs	r0, r3
 8000874:	f000 fbb0 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000878:	e06d      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 17:
		HAL_GPIO_WritePin(M17_GPIO_Port, M17_Pin, state);
 800087a:	1dbb      	adds	r3, r7, #6
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	23a0      	movs	r3, #160	; 0xa0
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	2120      	movs	r1, #32
 8000884:	0018      	movs	r0, r3
 8000886:	f000 fba7 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 800088a:	e064      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 18:
		HAL_GPIO_WritePin(M18_GPIO_Port, M18_Pin, state);
 800088c:	1dbb      	adds	r3, r7, #6
 800088e:	781a      	ldrb	r2, [r3, #0]
 8000890:	23a0      	movs	r3, #160	; 0xa0
 8000892:	05db      	lsls	r3, r3, #23
 8000894:	2108      	movs	r1, #8
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fb9e 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 800089c:	e05b      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 19:
		HAL_GPIO_WritePin(M19_GPIO_Port, M19_Pin, state);
 800089e:	1dbb      	adds	r3, r7, #6
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	23a0      	movs	r3, #160	; 0xa0
 80008a4:	05db      	lsls	r3, r3, #23
 80008a6:	2104      	movs	r1, #4
 80008a8:	0018      	movs	r0, r3
 80008aa:	f000 fb95 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80008ae:	e052      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 20:
		HAL_GPIO_WritePin(M20_GPIO_Port, M20_Pin, state);
 80008b0:	1dbb      	adds	r3, r7, #6
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	23a0      	movs	r3, #160	; 0xa0
 80008b6:	05db      	lsls	r3, r3, #23
 80008b8:	2101      	movs	r1, #1
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 fb8c 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80008c0:	e049      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 21:
		HAL_GPIO_WritePin(M21_GPIO_Port, M21_Pin, state);
 80008c2:	1dbb      	adds	r3, r7, #6
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	4827      	ldr	r0, [pc, #156]	; (8000964 <displayTurnMinutesLED+0x23c>)
 80008c8:	001a      	movs	r2, r3
 80008ca:	2108      	movs	r1, #8
 80008cc:	f000 fb84 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80008d0:	e041      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 22:
		HAL_GPIO_WritePin(M22_GPIO_Port, M22_Pin, state);
 80008d2:	1dbb      	adds	r3, r7, #6
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4823      	ldr	r0, [pc, #140]	; (8000964 <displayTurnMinutesLED+0x23c>)
 80008d8:	001a      	movs	r2, r3
 80008da:	2104      	movs	r1, #4
 80008dc:	f000 fb7c 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80008e0:	e039      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 23:
		HAL_GPIO_WritePin(M23_GPIO_Port, M23_Pin, state);
 80008e2:	1dbb      	adds	r3, r7, #6
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	011b      	lsls	r3, r3, #4
 80008ea:	481e      	ldr	r0, [pc, #120]	; (8000964 <displayTurnMinutesLED+0x23c>)
 80008ec:	0019      	movs	r1, r3
 80008ee:	f000 fb73 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 80008f2:	e030      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 24:
		HAL_GPIO_WritePin(M24_GPIO_Port, M24_Pin, state);
 80008f4:	1dbb      	adds	r3, r7, #6
 80008f6:	781a      	ldrb	r2, [r3, #0]
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	4819      	ldr	r0, [pc, #100]	; (8000964 <displayTurnMinutesLED+0x23c>)
 80008fe:	0019      	movs	r1, r3
 8000900:	f000 fb6a 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000904:	e027      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 25:
		HAL_GPIO_WritePin(M25_GPIO_Port, M25_Pin, state);
 8000906:	1dbb      	adds	r3, r7, #6
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	4817      	ldr	r0, [pc, #92]	; (8000968 <displayTurnMinutesLED+0x240>)
 800090c:	001a      	movs	r2, r3
 800090e:	2140      	movs	r1, #64	; 0x40
 8000910:	f000 fb62 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000914:	e01f      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 26:
		HAL_GPIO_WritePin(M26_GPIO_Port, M26_Pin, state);
 8000916:	1dbb      	adds	r3, r7, #6
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	4813      	ldr	r0, [pc, #76]	; (8000968 <displayTurnMinutesLED+0x240>)
 800091c:	001a      	movs	r2, r3
 800091e:	2120      	movs	r1, #32
 8000920:	f000 fb5a 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000924:	e017      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 27:
		HAL_GPIO_WritePin(M27_GPIO_Port, M27_Pin, state);
 8000926:	1dbb      	adds	r3, r7, #6
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	480f      	ldr	r0, [pc, #60]	; (8000968 <displayTurnMinutesLED+0x240>)
 800092c:	001a      	movs	r2, r3
 800092e:	2110      	movs	r1, #16
 8000930:	f000 fb52 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000934:	e00f      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 28:
		HAL_GPIO_WritePin(M28_GPIO_Port, M28_Pin, state);
 8000936:	1dbb      	adds	r3, r7, #6
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	480b      	ldr	r0, [pc, #44]	; (8000968 <displayTurnMinutesLED+0x240>)
 800093c:	001a      	movs	r2, r3
 800093e:	2104      	movs	r1, #4
 8000940:	f000 fb4a 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000944:	e007      	b.n	8000956 <displayTurnMinutesLED+0x22e>
	case 29:
		HAL_GPIO_WritePin(M29_GPIO_Port, M29_Pin, state);
 8000946:	1dbb      	adds	r3, r7, #6
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4807      	ldr	r0, [pc, #28]	; (8000968 <displayTurnMinutesLED+0x240>)
 800094c:	001a      	movs	r2, r3
 800094e:	2102      	movs	r1, #2
 8000950:	f000 fb42 	bl	8000fd8 <HAL_GPIO_WritePin>
		break;
 8000954:	46c0      	nop			; (mov r8, r8)

	}

}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b002      	add	sp, #8
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	08001b08 	.word	0x08001b08
 8000964:	50000800 	.word	0x50000800
 8000968:	50000c00 	.word	0x50000c00
 800096c:	50000400 	.word	0x50000400

08000970 <extiCallback>:
 *      Author: bartosz
 */

#include "interrupts.h"

void extiCallback(uint8_t pin) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	0002      	movs	r2, r0
 8000978:	1dfb      	adds	r3, r7, #7
 800097a:	701a      	strb	r2, [r3, #0]

	if(pin == TOUCH_Pin){
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b02      	cmp	r3, #2
 8000982:	d102      	bne.n	800098a <extiCallback+0x1a>
		testFlag = 1;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <extiCallback+0x24>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
	}

}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			; (mov r8, r8)
 8000994:	20000028 	.word	0x20000028

08000998 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	0002      	movs	r2, r0
 80009a0:	1dbb      	adds	r3, r7, #6
 80009a2:	801a      	strh	r2, [r3, #0]

	extiCallback(GPIO_Pin);
 80009a4:	1dbb      	adds	r3, r7, #6
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	0018      	movs	r0, r3
 80009ac:	f7ff ffe0 	bl	8000970 <extiCallback>



}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	0002      	movs	r2, r0
 80009c0:	1dbb      	adds	r3, r7, #6
 80009c2:	801a      	strh	r2, [r3, #0]

	extiCallback(GPIO_Pin);
 80009c4:	1dbb      	adds	r3, r7, #6
 80009c6:	881b      	ldrh	r3, [r3, #0]
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff ffd0 	bl	8000970 <extiCallback>

}
 80009d0:	46c0      	nop			; (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b002      	add	sp, #8
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	2200      	movs	r2, #0
 80009e2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_Init+0x3c>)
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <HAL_Init+0x3c>)
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	0049      	lsls	r1, r1, #1
 80009ee:	430a      	orrs	r2, r1
 80009f0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f810 	bl	8000a18 <HAL_InitTick>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d003      	beq.n	8000a04 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
 8000a02:	e001      	b.n	8000a08 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fd7e 	bl	8000504 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a08:	1dfb      	adds	r3, r7, #7
 8000a0a:	781b      	ldrb	r3, [r3, #0]
}
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b002      	add	sp, #8
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40022000 	.word	0x40022000

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b590      	push	{r4, r7, lr}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a20:	230f      	movs	r3, #15
 8000a22:	18fb      	adds	r3, r7, r3
 8000a24:	2200      	movs	r2, #0
 8000a26:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <HAL_InitTick+0x88>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d02b      	beq.n	8000a88 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000a30:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <HAL_InitTick+0x8c>)
 8000a32:	681c      	ldr	r4, [r3, #0]
 8000a34:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <HAL_InitTick+0x88>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	0019      	movs	r1, r3
 8000a3a:	23fa      	movs	r3, #250	; 0xfa
 8000a3c:	0098      	lsls	r0, r3, #2
 8000a3e:	f7ff fb5f 	bl	8000100 <__udivsi3>
 8000a42:	0003      	movs	r3, r0
 8000a44:	0019      	movs	r1, r3
 8000a46:	0020      	movs	r0, r4
 8000a48:	f7ff fb5a 	bl	8000100 <__udivsi3>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f000 f951 	bl	8000cf6 <HAL_SYSTICK_Config>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d112      	bne.n	8000a7e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b03      	cmp	r3, #3
 8000a5c:	d80a      	bhi.n	8000a74 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a5e:	6879      	ldr	r1, [r7, #4]
 8000a60:	2301      	movs	r3, #1
 8000a62:	425b      	negs	r3, r3
 8000a64:	2200      	movs	r2, #0
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 f920 	bl	8000cac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_InitTick+0x90>)
 8000a6e:	687a      	ldr	r2, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	e00d      	b.n	8000a90 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a74:	230f      	movs	r3, #15
 8000a76:	18fb      	adds	r3, r7, r3
 8000a78:	2201      	movs	r2, #1
 8000a7a:	701a      	strb	r2, [r3, #0]
 8000a7c:	e008      	b.n	8000a90 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a7e:	230f      	movs	r3, #15
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	e003      	b.n	8000a90 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a88:	230f      	movs	r3, #15
 8000a8a:	18fb      	adds	r3, r7, r3
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a90:	230f      	movs	r3, #15
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	781b      	ldrb	r3, [r3, #0]
}
 8000a96:	0018      	movs	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b005      	add	sp, #20
 8000a9c:	bd90      	pop	{r4, r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	20000008 	.word	0x20000008
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000004 	.word	0x20000004

08000aac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_IncTick+0x1c>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	001a      	movs	r2, r3
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_IncTick+0x20>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	18d2      	adds	r2, r2, r3
 8000abc:	4b03      	ldr	r3, [pc, #12]	; (8000acc <HAL_IncTick+0x20>)
 8000abe:	601a      	str	r2, [r3, #0]
}
 8000ac0:	46c0      	nop			; (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	46c0      	nop			; (mov r8, r8)
 8000ac8:	20000008 	.word	0x20000008
 8000acc:	2000002c 	.word	0x2000002c

08000ad0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <HAL_GetTick+0x10>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
}
 8000ad8:	0018      	movs	r0, r3
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	46c0      	nop			; (mov r8, r8)
 8000ae0:	2000002c 	.word	0x2000002c

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff fff0 	bl	8000ad0 <HAL_GetTick>
 8000af0:	0003      	movs	r3, r0
 8000af2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	3301      	adds	r3, #1
 8000afc:	d005      	beq.n	8000b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_Delay+0x40>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	001a      	movs	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	189b      	adds	r3, r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	f7ff ffe0 	bl	8000ad0 <HAL_GetTick>
 8000b10:	0002      	movs	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8f7      	bhi.n	8000b0c <HAL_Delay+0x28>
  {
  }
}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b004      	add	sp, #16
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000008 	.word	0x20000008

08000b28 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	0019      	movs	r1, r3
 8000b3a:	4b04      	ldr	r3, [pc, #16]	; (8000b4c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	601a      	str	r2, [r3, #0]
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	b002      	add	sp, #8
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	40010000 	.word	0x40010000
 8000b50:	fffff9ff 	.word	0xfffff9ff

08000b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	0002      	movs	r2, r0
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b7f      	cmp	r3, #127	; 0x7f
 8000b66:	d809      	bhi.n	8000b7c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	231f      	movs	r3, #31
 8000b70:	401a      	ands	r2, r3
 8000b72:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <__NVIC_EnableIRQ+0x30>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	4091      	lsls	r1, r2
 8000b78:	000a      	movs	r2, r1
 8000b7a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b002      	add	sp, #8
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	e000e100 	.word	0xe000e100

08000b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b88:	b590      	push	{r4, r7, lr}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	0002      	movs	r2, r0
 8000b90:	6039      	str	r1, [r7, #0]
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b9c:	d828      	bhi.n	8000bf0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b9e:	4a2f      	ldr	r2, [pc, #188]	; (8000c5c <__NVIC_SetPriority+0xd4>)
 8000ba0:	1dfb      	adds	r3, r7, #7
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b25b      	sxtb	r3, r3
 8000ba6:	089b      	lsrs	r3, r3, #2
 8000ba8:	33c0      	adds	r3, #192	; 0xc0
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	589b      	ldr	r3, [r3, r2]
 8000bae:	1dfa      	adds	r2, r7, #7
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	400a      	ands	r2, r1
 8000bb8:	00d2      	lsls	r2, r2, #3
 8000bba:	21ff      	movs	r1, #255	; 0xff
 8000bbc:	4091      	lsls	r1, r2
 8000bbe:	000a      	movs	r2, r1
 8000bc0:	43d2      	mvns	r2, r2
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	019b      	lsls	r3, r3, #6
 8000bca:	22ff      	movs	r2, #255	; 0xff
 8000bcc:	401a      	ands	r2, r3
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	4003      	ands	r3, r0
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bdc:	481f      	ldr	r0, [pc, #124]	; (8000c5c <__NVIC_SetPriority+0xd4>)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	b25b      	sxtb	r3, r3
 8000be4:	089b      	lsrs	r3, r3, #2
 8000be6:	430a      	orrs	r2, r1
 8000be8:	33c0      	adds	r3, #192	; 0xc0
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bee:	e031      	b.n	8000c54 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf0:	4a1b      	ldr	r2, [pc, #108]	; (8000c60 <__NVIC_SetPriority+0xd8>)
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	0019      	movs	r1, r3
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	400b      	ands	r3, r1
 8000bfc:	3b08      	subs	r3, #8
 8000bfe:	089b      	lsrs	r3, r3, #2
 8000c00:	3306      	adds	r3, #6
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	18d3      	adds	r3, r2, r3
 8000c06:	3304      	adds	r3, #4
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	1dfa      	adds	r2, r7, #7
 8000c0c:	7812      	ldrb	r2, [r2, #0]
 8000c0e:	0011      	movs	r1, r2
 8000c10:	2203      	movs	r2, #3
 8000c12:	400a      	ands	r2, r1
 8000c14:	00d2      	lsls	r2, r2, #3
 8000c16:	21ff      	movs	r1, #255	; 0xff
 8000c18:	4091      	lsls	r1, r2
 8000c1a:	000a      	movs	r2, r1
 8000c1c:	43d2      	mvns	r2, r2
 8000c1e:	401a      	ands	r2, r3
 8000c20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	019b      	lsls	r3, r3, #6
 8000c26:	22ff      	movs	r2, #255	; 0xff
 8000c28:	401a      	ands	r2, r3
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	0018      	movs	r0, r3
 8000c30:	2303      	movs	r3, #3
 8000c32:	4003      	ands	r3, r0
 8000c34:	00db      	lsls	r3, r3, #3
 8000c36:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c38:	4809      	ldr	r0, [pc, #36]	; (8000c60 <__NVIC_SetPriority+0xd8>)
 8000c3a:	1dfb      	adds	r3, r7, #7
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	001c      	movs	r4, r3
 8000c40:	230f      	movs	r3, #15
 8000c42:	4023      	ands	r3, r4
 8000c44:	3b08      	subs	r3, #8
 8000c46:	089b      	lsrs	r3, r3, #2
 8000c48:	430a      	orrs	r2, r1
 8000c4a:	3306      	adds	r3, #6
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	18c3      	adds	r3, r0, r3
 8000c50:	3304      	adds	r3, #4
 8000c52:	601a      	str	r2, [r3, #0]
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b003      	add	sp, #12
 8000c5a:	bd90      	pop	{r4, r7, pc}
 8000c5c:	e000e100 	.word	0xe000e100
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <SysTick_Config+0x40>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d901      	bls.n	8000c7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c76:	2301      	movs	r3, #1
 8000c78:	e010      	b.n	8000c9c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <SysTick_Config+0x44>)
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	3a01      	subs	r2, #1
 8000c80:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c82:	2301      	movs	r3, #1
 8000c84:	425b      	negs	r3, r3
 8000c86:	2103      	movs	r1, #3
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff ff7d 	bl	8000b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SysTick_Config+0x44>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c94:	4b04      	ldr	r3, [pc, #16]	; (8000ca8 <SysTick_Config+0x44>)
 8000c96:	2207      	movs	r2, #7
 8000c98:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c9a:	2300      	movs	r3, #0
}
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b002      	add	sp, #8
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	00ffffff 	.word	0x00ffffff
 8000ca8:	e000e010 	.word	0xe000e010

08000cac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	1c02      	adds	r2, r0, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cbe:	68ba      	ldr	r2, [r7, #8]
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	b25b      	sxtb	r3, r3
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f7ff ff5d 	bl	8000b88 <__NVIC_SetPriority>
}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b004      	add	sp, #16
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	0002      	movs	r2, r0
 8000cde:	1dfb      	adds	r3, r7, #7
 8000ce0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce2:	1dfb      	adds	r3, r7, #7
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b25b      	sxtb	r3, r3
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff ff33 	bl	8000b54 <__NVIC_EnableIRQ>
}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	b002      	add	sp, #8
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	0018      	movs	r0, r3
 8000d02:	f7ff ffaf 	bl	8000c64 <SysTick_Config>
 8000d06:	0003      	movs	r3, r0
}
 8000d08:	0018      	movs	r0, r3
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e147      	b.n	8000fb0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	697a      	ldr	r2, [r7, #20]
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d100      	bne.n	8000d38 <HAL_GPIO_Init+0x28>
 8000d36:	e138      	b.n	8000faa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d00b      	beq.n	8000d58 <HAL_GPIO_Init+0x48>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d007      	beq.n	8000d58 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4c:	2b11      	cmp	r3, #17
 8000d4e:	d003      	beq.n	8000d58 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	2b12      	cmp	r3, #18
 8000d56:	d130      	bne.n	8000dba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	689b      	ldr	r3, [r3, #8]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	409a      	lsls	r2, r3
 8000d66:	0013      	movs	r3, r2
 8000d68:	43da      	mvns	r2, r3
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	68da      	ldr	r2, [r3, #12]
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	409a      	lsls	r2, r3
 8000d7a:	0013      	movs	r3, r2
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d8e:	2201      	movs	r2, #1
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
 8000d94:	0013      	movs	r3, r2
 8000d96:	43da      	mvns	r2, r3
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	091b      	lsrs	r3, r3, #4
 8000da4:	2201      	movs	r2, #1
 8000da6:	401a      	ands	r2, r3
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	409a      	lsls	r2, r3
 8000dac:	0013      	movs	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68db      	ldr	r3, [r3, #12]
 8000dbe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	689a      	ldr	r2, [r3, #8]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	409a      	lsls	r2, r3
 8000ddc:	0013      	movs	r3, r2
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d003      	beq.n	8000dfa <HAL_GPIO_Init+0xea>
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b12      	cmp	r3, #18
 8000df8:	d123      	bne.n	8000e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	08da      	lsrs	r2, r3, #3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3208      	adds	r2, #8
 8000e02:	0092      	lsls	r2, r2, #2
 8000e04:	58d3      	ldr	r3, [r2, r3]
 8000e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	220f      	movs	r2, #15
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	43da      	mvns	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	691a      	ldr	r2, [r3, #16]
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2107      	movs	r1, #7
 8000e26:	400b      	ands	r3, r1
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	0092      	lsls	r2, r2, #2
 8000e3e:	6939      	ldr	r1, [r7, #16]
 8000e40:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	2203      	movs	r2, #3
 8000e60:	401a      	ands	r2, r3
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685a      	ldr	r2, [r3, #4]
 8000e7a:	2380      	movs	r3, #128	; 0x80
 8000e7c:	055b      	lsls	r3, r3, #21
 8000e7e:	4013      	ands	r3, r2
 8000e80:	d100      	bne.n	8000e84 <HAL_GPIO_Init+0x174>
 8000e82:	e092      	b.n	8000faa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000e84:	4a50      	ldr	r2, [pc, #320]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	089b      	lsrs	r3, r3, #2
 8000e8a:	3318      	adds	r3, #24
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	589b      	ldr	r3, [r3, r2]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2203      	movs	r2, #3
 8000e96:	4013      	ands	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	409a      	lsls	r2, r3
 8000e9e:	0013      	movs	r3, r2
 8000ea0:	43da      	mvns	r2, r3
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	23a0      	movs	r3, #160	; 0xa0
 8000eac:	05db      	lsls	r3, r3, #23
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d013      	beq.n	8000eda <HAL_GPIO_Init+0x1ca>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a45      	ldr	r2, [pc, #276]	; (8000fcc <HAL_GPIO_Init+0x2bc>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d00d      	beq.n	8000ed6 <HAL_GPIO_Init+0x1c6>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a44      	ldr	r2, [pc, #272]	; (8000fd0 <HAL_GPIO_Init+0x2c0>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d007      	beq.n	8000ed2 <HAL_GPIO_Init+0x1c2>
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a43      	ldr	r2, [pc, #268]	; (8000fd4 <HAL_GPIO_Init+0x2c4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_GPIO_Init+0x1be>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e006      	b.n	8000edc <HAL_GPIO_Init+0x1cc>
 8000ece:	2305      	movs	r3, #5
 8000ed0:	e004      	b.n	8000edc <HAL_GPIO_Init+0x1cc>
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	e002      	b.n	8000edc <HAL_GPIO_Init+0x1cc>
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e000      	b.n	8000edc <HAL_GPIO_Init+0x1cc>
 8000eda:	2300      	movs	r3, #0
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	2103      	movs	r1, #3
 8000ee0:	400a      	ands	r2, r1
 8000ee2:	00d2      	lsls	r2, r2, #3
 8000ee4:	4093      	lsls	r3, r2
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000eec:	4936      	ldr	r1, [pc, #216]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000efa:	4a33      	ldr	r2, [pc, #204]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	58d3      	ldr	r3, [r2, r3]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	43da      	mvns	r2, r3
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	2380      	movs	r3, #128	; 0x80
 8000f12:	025b      	lsls	r3, r3, #9
 8000f14:	4013      	ands	r3, r2
 8000f16:	d003      	beq.n	8000f20 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f20:	4929      	ldr	r1, [pc, #164]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000f28:	4a27      	ldr	r2, [pc, #156]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f2a:	2384      	movs	r3, #132	; 0x84
 8000f2c:	58d3      	ldr	r3, [r2, r3]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	43da      	mvns	r2, r3
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685a      	ldr	r2, [r3, #4]
 8000f3e:	2380      	movs	r3, #128	; 0x80
 8000f40:	029b      	lsls	r3, r3, #10
 8000f42:	4013      	ands	r3, r2
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f4e:	491e      	ldr	r1, [pc, #120]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f50:	2284      	movs	r2, #132	; 0x84
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	035b      	lsls	r3, r3, #13
 8000f6e:	4013      	ands	r3, r2
 8000f70:	d003      	beq.n	8000f7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f7a:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	43da      	mvns	r2, r3
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	2380      	movs	r3, #128	; 0x80
 8000f96:	039b      	lsls	r3, r3, #14
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d003      	beq.n	8000fa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_GPIO_Init+0x2b8>)
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	40da      	lsrs	r2, r3
 8000fb8:	1e13      	subs	r3, r2, #0
 8000fba:	d000      	beq.n	8000fbe <HAL_GPIO_Init+0x2ae>
 8000fbc:	e6b0      	b.n	8000d20 <HAL_GPIO_Init+0x10>
  }
}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b006      	add	sp, #24
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	40021800 	.word	0x40021800
 8000fcc:	50000400 	.word	0x50000400
 8000fd0:	50000800 	.word	0x50000800
 8000fd4:	50000c00 	.word	0x50000c00

08000fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	0008      	movs	r0, r1
 8000fe2:	0011      	movs	r1, r2
 8000fe4:	1cbb      	adds	r3, r7, #2
 8000fe6:	1c02      	adds	r2, r0, #0
 8000fe8:	801a      	strh	r2, [r3, #0]
 8000fea:	1c7b      	adds	r3, r7, #1
 8000fec:	1c0a      	adds	r2, r1, #0
 8000fee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ff0:	1c7b      	adds	r3, r7, #1
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ff8:	1cbb      	adds	r3, r7, #2
 8000ffa:	881a      	ldrh	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001002:	1cbb      	adds	r3, r7, #2
 8001004:	881a      	ldrh	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	629a      	str	r2, [r3, #40]	; 0x28
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b002      	add	sp, #8
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
 800101a:	0002      	movs	r2, r0
 800101c:	1dbb      	adds	r3, r7, #6
 800101e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	1dba      	adds	r2, r7, #6
 8001026:	8812      	ldrh	r2, [r2, #0]
 8001028:	4013      	ands	r3, r2
 800102a:	d008      	beq.n	800103e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800102e:	1dba      	adds	r2, r7, #6
 8001030:	8812      	ldrh	r2, [r2, #0]
 8001032:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001034:	1dbb      	adds	r3, r7, #6
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	0018      	movs	r0, r3
 800103a:	f7ff fcad 	bl	8000998 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	1dba      	adds	r2, r7, #6
 8001044:	8812      	ldrh	r2, [r2, #0]
 8001046:	4013      	ands	r3, r2
 8001048:	d008      	beq.n	800105c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800104c:	1dba      	adds	r2, r7, #6
 800104e:	8812      	ldrh	r2, [r2, #0]
 8001050:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001052:	1dbb      	adds	r3, r7, #6
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	0018      	movs	r0, r3
 8001058:	f7ff fcae 	bl	80009b8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b002      	add	sp, #8
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40021800 	.word	0x40021800

08001068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001070:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a19      	ldr	r2, [pc, #100]	; (80010dc <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001076:	4013      	ands	r3, r2
 8001078:	0019      	movs	r1, r3
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	430a      	orrs	r2, r1
 8001080:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	429a      	cmp	r2, r3
 800108a:	d11f      	bne.n	80010cc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800108c:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	0013      	movs	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	189b      	adds	r3, r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4912      	ldr	r1, [pc, #72]	; (80010e4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff f830 	bl	8000100 <__udivsi3>
 80010a0:	0003      	movs	r3, r0
 80010a2:	3301      	adds	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010a6:	e008      	b.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d003      	beq.n	80010b6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	3b01      	subs	r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e001      	b.n	80010ba <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e009      	b.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	401a      	ands	r2, r3
 80010c4:	2380      	movs	r3, #128	; 0x80
 80010c6:	00db      	lsls	r3, r3, #3
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d0ed      	beq.n	80010a8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	0018      	movs	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	b004      	add	sp, #16
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			; (mov r8, r8)
 80010d8:	40007000 	.word	0x40007000
 80010dc:	fffff9ff 	.word	0xfffff9ff
 80010e0:	20000000 	.word	0x20000000
 80010e4:	000f4240 	.word	0x000f4240

080010e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b088      	sub	sp, #32
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e2f9      	b.n	80016ee <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2201      	movs	r2, #1
 8001100:	4013      	ands	r3, r2
 8001102:	d100      	bne.n	8001106 <HAL_RCC_OscConfig+0x1e>
 8001104:	e07c      	b.n	8001200 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001106:	4bc3      	ldr	r3, [pc, #780]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	2238      	movs	r2, #56	; 0x38
 800110c:	4013      	ands	r3, r2
 800110e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001110:	4bc0      	ldr	r3, [pc, #768]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2203      	movs	r2, #3
 8001116:	4013      	ands	r3, r2
 8001118:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	2b10      	cmp	r3, #16
 800111e:	d102      	bne.n	8001126 <HAL_RCC_OscConfig+0x3e>
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b03      	cmp	r3, #3
 8001124:	d002      	beq.n	800112c <HAL_RCC_OscConfig+0x44>
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	2b08      	cmp	r3, #8
 800112a:	d10b      	bne.n	8001144 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800112c:	4bb9      	ldr	r3, [pc, #740]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	029b      	lsls	r3, r3, #10
 8001134:	4013      	ands	r3, r2
 8001136:	d062      	beq.n	80011fe <HAL_RCC_OscConfig+0x116>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d15e      	bne.n	80011fe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e2d4      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685a      	ldr	r2, [r3, #4]
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	025b      	lsls	r3, r3, #9
 800114c:	429a      	cmp	r2, r3
 800114e:	d107      	bne.n	8001160 <HAL_RCC_OscConfig+0x78>
 8001150:	4bb0      	ldr	r3, [pc, #704]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4baf      	ldr	r3, [pc, #700]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001156:	2180      	movs	r1, #128	; 0x80
 8001158:	0249      	lsls	r1, r1, #9
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e020      	b.n	80011a2 <HAL_RCC_OscConfig+0xba>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685a      	ldr	r2, [r3, #4]
 8001164:	23a0      	movs	r3, #160	; 0xa0
 8001166:	02db      	lsls	r3, r3, #11
 8001168:	429a      	cmp	r2, r3
 800116a:	d10e      	bne.n	800118a <HAL_RCC_OscConfig+0xa2>
 800116c:	4ba9      	ldr	r3, [pc, #676]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4ba8      	ldr	r3, [pc, #672]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001172:	2180      	movs	r1, #128	; 0x80
 8001174:	02c9      	lsls	r1, r1, #11
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	4ba6      	ldr	r3, [pc, #664]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	4ba5      	ldr	r3, [pc, #660]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001180:	2180      	movs	r1, #128	; 0x80
 8001182:	0249      	lsls	r1, r1, #9
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	e00b      	b.n	80011a2 <HAL_RCC_OscConfig+0xba>
 800118a:	4ba2      	ldr	r3, [pc, #648]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	4ba1      	ldr	r3, [pc, #644]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001190:	49a1      	ldr	r1, [pc, #644]	; (8001418 <HAL_RCC_OscConfig+0x330>)
 8001192:	400a      	ands	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	4b9f      	ldr	r3, [pc, #636]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	4b9e      	ldr	r3, [pc, #632]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800119c:	499f      	ldr	r1, [pc, #636]	; (800141c <HAL_RCC_OscConfig+0x334>)
 800119e:	400a      	ands	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d014      	beq.n	80011d4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011aa:	f7ff fc91 	bl	8000ad0 <HAL_GetTick>
 80011ae:	0003      	movs	r3, r0
 80011b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fc8c 	bl	8000ad0 <HAL_GetTick>
 80011b8:	0002      	movs	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e293      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011c6:	4b93      	ldr	r3, [pc, #588]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	2380      	movs	r3, #128	; 0x80
 80011cc:	029b      	lsls	r3, r3, #10
 80011ce:	4013      	ands	r3, r2
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0xcc>
 80011d2:	e015      	b.n	8001200 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d4:	f7ff fc7c 	bl	8000ad0 <HAL_GetTick>
 80011d8:	0003      	movs	r3, r0
 80011da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011dc:	e008      	b.n	80011f0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011de:	f7ff fc77 	bl	8000ad0 <HAL_GetTick>
 80011e2:	0002      	movs	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b64      	cmp	r3, #100	; 0x64
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e27e      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80011f0:	4b88      	ldr	r3, [pc, #544]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	2380      	movs	r3, #128	; 0x80
 80011f6:	029b      	lsls	r3, r3, #10
 80011f8:	4013      	ands	r3, r2
 80011fa:	d1f0      	bne.n	80011de <HAL_RCC_OscConfig+0xf6>
 80011fc:	e000      	b.n	8001200 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2202      	movs	r2, #2
 8001206:	4013      	ands	r3, r2
 8001208:	d100      	bne.n	800120c <HAL_RCC_OscConfig+0x124>
 800120a:	e099      	b.n	8001340 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800120c:	4b81      	ldr	r3, [pc, #516]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	2238      	movs	r2, #56	; 0x38
 8001212:	4013      	ands	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001216:	4b7f      	ldr	r3, [pc, #508]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2203      	movs	r2, #3
 800121c:	4013      	ands	r3, r2
 800121e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	2b10      	cmp	r3, #16
 8001224:	d102      	bne.n	800122c <HAL_RCC_OscConfig+0x144>
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d002      	beq.n	8001232 <HAL_RCC_OscConfig+0x14a>
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d135      	bne.n	800129e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001232:	4b78      	ldr	r3, [pc, #480]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4013      	ands	r3, r2
 800123c:	d005      	beq.n	800124a <HAL_RCC_OscConfig+0x162>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e251      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800124a:	4b72      	ldr	r3, [pc, #456]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4a74      	ldr	r2, [pc, #464]	; (8001420 <HAL_RCC_OscConfig+0x338>)
 8001250:	4013      	ands	r3, r2
 8001252:	0019      	movs	r1, r3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	021a      	lsls	r2, r3, #8
 800125a:	4b6e      	ldr	r3, [pc, #440]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800125c:	430a      	orrs	r2, r1
 800125e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d112      	bne.n	800128c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001266:	4b6b      	ldr	r3, [pc, #428]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a6e      	ldr	r2, [pc, #440]	; (8001424 <HAL_RCC_OscConfig+0x33c>)
 800126c:	4013      	ands	r3, r2
 800126e:	0019      	movs	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	4b67      	ldr	r3, [pc, #412]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800127a:	4b66      	ldr	r3, [pc, #408]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	0adb      	lsrs	r3, r3, #11
 8001280:	2207      	movs	r2, #7
 8001282:	4013      	ands	r3, r2
 8001284:	4a68      	ldr	r2, [pc, #416]	; (8001428 <HAL_RCC_OscConfig+0x340>)
 8001286:	40da      	lsrs	r2, r3
 8001288:	4b68      	ldr	r3, [pc, #416]	; (800142c <HAL_RCC_OscConfig+0x344>)
 800128a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800128c:	4b68      	ldr	r3, [pc, #416]	; (8001430 <HAL_RCC_OscConfig+0x348>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff fbc1 	bl	8000a18 <HAL_InitTick>
 8001296:	1e03      	subs	r3, r0, #0
 8001298:	d051      	beq.n	800133e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e227      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d030      	beq.n	8001308 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012a6:	4b5b      	ldr	r3, [pc, #364]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a5e      	ldr	r2, [pc, #376]	; (8001424 <HAL_RCC_OscConfig+0x33c>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	0019      	movs	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691a      	ldr	r2, [r3, #16]
 80012b4:	4b57      	ldr	r3, [pc, #348]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012ba:	4b56      	ldr	r3, [pc, #344]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b55      	ldr	r3, [pc, #340]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80012c0:	2180      	movs	r1, #128	; 0x80
 80012c2:	0049      	lsls	r1, r1, #1
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c8:	f7ff fc02 	bl	8000ad0 <HAL_GetTick>
 80012cc:	0003      	movs	r3, r0
 80012ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012d2:	f7ff fbfd 	bl	8000ad0 <HAL_GetTick>
 80012d6:	0002      	movs	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e204      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012e4:	4b4b      	ldr	r3, [pc, #300]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	4013      	ands	r3, r2
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f0:	4b48      	ldr	r3, [pc, #288]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4a4a      	ldr	r2, [pc, #296]	; (8001420 <HAL_RCC_OscConfig+0x338>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	0019      	movs	r1, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	021a      	lsls	r2, r3, #8
 8001300:	4b44      	ldr	r3, [pc, #272]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001302:	430a      	orrs	r2, r1
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	e01b      	b.n	8001340 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001308:	4b42      	ldr	r3, [pc, #264]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800130e:	4949      	ldr	r1, [pc, #292]	; (8001434 <HAL_RCC_OscConfig+0x34c>)
 8001310:	400a      	ands	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fbdc 	bl	8000ad0 <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131e:	f7ff fbd7 	bl	8000ad0 <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e1de      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001330:	4b38      	ldr	r3, [pc, #224]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	00db      	lsls	r3, r3, #3
 8001338:	4013      	ands	r3, r2
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x236>
 800133c:	e000      	b.n	8001340 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800133e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2208      	movs	r2, #8
 8001346:	4013      	ands	r3, r2
 8001348:	d047      	beq.n	80013da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2238      	movs	r2, #56	; 0x38
 8001350:	4013      	ands	r3, r2
 8001352:	2b18      	cmp	r3, #24
 8001354:	d10a      	bne.n	800136c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001356:	4b2f      	ldr	r3, [pc, #188]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800135a:	2202      	movs	r2, #2
 800135c:	4013      	ands	r3, r2
 800135e:	d03c      	beq.n	80013da <HAL_RCC_OscConfig+0x2f2>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d138      	bne.n	80013da <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e1c0      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d019      	beq.n	80013a8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001374:	4b27      	ldr	r3, [pc, #156]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 8001376:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001378:	4b26      	ldr	r3, [pc, #152]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800137a:	2101      	movs	r1, #1
 800137c:	430a      	orrs	r2, r1
 800137e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001380:	f7ff fba6 	bl	8000ad0 <HAL_GetTick>
 8001384:	0003      	movs	r3, r0
 8001386:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001388:	e008      	b.n	800139c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800138a:	f7ff fba1 	bl	8000ad0 <HAL_GetTick>
 800138e:	0002      	movs	r2, r0
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	1ad3      	subs	r3, r2, r3
 8001394:	2b02      	cmp	r3, #2
 8001396:	d901      	bls.n	800139c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001398:	2303      	movs	r3, #3
 800139a:	e1a8      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 800139e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a0:	2202      	movs	r2, #2
 80013a2:	4013      	ands	r3, r2
 80013a4:	d0f1      	beq.n	800138a <HAL_RCC_OscConfig+0x2a2>
 80013a6:	e018      	b.n	80013da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80013aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013ac:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80013ae:	2101      	movs	r1, #1
 80013b0:	438a      	bics	r2, r1
 80013b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fb8c 	bl	8000ad0 <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013be:	f7ff fb87 	bl	8000ad0 <HAL_GetTick>
 80013c2:	0002      	movs	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e18e      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013d0:	4b10      	ldr	r3, [pc, #64]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80013d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d4:	2202      	movs	r2, #2
 80013d6:	4013      	ands	r3, r2
 80013d8:	d1f1      	bne.n	80013be <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2204      	movs	r2, #4
 80013e0:	4013      	ands	r3, r2
 80013e2:	d100      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2fe>
 80013e4:	e0c6      	b.n	8001574 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013e6:	231f      	movs	r3, #31
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2238      	movs	r2, #56	; 0x38
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b20      	cmp	r3, #32
 80013f8:	d11e      	bne.n	8001438 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_RCC_OscConfig+0x32c>)
 80013fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fe:	2202      	movs	r2, #2
 8001400:	4013      	ands	r3, r2
 8001402:	d100      	bne.n	8001406 <HAL_RCC_OscConfig+0x31e>
 8001404:	e0b6      	b.n	8001574 <HAL_RCC_OscConfig+0x48c>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d000      	beq.n	8001410 <HAL_RCC_OscConfig+0x328>
 800140e:	e0b1      	b.n	8001574 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e16c      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
 8001414:	40021000 	.word	0x40021000
 8001418:	fffeffff 	.word	0xfffeffff
 800141c:	fffbffff 	.word	0xfffbffff
 8001420:	ffff80ff 	.word	0xffff80ff
 8001424:	ffffc7ff 	.word	0xffffc7ff
 8001428:	00f42400 	.word	0x00f42400
 800142c:	20000000 	.word	0x20000000
 8001430:	20000004 	.word	0x20000004
 8001434:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001438:	4baf      	ldr	r3, [pc, #700]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 800143a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800143c:	2380      	movs	r3, #128	; 0x80
 800143e:	055b      	lsls	r3, r3, #21
 8001440:	4013      	ands	r3, r2
 8001442:	d101      	bne.n	8001448 <HAL_RCC_OscConfig+0x360>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <HAL_RCC_OscConfig+0x362>
 8001448:	2300      	movs	r3, #0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d011      	beq.n	8001472 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4baa      	ldr	r3, [pc, #680]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 8001450:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001452:	4ba9      	ldr	r3, [pc, #676]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 8001454:	2180      	movs	r1, #128	; 0x80
 8001456:	0549      	lsls	r1, r1, #21
 8001458:	430a      	orrs	r2, r1
 800145a:	63da      	str	r2, [r3, #60]	; 0x3c
 800145c:	4ba6      	ldr	r3, [pc, #664]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 800145e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001460:	2380      	movs	r3, #128	; 0x80
 8001462:	055b      	lsls	r3, r3, #21
 8001464:	4013      	ands	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800146a:	231f      	movs	r3, #31
 800146c:	18fb      	adds	r3, r7, r3
 800146e:	2201      	movs	r2, #1
 8001470:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001472:	4ba2      	ldr	r3, [pc, #648]	; (80016fc <HAL_RCC_OscConfig+0x614>)
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4013      	ands	r3, r2
 800147c:	d11a      	bne.n	80014b4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800147e:	4b9f      	ldr	r3, [pc, #636]	; (80016fc <HAL_RCC_OscConfig+0x614>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	4b9e      	ldr	r3, [pc, #632]	; (80016fc <HAL_RCC_OscConfig+0x614>)
 8001484:	2180      	movs	r1, #128	; 0x80
 8001486:	0049      	lsls	r1, r1, #1
 8001488:	430a      	orrs	r2, r1
 800148a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800148c:	f7ff fb20 	bl	8000ad0 <HAL_GetTick>
 8001490:	0003      	movs	r3, r0
 8001492:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7ff fb1b 	bl	8000ad0 <HAL_GetTick>
 800149a:	0002      	movs	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e122      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a8:	4b94      	ldr	r3, [pc, #592]	; (80016fc <HAL_RCC_OscConfig+0x614>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4013      	ands	r3, r2
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d106      	bne.n	80014ca <HAL_RCC_OscConfig+0x3e2>
 80014bc:	4b8e      	ldr	r3, [pc, #568]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80014be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014c0:	4b8d      	ldr	r3, [pc, #564]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	430a      	orrs	r2, r1
 80014c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80014c8:	e01c      	b.n	8001504 <HAL_RCC_OscConfig+0x41c>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x404>
 80014d2:	4b89      	ldr	r3, [pc, #548]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80014d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014d6:	4b88      	ldr	r3, [pc, #544]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80014d8:	2104      	movs	r1, #4
 80014da:	430a      	orrs	r2, r1
 80014dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80014de:	4b86      	ldr	r3, [pc, #536]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80014e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014e2:	4b85      	ldr	r3, [pc, #532]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80014e4:	2101      	movs	r1, #1
 80014e6:	430a      	orrs	r2, r1
 80014e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0x41c>
 80014ec:	4b82      	ldr	r3, [pc, #520]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80014ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014f0:	4b81      	ldr	r3, [pc, #516]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80014f2:	2101      	movs	r1, #1
 80014f4:	438a      	bics	r2, r1
 80014f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80014f8:	4b7f      	ldr	r3, [pc, #508]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80014fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80014fc:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80014fe:	2104      	movs	r1, #4
 8001500:	438a      	bics	r2, r1
 8001502:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d014      	beq.n	8001536 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fae0 	bl	8000ad0 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001514:	e009      	b.n	800152a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7ff fadb 	bl	8000ad0 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	4a77      	ldr	r2, [pc, #476]	; (8001700 <HAL_RCC_OscConfig+0x618>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e0e1      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800152a:	4b73      	ldr	r3, [pc, #460]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 800152c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152e:	2202      	movs	r2, #2
 8001530:	4013      	ands	r3, r2
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x42e>
 8001534:	e013      	b.n	800155e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001536:	f7ff facb 	bl	8000ad0 <HAL_GetTick>
 800153a:	0003      	movs	r3, r0
 800153c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800153e:	e009      	b.n	8001554 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001540:	f7ff fac6 	bl	8000ad0 <HAL_GetTick>
 8001544:	0002      	movs	r2, r0
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	4a6d      	ldr	r2, [pc, #436]	; (8001700 <HAL_RCC_OscConfig+0x618>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e0cc      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001554:	4b68      	ldr	r3, [pc, #416]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 8001556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001558:	2202      	movs	r2, #2
 800155a:	4013      	ands	r3, r2
 800155c:	d1f0      	bne.n	8001540 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800155e:	231f      	movs	r3, #31
 8001560:	18fb      	adds	r3, r7, r3
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d105      	bne.n	8001574 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001568:	4b63      	ldr	r3, [pc, #396]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 800156a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800156c:	4b62      	ldr	r3, [pc, #392]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 800156e:	4965      	ldr	r1, [pc, #404]	; (8001704 <HAL_RCC_OscConfig+0x61c>)
 8001570:	400a      	ands	r2, r1
 8001572:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d100      	bne.n	800157e <HAL_RCC_OscConfig+0x496>
 800157c:	e0b6      	b.n	80016ec <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800157e:	4b5e      	ldr	r3, [pc, #376]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2238      	movs	r2, #56	; 0x38
 8001584:	4013      	ands	r3, r2
 8001586:	2b10      	cmp	r3, #16
 8001588:	d100      	bne.n	800158c <HAL_RCC_OscConfig+0x4a4>
 800158a:	e07e      	b.n	800168a <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	2b02      	cmp	r3, #2
 8001592:	d153      	bne.n	800163c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001594:	4b58      	ldr	r3, [pc, #352]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b57      	ldr	r3, [pc, #348]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 800159a:	495b      	ldr	r1, [pc, #364]	; (8001708 <HAL_RCC_OscConfig+0x620>)
 800159c:	400a      	ands	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a0:	f7ff fa96 	bl	8000ad0 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015a8:	e008      	b.n	80015bc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015aa:	f7ff fa91 	bl	8000ad0 <HAL_GetTick>
 80015ae:	0002      	movs	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e098      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015bc:	4b4e      	ldr	r3, [pc, #312]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	2380      	movs	r3, #128	; 0x80
 80015c2:	049b      	lsls	r3, r3, #18
 80015c4:	4013      	ands	r3, r2
 80015c6:	d1f0      	bne.n	80015aa <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015c8:	4b4b      	ldr	r3, [pc, #300]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4a4f      	ldr	r2, [pc, #316]	; (800170c <HAL_RCC_OscConfig+0x624>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	0019      	movs	r1, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1a      	ldr	r2, [r3, #32]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	431a      	orrs	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015e0:	021b      	lsls	r3, r3, #8
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015e8:	431a      	orrs	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	431a      	orrs	r2, r3
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80015f2:	430a      	orrs	r2, r1
 80015f4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015f6:	4b40      	ldr	r3, [pc, #256]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b3f      	ldr	r3, [pc, #252]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 80015fc:	2180      	movs	r1, #128	; 0x80
 80015fe:	0449      	lsls	r1, r1, #17
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001604:	4b3c      	ldr	r3, [pc, #240]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	4b3b      	ldr	r3, [pc, #236]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 800160a:	2180      	movs	r1, #128	; 0x80
 800160c:	0549      	lsls	r1, r1, #21
 800160e:	430a      	orrs	r2, r1
 8001610:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001612:	f7ff fa5d 	bl	8000ad0 <HAL_GetTick>
 8001616:	0003      	movs	r3, r0
 8001618:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fa58 	bl	8000ad0 <HAL_GetTick>
 8001620:	0002      	movs	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e05f      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800162e:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	049b      	lsls	r3, r3, #18
 8001636:	4013      	ands	r3, r2
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x534>
 800163a:	e057      	b.n	80016ec <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163c:	4b2e      	ldr	r3, [pc, #184]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b2d      	ldr	r3, [pc, #180]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 8001642:	4931      	ldr	r1, [pc, #196]	; (8001708 <HAL_RCC_OscConfig+0x620>)
 8001644:	400a      	ands	r2, r1
 8001646:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001648:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	4b2a      	ldr	r3, [pc, #168]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 800164e:	2103      	movs	r1, #3
 8001650:	438a      	bics	r2, r1
 8001652:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001654:	4b28      	ldr	r3, [pc, #160]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 800165a:	492d      	ldr	r1, [pc, #180]	; (8001710 <HAL_RCC_OscConfig+0x628>)
 800165c:	400a      	ands	r2, r1
 800165e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fa36 	bl	8000ad0 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fa31 	bl	8000ad0 <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e038      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167c:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	049b      	lsls	r3, r3, #18
 8001684:	4013      	ands	r3, r2
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x582>
 8001688:	e030      	b.n	80016ec <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e02b      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001696:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <HAL_RCC_OscConfig+0x610>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	2203      	movs	r2, #3
 80016a0:	401a      	ands	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d11e      	bne.n	80016e8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2270      	movs	r2, #112	; 0x70
 80016ae:	401a      	ands	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d117      	bne.n	80016e8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	23fe      	movs	r3, #254	; 0xfe
 80016bc:	01db      	lsls	r3, r3, #7
 80016be:	401a      	ands	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d10e      	bne.n	80016e8 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016ca:	697a      	ldr	r2, [r7, #20]
 80016cc:	23f8      	movs	r3, #248	; 0xf8
 80016ce:	039b      	lsls	r3, r3, #14
 80016d0:	401a      	ands	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d106      	bne.n	80016e8 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	0f5b      	lsrs	r3, r3, #29
 80016de:	075a      	lsls	r2, r3, #29
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e000      	b.n	80016ee <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	0018      	movs	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b008      	add	sp, #32
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	40021000 	.word	0x40021000
 80016fc:	40007000 	.word	0x40007000
 8001700:	00001388 	.word	0x00001388
 8001704:	efffffff 	.word	0xefffffff
 8001708:	feffffff 	.word	0xfeffffff
 800170c:	1fc1808c 	.word	0x1fc1808c
 8001710:	effeffff 	.word	0xeffeffff

08001714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e0e9      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001728:	4b76      	ldr	r3, [pc, #472]	; (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2207      	movs	r2, #7
 800172e:	4013      	ands	r3, r2
 8001730:	683a      	ldr	r2, [r7, #0]
 8001732:	429a      	cmp	r2, r3
 8001734:	d91e      	bls.n	8001774 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001736:	4b73      	ldr	r3, [pc, #460]	; (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2207      	movs	r2, #7
 800173c:	4393      	bics	r3, r2
 800173e:	0019      	movs	r1, r3
 8001740:	4b70      	ldr	r3, [pc, #448]	; (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 8001742:	683a      	ldr	r2, [r7, #0]
 8001744:	430a      	orrs	r2, r1
 8001746:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001748:	f7ff f9c2 	bl	8000ad0 <HAL_GetTick>
 800174c:	0003      	movs	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001750:	e009      	b.n	8001766 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001752:	f7ff f9bd 	bl	8000ad0 <HAL_GetTick>
 8001756:	0002      	movs	r2, r0
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	4a6a      	ldr	r2, [pc, #424]	; (8001908 <HAL_RCC_ClockConfig+0x1f4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e0ca      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001766:	4b67      	ldr	r3, [pc, #412]	; (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2207      	movs	r2, #7
 800176c:	4013      	ands	r3, r2
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d1ee      	bne.n	8001752 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2202      	movs	r2, #2
 800177a:	4013      	ands	r3, r2
 800177c:	d015      	beq.n	80017aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2204      	movs	r2, #4
 8001784:	4013      	ands	r3, r2
 8001786:	d006      	beq.n	8001796 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001788:	4b60      	ldr	r3, [pc, #384]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	4b5f      	ldr	r3, [pc, #380]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 800178e:	21e0      	movs	r1, #224	; 0xe0
 8001790:	01c9      	lsls	r1, r1, #7
 8001792:	430a      	orrs	r2, r1
 8001794:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001796:	4b5d      	ldr	r3, [pc, #372]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	4a5d      	ldr	r2, [pc, #372]	; (8001910 <HAL_RCC_ClockConfig+0x1fc>)
 800179c:	4013      	ands	r3, r2
 800179e:	0019      	movs	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	4b59      	ldr	r3, [pc, #356]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2201      	movs	r2, #1
 80017b0:	4013      	ands	r3, r2
 80017b2:	d057      	beq.n	8001864 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d107      	bne.n	80017cc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017bc:	4b53      	ldr	r3, [pc, #332]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	029b      	lsls	r3, r3, #10
 80017c4:	4013      	ands	r3, r2
 80017c6:	d12b      	bne.n	8001820 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e097      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d107      	bne.n	80017e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017d4:	4b4d      	ldr	r3, [pc, #308]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	049b      	lsls	r3, r3, #18
 80017dc:	4013      	ands	r3, r2
 80017de:	d11f      	bne.n	8001820 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e08b      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d107      	bne.n	80017fc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017ec:	4b47      	ldr	r3, [pc, #284]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	2380      	movs	r3, #128	; 0x80
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4013      	ands	r3, r2
 80017f6:	d113      	bne.n	8001820 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e07f      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b03      	cmp	r3, #3
 8001802:	d106      	bne.n	8001812 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001804:	4b41      	ldr	r3, [pc, #260]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 8001806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001808:	2202      	movs	r2, #2
 800180a:	4013      	ands	r3, r2
 800180c:	d108      	bne.n	8001820 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e074      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001812:	4b3e      	ldr	r3, [pc, #248]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d101      	bne.n	8001820 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e06d      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001820:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2207      	movs	r2, #7
 8001826:	4393      	bics	r3, r2
 8001828:	0019      	movs	r1, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	4b37      	ldr	r3, [pc, #220]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 8001830:	430a      	orrs	r2, r1
 8001832:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001834:	f7ff f94c 	bl	8000ad0 <HAL_GetTick>
 8001838:	0003      	movs	r3, r0
 800183a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183c:	e009      	b.n	8001852 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183e:	f7ff f947 	bl	8000ad0 <HAL_GetTick>
 8001842:	0002      	movs	r2, r0
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	4a2f      	ldr	r2, [pc, #188]	; (8001908 <HAL_RCC_ClockConfig+0x1f4>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e054      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	2238      	movs	r2, #56	; 0x38
 8001858:	401a      	ands	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	429a      	cmp	r2, r3
 8001862:	d1ec      	bne.n	800183e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b27      	ldr	r3, [pc, #156]	; (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2207      	movs	r2, #7
 800186a:	4013      	ands	r3, r2
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d21e      	bcs.n	80018b0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b24      	ldr	r3, [pc, #144]	; (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2207      	movs	r2, #7
 8001878:	4393      	bics	r3, r2
 800187a:	0019      	movs	r1, r3
 800187c:	4b21      	ldr	r3, [pc, #132]	; (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	430a      	orrs	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001884:	f7ff f924 	bl	8000ad0 <HAL_GetTick>
 8001888:	0003      	movs	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800188c:	e009      	b.n	80018a2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800188e:	f7ff f91f 	bl	8000ad0 <HAL_GetTick>
 8001892:	0002      	movs	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <HAL_RCC_ClockConfig+0x1f4>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e02c      	b.n	80018fc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_RCC_ClockConfig+0x1f0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2207      	movs	r2, #7
 80018a8:	4013      	ands	r3, r2
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d1ee      	bne.n	800188e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2204      	movs	r2, #4
 80018b6:	4013      	ands	r3, r2
 80018b8:	d009      	beq.n	80018ce <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018ba:	4b14      	ldr	r3, [pc, #80]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	4a15      	ldr	r2, [pc, #84]	; (8001914 <HAL_RCC_ClockConfig+0x200>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68da      	ldr	r2, [r3, #12]
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80018ca:	430a      	orrs	r2, r1
 80018cc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018ce:	f000 f829 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 80018d2:	0001      	movs	r1, r0
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <HAL_RCC_ClockConfig+0x1f8>)
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	0a1b      	lsrs	r3, r3, #8
 80018da:	220f      	movs	r2, #15
 80018dc:	401a      	ands	r2, r3
 80018de:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <HAL_RCC_ClockConfig+0x204>)
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	58d3      	ldr	r3, [r2, r3]
 80018e4:	221f      	movs	r2, #31
 80018e6:	4013      	ands	r3, r2
 80018e8:	000a      	movs	r2, r1
 80018ea:	40da      	lsrs	r2, r3
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <HAL_RCC_ClockConfig+0x208>)
 80018ee:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018f0:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <HAL_RCC_ClockConfig+0x20c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	0018      	movs	r0, r3
 80018f6:	f7ff f88f 	bl	8000a18 <HAL_InitTick>
 80018fa:	0003      	movs	r3, r0
}
 80018fc:	0018      	movs	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	b004      	add	sp, #16
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40022000 	.word	0x40022000
 8001908:	00001388 	.word	0x00001388
 800190c:	40021000 	.word	0x40021000
 8001910:	fffff0ff 	.word	0xfffff0ff
 8001914:	ffff8fff 	.word	0xffff8fff
 8001918:	08001a98 	.word	0x08001a98
 800191c:	20000000 	.word	0x20000000
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192a:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	2238      	movs	r2, #56	; 0x38
 8001930:	4013      	ands	r3, r2
 8001932:	d10f      	bne.n	8001954 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001934:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	0adb      	lsrs	r3, r3, #11
 800193a:	2207      	movs	r2, #7
 800193c:	4013      	ands	r3, r2
 800193e:	2201      	movs	r2, #1
 8001940:	409a      	lsls	r2, r3
 8001942:	0013      	movs	r3, r2
 8001944:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	4835      	ldr	r0, [pc, #212]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xfc>)
 800194a:	f7fe fbd9 	bl	8000100 <__udivsi3>
 800194e:	0003      	movs	r3, r0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	e05d      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001954:	4b31      	ldr	r3, [pc, #196]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2238      	movs	r2, #56	; 0x38
 800195a:	4013      	ands	r3, r2
 800195c:	2b08      	cmp	r3, #8
 800195e:	d102      	bne.n	8001966 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001960:	4b30      	ldr	r3, [pc, #192]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x100>)
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	e054      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2238      	movs	r2, #56	; 0x38
 800196c:	4013      	ands	r3, r2
 800196e:	2b10      	cmp	r3, #16
 8001970:	d138      	bne.n	80019e4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001972:	4b2a      	ldr	r3, [pc, #168]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	2203      	movs	r2, #3
 8001978:	4013      	ands	r3, r2
 800197a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800197c:	4b27      	ldr	r3, [pc, #156]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	091b      	lsrs	r3, r3, #4
 8001982:	2207      	movs	r2, #7
 8001984:	4013      	ands	r3, r2
 8001986:	3301      	adds	r3, #1
 8001988:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	2b03      	cmp	r3, #3
 800198e:	d10d      	bne.n	80019ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	4824      	ldr	r0, [pc, #144]	; (8001a24 <HAL_RCC_GetSysClockFreq+0x100>)
 8001994:	f7fe fbb4 	bl	8000100 <__udivsi3>
 8001998:	0003      	movs	r3, r0
 800199a:	0019      	movs	r1, r3
 800199c:	4b1f      	ldr	r3, [pc, #124]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	0a1b      	lsrs	r3, r3, #8
 80019a2:	227f      	movs	r2, #127	; 0x7f
 80019a4:	4013      	ands	r3, r2
 80019a6:	434b      	muls	r3, r1
 80019a8:	617b      	str	r3, [r7, #20]
        break;
 80019aa:	e00d      	b.n	80019c8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	481c      	ldr	r0, [pc, #112]	; (8001a20 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019b0:	f7fe fba6 	bl	8000100 <__udivsi3>
 80019b4:	0003      	movs	r3, r0
 80019b6:	0019      	movs	r1, r3
 80019b8:	4b18      	ldr	r3, [pc, #96]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	0a1b      	lsrs	r3, r3, #8
 80019be:	227f      	movs	r2, #127	; 0x7f
 80019c0:	4013      	ands	r3, r2
 80019c2:	434b      	muls	r3, r1
 80019c4:	617b      	str	r3, [r7, #20]
        break;
 80019c6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	0f5b      	lsrs	r3, r3, #29
 80019ce:	2207      	movs	r2, #7
 80019d0:	4013      	ands	r3, r2
 80019d2:	3301      	adds	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	6978      	ldr	r0, [r7, #20]
 80019da:	f7fe fb91 	bl	8000100 <__udivsi3>
 80019de:	0003      	movs	r3, r0
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	e015      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80019e4:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2238      	movs	r2, #56	; 0x38
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b20      	cmp	r3, #32
 80019ee:	d103      	bne.n	80019f8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80019f0:	2380      	movs	r3, #128	; 0x80
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	613b      	str	r3, [r7, #16]
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	2238      	movs	r2, #56	; 0x38
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b18      	cmp	r3, #24
 8001a02:	d103      	bne.n	8001a0c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a04:	23fa      	movs	r3, #250	; 0xfa
 8001a06:	01db      	lsls	r3, r3, #7
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	e001      	b.n	8001a10 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a10:	693b      	ldr	r3, [r7, #16]
}
 8001a12:	0018      	movs	r0, r3
 8001a14:	46bd      	mov	sp, r7
 8001a16:	b006      	add	sp, #24
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	00f42400 	.word	0x00f42400
 8001a24:	007a1200 	.word	0x007a1200

08001a28 <__libc_init_array>:
 8001a28:	b570      	push	{r4, r5, r6, lr}
 8001a2a:	2600      	movs	r6, #0
 8001a2c:	4d0c      	ldr	r5, [pc, #48]	; (8001a60 <__libc_init_array+0x38>)
 8001a2e:	4c0d      	ldr	r4, [pc, #52]	; (8001a64 <__libc_init_array+0x3c>)
 8001a30:	1b64      	subs	r4, r4, r5
 8001a32:	10a4      	asrs	r4, r4, #2
 8001a34:	42a6      	cmp	r6, r4
 8001a36:	d109      	bne.n	8001a4c <__libc_init_array+0x24>
 8001a38:	2600      	movs	r6, #0
 8001a3a:	f000 f821 	bl	8001a80 <_init>
 8001a3e:	4d0a      	ldr	r5, [pc, #40]	; (8001a68 <__libc_init_array+0x40>)
 8001a40:	4c0a      	ldr	r4, [pc, #40]	; (8001a6c <__libc_init_array+0x44>)
 8001a42:	1b64      	subs	r4, r4, r5
 8001a44:	10a4      	asrs	r4, r4, #2
 8001a46:	42a6      	cmp	r6, r4
 8001a48:	d105      	bne.n	8001a56 <__libc_init_array+0x2e>
 8001a4a:	bd70      	pop	{r4, r5, r6, pc}
 8001a4c:	00b3      	lsls	r3, r6, #2
 8001a4e:	58eb      	ldr	r3, [r5, r3]
 8001a50:	4798      	blx	r3
 8001a52:	3601      	adds	r6, #1
 8001a54:	e7ee      	b.n	8001a34 <__libc_init_array+0xc>
 8001a56:	00b3      	lsls	r3, r6, #2
 8001a58:	58eb      	ldr	r3, [r5, r3]
 8001a5a:	4798      	blx	r3
 8001a5c:	3601      	adds	r6, #1
 8001a5e:	e7f2      	b.n	8001a46 <__libc_init_array+0x1e>
 8001a60:	08001b80 	.word	0x08001b80
 8001a64:	08001b80 	.word	0x08001b80
 8001a68:	08001b80 	.word	0x08001b80
 8001a6c:	08001b84 	.word	0x08001b84

08001a70 <memset>:
 8001a70:	0003      	movs	r3, r0
 8001a72:	1812      	adds	r2, r2, r0
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d100      	bne.n	8001a7a <memset+0xa>
 8001a78:	4770      	bx	lr
 8001a7a:	7019      	strb	r1, [r3, #0]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	e7f9      	b.n	8001a74 <memset+0x4>

08001a80 <_init>:
 8001a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a86:	bc08      	pop	{r3}
 8001a88:	469e      	mov	lr, r3
 8001a8a:	4770      	bx	lr

08001a8c <_fini>:
 8001a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a92:	bc08      	pop	{r3}
 8001a94:	469e      	mov	lr, r3
 8001a96:	4770      	bx	lr
