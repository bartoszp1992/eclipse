
eclipse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003954  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003af4  08003af4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003af4  08003af4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003af4  08003af4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000000c  08003b08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08003b08  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b5fa  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002090  00000000  00000000  0002b62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a08  00000000  00000000  0002d6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008f0  00000000  00000000  0002e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f06  00000000  00000000  0002e9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c34f  00000000  00000000  000448be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000896e5  00000000  00000000  00050c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da2f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021e4  00000000  00000000  000da348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080039f4 	.word	0x080039f4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080039f4 	.word	0x080039f4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f001 f936 	bl	800148c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f8fe 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 fa52 	bl	80006cc <MX_GPIO_Init>
  MX_RTC_Init();
 8000228:	f000 f9d6 	bl	80005d8 <MX_RTC_Init>
  MX_ADC1_Init();
 800022c:	f000 f96a 	bl	8000504 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	mode = MODE_NORMAL;
 8000230:	4b74      	ldr	r3, [pc, #464]	; (8000404 <main+0x1ec>)
 8000232:	2200      	movs	r2, #0
 8000234:	701a      	strb	r2, [r3, #0]
	dontSleepFlag = 0;
 8000236:	4b74      	ldr	r3, [pc, #464]	; (8000408 <main+0x1f0>)
 8000238:	2200      	movs	r2, #0
 800023a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (mode == MODE_NORMAL) {
 800023c:	4b71      	ldr	r3, [pc, #452]	; (8000404 <main+0x1ec>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	b2db      	uxtb	r3, r3
 8000242:	2b00      	cmp	r3, #0
 8000244:	d111      	bne.n	800026a <main+0x52>

			rtcGetTime();
 8000246:	f001 f8bd 	bl	80013c4 <rtcGetTime>
			displayShowTime(hours, minutes, 20, 15);
 800024a:	4b70      	ldr	r3, [pc, #448]	; (800040c <main+0x1f4>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	b25b      	sxtb	r3, r3
 8000250:	b2d8      	uxtb	r0, r3
 8000252:	4b6f      	ldr	r3, [pc, #444]	; (8000410 <main+0x1f8>)
 8000254:	881b      	ldrh	r3, [r3, #0]
 8000256:	b21b      	sxth	r3, r3
 8000258:	b2d9      	uxtb	r1, r3
 800025a:	230f      	movs	r3, #15
 800025c:	2214      	movs	r2, #20
 800025e:	f000 fd1f 	bl	8000ca0 <displayShowTime>
			dontSleepFlag = 0;
 8000262:	4b69      	ldr	r3, [pc, #420]	; (8000408 <main+0x1f0>)
 8000264:	2200      	movs	r2, #0
 8000266:	701a      	strb	r2, [r3, #0]
 8000268:	e0b0      	b.n	80003cc <main+0x1b4>

		} else if (mode == MODE_SETTINGS_H || mode == MODE_SETTINGS_M) {
 800026a:	4b66      	ldr	r3, [pc, #408]	; (8000404 <main+0x1ec>)
 800026c:	781b      	ldrb	r3, [r3, #0]
 800026e:	b2db      	uxtb	r3, r3
 8000270:	2b01      	cmp	r3, #1
 8000272:	d004      	beq.n	800027e <main+0x66>
 8000274:	4b63      	ldr	r3, [pc, #396]	; (8000404 <main+0x1ec>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	b2db      	uxtb	r3, r3
 800027a:	2b02      	cmp	r3, #2
 800027c:	d135      	bne.n	80002ea <main+0xd2>

			displayTurnOff();
 800027e:	f000 fce1 	bl	8000c44 <displayTurnOff>
			displayTurnMinutesLED(minutes / 2, 1);
 8000282:	4b63      	ldr	r3, [pc, #396]	; (8000410 <main+0x1f8>)
 8000284:	881b      	ldrh	r3, [r3, #0]
 8000286:	b21b      	sxth	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	da00      	bge.n	800028e <main+0x76>
 800028c:	3301      	adds	r3, #1
 800028e:	105b      	asrs	r3, r3, #1
 8000290:	b21b      	sxth	r3, r3
 8000292:	b2db      	uxtb	r3, r3
 8000294:	2101      	movs	r1, #1
 8000296:	0018      	movs	r0, r3
 8000298:	f000 fe9e 	bl	8000fd8 <displayTurnMinutesLED>

			if (minutes % 2 == 1) {
 800029c:	4b5c      	ldr	r3, [pc, #368]	; (8000410 <main+0x1f8>)
 800029e:	881b      	ldrh	r3, [r3, #0]
 80002a0:	b21b      	sxth	r3, r3
 80002a2:	4a5c      	ldr	r2, [pc, #368]	; (8000414 <main+0x1fc>)
 80002a4:	4013      	ands	r3, r2
 80002a6:	d504      	bpl.n	80002b2 <main+0x9a>
 80002a8:	3b01      	subs	r3, #1
 80002aa:	2202      	movs	r2, #2
 80002ac:	4252      	negs	r2, r2
 80002ae:	4313      	orrs	r3, r2
 80002b0:	3301      	adds	r3, #1
 80002b2:	b21b      	sxth	r3, r3
 80002b4:	2b01      	cmp	r3, #1
 80002b6:	d106      	bne.n	80002c6 <main+0xae>

				HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 80002b8:	4b57      	ldr	r3, [pc, #348]	; (8000418 <main+0x200>)
 80002ba:	2201      	movs	r2, #1
 80002bc:	2110      	movs	r1, #16
 80002be:	0018      	movs	r0, r3
 80002c0:	f002 f89d 	bl	80023fe <HAL_GPIO_WritePin>
 80002c4:	e005      	b.n	80002d2 <main+0xba>

			} else {

				HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 80002c6:	4b54      	ldr	r3, [pc, #336]	; (8000418 <main+0x200>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	2110      	movs	r1, #16
 80002cc:	0018      	movs	r0, r3
 80002ce:	f002 f896 	bl	80023fe <HAL_GPIO_WritePin>

			}

			displayTurnHoursLED(hours, 1);
 80002d2:	4b4e      	ldr	r3, [pc, #312]	; (800040c <main+0x1f4>)
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	b25b      	sxtb	r3, r3
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2101      	movs	r1, #1
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fdf1 	bl	8000ec4 <displayTurnHoursLED>
			HAL_Delay(50);
 80002e2:	2032      	movs	r0, #50	; 0x32
 80002e4:	f001 f958 	bl	8001598 <HAL_Delay>
 80002e8:	e070      	b.n	80003cc <main+0x1b4>

		} else if (mode == MODE_SETTINGS_S) {
 80002ea:	4b46      	ldr	r3, [pc, #280]	; (8000404 <main+0x1ec>)
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	2b03      	cmp	r3, #3
 80002f2:	d12f      	bne.n	8000354 <main+0x13c>

			rtcGetTime();
 80002f4:	f001 f866 	bl	80013c4 <rtcGetTime>
			displayTurnOff();
 80002f8:	f000 fca4 	bl	8000c44 <displayTurnOff>
			displayTurnMinutesLED(seconds / 2, 1);
 80002fc:	4b47      	ldr	r3, [pc, #284]	; (800041c <main+0x204>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	b25b      	sxtb	r3, r3
 8000302:	2b00      	cmp	r3, #0
 8000304:	da00      	bge.n	8000308 <main+0xf0>
 8000306:	3301      	adds	r3, #1
 8000308:	105b      	asrs	r3, r3, #1
 800030a:	b25b      	sxtb	r3, r3
 800030c:	b2db      	uxtb	r3, r3
 800030e:	2101      	movs	r1, #1
 8000310:	0018      	movs	r0, r3
 8000312:	f000 fe61 	bl	8000fd8 <displayTurnMinutesLED>

			if (seconds % 2 == 1) {
 8000316:	4b41      	ldr	r3, [pc, #260]	; (800041c <main+0x204>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b25b      	sxtb	r3, r3
 800031c:	4a3d      	ldr	r2, [pc, #244]	; (8000414 <main+0x1fc>)
 800031e:	4013      	ands	r3, r2
 8000320:	d504      	bpl.n	800032c <main+0x114>
 8000322:	3b01      	subs	r3, #1
 8000324:	2202      	movs	r2, #2
 8000326:	4252      	negs	r2, r2
 8000328:	4313      	orrs	r3, r2
 800032a:	3301      	adds	r3, #1
 800032c:	b25b      	sxtb	r3, r3
 800032e:	2b01      	cmp	r3, #1
 8000330:	d106      	bne.n	8000340 <main+0x128>

				HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 8000332:	4b39      	ldr	r3, [pc, #228]	; (8000418 <main+0x200>)
 8000334:	2201      	movs	r2, #1
 8000336:	2110      	movs	r1, #16
 8000338:	0018      	movs	r0, r3
 800033a:	f002 f860 	bl	80023fe <HAL_GPIO_WritePin>
 800033e:	e005      	b.n	800034c <main+0x134>

			} else {

				HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 8000340:	4b35      	ldr	r3, [pc, #212]	; (8000418 <main+0x200>)
 8000342:	2200      	movs	r2, #0
 8000344:	2110      	movs	r1, #16
 8000346:	0018      	movs	r0, r3
 8000348:	f002 f859 	bl	80023fe <HAL_GPIO_WritePin>

			}

			HAL_Delay(50);
 800034c:	2032      	movs	r0, #50	; 0x32
 800034e:	f001 f923 	bl	8001598 <HAL_Delay>
 8000352:	e03b      	b.n	80003cc <main+0x1b4>

		} else if (mode == MODE_SLEEP) {
 8000354:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <main+0x1ec>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b04      	cmp	r3, #4
 800035c:	d10f      	bne.n	800037e <main+0x166>

			HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 800035e:	4b2e      	ldr	r3, [pc, #184]	; (8000418 <main+0x200>)
 8000360:	2201      	movs	r2, #1
 8000362:	2110      	movs	r1, #16
 8000364:	0018      	movs	r0, r3
 8000366:	f002 f84a 	bl	80023fe <HAL_GPIO_WritePin>
			HAL_Delay(50);
 800036a:	2032      	movs	r0, #50	; 0x32
 800036c:	f001 f914 	bl	8001598 <HAL_Delay>
			HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 8000370:	4b29      	ldr	r3, [pc, #164]	; (8000418 <main+0x200>)
 8000372:	2200      	movs	r2, #0
 8000374:	2110      	movs	r1, #16
 8000376:	0018      	movs	r0, r3
 8000378:	f002 f841 	bl	80023fe <HAL_GPIO_WritePin>
 800037c:	e026      	b.n	80003cc <main+0x1b4>

		} else if(mode == MODE_FORCE){
 800037e:	4b21      	ldr	r3, [pc, #132]	; (8000404 <main+0x1ec>)
 8000380:	781b      	ldrb	r3, [r3, #0]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	2b05      	cmp	r3, #5
 8000386:	d121      	bne.n	80003cc <main+0x1b4>

			rtcGetTime();//for actual seconds reading
 8000388:	f001 f81c 	bl	80013c4 <rtcGetTime>

			if(HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1){
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	021b      	lsls	r3, r3, #8
 8000390:	4a21      	ldr	r2, [pc, #132]	; (8000418 <main+0x200>)
 8000392:	0019      	movs	r1, r3
 8000394:	0010      	movs	r0, r2
 8000396:	f002 f815 	bl	80023c4 <HAL_GPIO_ReadPin>
 800039a:	0003      	movs	r3, r0
 800039c:	2b01      	cmp	r3, #1
 800039e:	d10c      	bne.n	80003ba <main+0x1a2>
				displayShowTimeForce(hours, minutes, 0);
 80003a0:	4b1a      	ldr	r3, [pc, #104]	; (800040c <main+0x1f4>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	b25b      	sxtb	r3, r3
 80003a6:	b2d8      	uxtb	r0, r3
 80003a8:	4b19      	ldr	r3, [pc, #100]	; (8000410 <main+0x1f8>)
 80003aa:	881b      	ldrh	r3, [r3, #0]
 80003ac:	b21b      	sxth	r3, r3
 80003ae:	b2db      	uxtb	r3, r3
 80003b0:	2200      	movs	r2, #0
 80003b2:	0019      	movs	r1, r3
 80003b4:	f000 fb7e 	bl	8000ab4 <displayShowTimeForce>
 80003b8:	e008      	b.n	80003cc <main+0x1b4>
			}else{
				displayShowTimeForce(0, seconds, 1);
 80003ba:	4b18      	ldr	r3, [pc, #96]	; (800041c <main+0x204>)
 80003bc:	781b      	ldrb	r3, [r3, #0]
 80003be:	b25b      	sxtb	r3, r3
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2201      	movs	r2, #1
 80003c4:	0019      	movs	r1, r3
 80003c6:	2000      	movs	r0, #0
 80003c8:	f000 fb74 	bl	8000ab4 <displayShowTimeForce>
			}


		}

		if ((mode == MODE_NORMAL || mode == MODE_SLEEP) && dontSleepFlag == 0) {
 80003cc:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <main+0x1ec>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	b2db      	uxtb	r3, r3
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d005      	beq.n	80003e2 <main+0x1ca>
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <main+0x1ec>)
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	b2db      	uxtb	r3, r3
 80003dc:	2b04      	cmp	r3, #4
 80003de:	d000      	beq.n	80003e2 <main+0x1ca>
 80003e0:	e72c      	b.n	800023c <main+0x24>
 80003e2:	4b09      	ldr	r3, [pc, #36]	; (8000408 <main+0x1f0>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d000      	beq.n	80003ee <main+0x1d6>
 80003ec:	e726      	b.n	800023c <main+0x24>

			mode = MODE_SLEEP;
 80003ee:	4b05      	ldr	r3, [pc, #20]	; (8000404 <main+0x1ec>)
 80003f0:	2204      	movs	r2, #4
 80003f2:	701a      	strb	r2, [r3, #0]
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80003f4:	2380      	movs	r3, #128	; 0x80
 80003f6:	01db      	lsls	r3, r3, #7
 80003f8:	2101      	movs	r1, #1
 80003fa:	0018      	movs	r0, r3
 80003fc:	f002 f854 	bl	80024a8 <HAL_PWR_EnterSTOPMode>
		if (mode == MODE_NORMAL) {
 8000400:	e71c      	b.n	800023c <main+0x24>
 8000402:	46c0      	nop			; (mov r8, r8)
 8000404:	200000a4 	.word	0x200000a4
 8000408:	2000003c 	.word	0x2000003c
 800040c:	200000dc 	.word	0x200000dc
 8000410:	200000da 	.word	0x200000da
 8000414:	80000001 	.word	0x80000001
 8000418:	50000400 	.word	0x50000400
 800041c:	200000d8 	.word	0x200000d8

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b099      	sub	sp, #100	; 0x64
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	242c      	movs	r4, #44	; 0x2c
 8000428:	193b      	adds	r3, r7, r4
 800042a:	0018      	movs	r0, r3
 800042c:	2334      	movs	r3, #52	; 0x34
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f003 fad7 	bl	80039e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000436:	231c      	movs	r3, #28
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	0018      	movs	r0, r3
 800043c:	2310      	movs	r3, #16
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f003 facf 	bl	80039e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000446:	003b      	movs	r3, r7
 8000448:	0018      	movs	r0, r3
 800044a:	231c      	movs	r3, #28
 800044c:	001a      	movs	r2, r3
 800044e:	2100      	movs	r1, #0
 8000450:	f003 fac8 	bl	80039e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000454:	2380      	movs	r3, #128	; 0x80
 8000456:	009b      	lsls	r3, r3, #2
 8000458:	0018      	movs	r0, r3
 800045a:	f002 f85d 	bl	8002518 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800045e:	f002 f815 	bl	800248c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000462:	4b27      	ldr	r3, [pc, #156]	; (8000500 <SystemClock_Config+0xe0>)
 8000464:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000466:	4b26      	ldr	r3, [pc, #152]	; (8000500 <SystemClock_Config+0xe0>)
 8000468:	2118      	movs	r1, #24
 800046a:	438a      	bics	r2, r1
 800046c:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800046e:	193b      	adds	r3, r7, r4
 8000470:	2206      	movs	r2, #6
 8000472:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000474:	193b      	adds	r3, r7, r4
 8000476:	2201      	movs	r2, #1
 8000478:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047a:	193b      	adds	r3, r7, r4
 800047c:	2280      	movs	r2, #128	; 0x80
 800047e:	0052      	lsls	r2, r2, #1
 8000480:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000482:	193b      	adds	r3, r7, r4
 8000484:	2200      	movs	r2, #0
 8000486:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2240      	movs	r2, #64	; 0x40
 800048c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2200      	movs	r2, #0
 8000492:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000494:	193b      	adds	r3, r7, r4
 8000496:	0018      	movs	r0, r3
 8000498:	f002 f87e 	bl	8002598 <HAL_RCC_OscConfig>
 800049c:	1e03      	subs	r3, r0, #0
 800049e:	d001      	beq.n	80004a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004a0:	f000 f9fc 	bl	800089c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a4:	211c      	movs	r1, #28
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2207      	movs	r2, #7
 80004aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2200      	movs	r2, #0
 80004b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b2:	187b      	adds	r3, r7, r1
 80004b4:	2200      	movs	r2, #0
 80004b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2200      	movs	r2, #0
 80004bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2100      	movs	r1, #0
 80004c2:	0018      	movs	r0, r3
 80004c4:	f002 fb7e 	bl	8002bc4 <HAL_RCC_ClockConfig>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80004cc:	f000 f9e6 	bl	800089c <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 80004d0:	003b      	movs	r3, r7
 80004d2:	2290      	movs	r2, #144	; 0x90
 80004d4:	0292      	lsls	r2, r2, #10
 80004d6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 80004d8:	003b      	movs	r3, r7
 80004da:	2200      	movs	r2, #0
 80004dc:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80004de:	003b      	movs	r3, r7
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	0052      	lsls	r2, r2, #1
 80004e4:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e6:	003b      	movs	r3, r7
 80004e8:	0018      	movs	r0, r3
 80004ea:	f002 fcf5 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 80004ee:	1e03      	subs	r3, r0, #0
 80004f0:	d001      	beq.n	80004f6 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80004f2:	f000 f9d3 	bl	800089c <Error_Handler>
  }
}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	46bd      	mov	sp, r7
 80004fa:	b019      	add	sp, #100	; 0x64
 80004fc:	bd90      	pop	{r4, r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	40021000 	.word	0x40021000

08000504 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b084      	sub	sp, #16
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800050a:	1d3b      	adds	r3, r7, #4
 800050c:	0018      	movs	r0, r3
 800050e:	230c      	movs	r3, #12
 8000510:	001a      	movs	r2, r3
 8000512:	2100      	movs	r1, #0
 8000514:	f003 fa66 	bl	80039e4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000518:	4b2d      	ldr	r3, [pc, #180]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800051a:	4a2e      	ldr	r2, [pc, #184]	; (80005d4 <MX_ADC1_Init+0xd0>)
 800051c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000520:	2280      	movs	r2, #128	; 0x80
 8000522:	05d2      	lsls	r2, r2, #23
 8000524:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000526:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052c:	4b28      	ldr	r3, [pc, #160]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800052e:	2200      	movs	r2, #0
 8000530:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000532:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000538:	4b25      	ldr	r3, [pc, #148]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800053a:	2204      	movs	r2, #4
 800053c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800053e:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000540:	2200      	movs	r2, #0
 8000542:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000544:	4b22      	ldr	r3, [pc, #136]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000546:	2200      	movs	r2, #0
 8000548:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800054a:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800054c:	2200      	movs	r2, #0
 800054e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000552:	2201      	movs	r2, #1
 8000554:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000558:	2220      	movs	r2, #32
 800055a:	2100      	movs	r1, #0
 800055c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800055e:	4b1c      	ldr	r3, [pc, #112]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000560:	2200      	movs	r2, #0
 8000562:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000566:	2200      	movs	r2, #0
 8000568:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800056a:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800056c:	222c      	movs	r2, #44	; 0x2c
 800056e:	2100      	movs	r1, #0
 8000570:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000572:	4b17      	ldr	r3, [pc, #92]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000574:	2200      	movs	r2, #0
 8000576:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000578:	4b15      	ldr	r3, [pc, #84]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800057a:	2200      	movs	r2, #0
 800057c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800057e:	4b14      	ldr	r3, [pc, #80]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000580:	2200      	movs	r2, #0
 8000582:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000584:	4b12      	ldr	r3, [pc, #72]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000586:	223c      	movs	r2, #60	; 0x3c
 8000588:	2100      	movs	r1, #0
 800058a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800058c:	4b10      	ldr	r3, [pc, #64]	; (80005d0 <MX_ADC1_Init+0xcc>)
 800058e:	2200      	movs	r2, #0
 8000590:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000592:	4b0f      	ldr	r3, [pc, #60]	; (80005d0 <MX_ADC1_Init+0xcc>)
 8000594:	0018      	movs	r0, r3
 8000596:	f001 f921 	bl	80017dc <HAL_ADC_Init>
 800059a:	1e03      	subs	r3, r0, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800059e:	f000 f97d 	bl	800089c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2201      	movs	r2, #1
 80005a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2200      	movs	r2, #0
 80005ac:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b4:	1d3a      	adds	r2, r7, #4
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <MX_ADC1_Init+0xcc>)
 80005b8:	0011      	movs	r1, r2
 80005ba:	0018      	movs	r0, r3
 80005bc:	f001 fae6 	bl	8001b8c <HAL_ADC_ConfigChannel>
 80005c0:	1e03      	subs	r3, r0, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80005c4:	f000 f96a 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c8:	46c0      	nop			; (mov r8, r8)
 80005ca:	46bd      	mov	sp, r7
 80005cc:	b004      	add	sp, #16
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000040 	.word	0x20000040
 80005d4:	40012400 	.word	0x40012400

080005d8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b086      	sub	sp, #24
 80005dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	0018      	movs	r0, r3
 80005e2:	2314      	movs	r3, #20
 80005e4:	001a      	movs	r2, r3
 80005e6:	2100      	movs	r1, #0
 80005e8:	f003 f9fc 	bl	80039e4 <memset>
  RTC_DateTypeDef sDate = {0};
 80005ec:	003b      	movs	r3, r7
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005f2:	4b33      	ldr	r3, [pc, #204]	; (80006c0 <MX_RTC_Init+0xe8>)
 80005f4:	4a33      	ldr	r2, [pc, #204]	; (80006c4 <MX_RTC_Init+0xec>)
 80005f6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80005f8:	4b31      	ldr	r3, [pc, #196]	; (80006c0 <MX_RTC_Init+0xe8>)
 80005fa:	2240      	movs	r2, #64	; 0x40
 80005fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 80005fe:	4b30      	ldr	r3, [pc, #192]	; (80006c0 <MX_RTC_Init+0xe8>)
 8000600:	227f      	movs	r2, #127	; 0x7f
 8000602:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000604:	4b2e      	ldr	r3, [pc, #184]	; (80006c0 <MX_RTC_Init+0xe8>)
 8000606:	22ff      	movs	r2, #255	; 0xff
 8000608:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800060a:	4b2d      	ldr	r3, [pc, #180]	; (80006c0 <MX_RTC_Init+0xe8>)
 800060c:	2200      	movs	r2, #0
 800060e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000610:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <MX_RTC_Init+0xe8>)
 8000612:	2200      	movs	r2, #0
 8000614:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000616:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <MX_RTC_Init+0xe8>)
 8000618:	2200      	movs	r2, #0
 800061a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800061c:	4b28      	ldr	r3, [pc, #160]	; (80006c0 <MX_RTC_Init+0xe8>)
 800061e:	2280      	movs	r2, #128	; 0x80
 8000620:	05d2      	lsls	r2, r2, #23
 8000622:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <MX_RTC_Init+0xe8>)
 8000626:	2200      	movs	r2, #0
 8000628:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800062a:	4b25      	ldr	r3, [pc, #148]	; (80006c0 <MX_RTC_Init+0xe8>)
 800062c:	0018      	movs	r0, r3
 800062e:	f002 fd87 	bl	8003140 <HAL_RTC_Init>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000636:	f000 f931 	bl	800089c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 12;
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	220c      	movs	r2, #12
 800063e:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 59;
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	223b      	movs	r2, #59	; 0x3b
 8000644:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	2200      	movs	r2, #0
 8000650:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000664:	1d39      	adds	r1, r7, #4
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_RTC_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	0018      	movs	r0, r3
 800066c:	f002 fdfe 	bl	800326c <HAL_RTC_SetTime>
 8000670:	1e03      	subs	r3, r0, #0
 8000672:	d001      	beq.n	8000678 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000674:	f000 f912 	bl	800089c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000678:	003b      	movs	r3, r7
 800067a:	2201      	movs	r2, #1
 800067c:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800067e:	003b      	movs	r3, r7
 8000680:	2201      	movs	r2, #1
 8000682:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 8000684:	003b      	movs	r3, r7
 8000686:	2201      	movs	r2, #1
 8000688:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 800068a:	003b      	movs	r3, r7
 800068c:	2200      	movs	r2, #0
 800068e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000690:	0039      	movs	r1, r7
 8000692:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MX_RTC_Init+0xe8>)
 8000694:	2200      	movs	r2, #0
 8000696:	0018      	movs	r0, r3
 8000698:	f002 feec 	bl	8003474 <HAL_RTC_SetDate>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 80006a0:	f000 f8fc 	bl	800089c <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 24390, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80006a4:	4908      	ldr	r1, [pc, #32]	; (80006c8 <MX_RTC_Init+0xf0>)
 80006a6:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <MX_RTC_Init+0xe8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	0018      	movs	r0, r3
 80006ac:	f003 f8b6 	bl	800381c <HAL_RTCEx_SetWakeUpTimer_IT>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_RTC_Init+0xe0>
  {
    Error_Handler();
 80006b4:	f000 f8f2 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b006      	add	sp, #24
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	200000ac 	.word	0x200000ac
 80006c4:	40002800 	.word	0x40002800
 80006c8:	00005f46 	.word	0x00005f46

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b08b      	sub	sp, #44	; 0x2c
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	2414      	movs	r4, #20
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	0018      	movs	r0, r3
 80006d8:	2314      	movs	r3, #20
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f003 f981 	bl	80039e4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b64      	ldr	r3, [pc, #400]	; (8000874 <MX_GPIO_Init+0x1a8>)
 80006e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e6:	4b63      	ldr	r3, [pc, #396]	; (8000874 <MX_GPIO_Init+0x1a8>)
 80006e8:	2104      	movs	r1, #4
 80006ea:	430a      	orrs	r2, r1
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
 80006ee:	4b61      	ldr	r3, [pc, #388]	; (8000874 <MX_GPIO_Init+0x1a8>)
 80006f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f2:	2204      	movs	r2, #4
 80006f4:	4013      	ands	r3, r2
 80006f6:	613b      	str	r3, [r7, #16]
 80006f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b5e      	ldr	r3, [pc, #376]	; (8000874 <MX_GPIO_Init+0x1a8>)
 80006fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006fe:	4b5d      	ldr	r3, [pc, #372]	; (8000874 <MX_GPIO_Init+0x1a8>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	635a      	str	r2, [r3, #52]	; 0x34
 8000706:	4b5b      	ldr	r3, [pc, #364]	; (8000874 <MX_GPIO_Init+0x1a8>)
 8000708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b58      	ldr	r3, [pc, #352]	; (8000874 <MX_GPIO_Init+0x1a8>)
 8000714:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000716:	4b57      	ldr	r3, [pc, #348]	; (8000874 <MX_GPIO_Init+0x1a8>)
 8000718:	2102      	movs	r1, #2
 800071a:	430a      	orrs	r2, r1
 800071c:	635a      	str	r2, [r3, #52]	; 0x34
 800071e:	4b55      	ldr	r3, [pc, #340]	; (8000874 <MX_GPIO_Init+0x1a8>)
 8000720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000722:	2202      	movs	r2, #2
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	4b52      	ldr	r3, [pc, #328]	; (8000874 <MX_GPIO_Init+0x1a8>)
 800072c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800072e:	4b51      	ldr	r3, [pc, #324]	; (8000874 <MX_GPIO_Init+0x1a8>)
 8000730:	2108      	movs	r1, #8
 8000732:	430a      	orrs	r2, r1
 8000734:	635a      	str	r2, [r3, #52]	; 0x34
 8000736:	4b4f      	ldr	r3, [pc, #316]	; (8000874 <MX_GPIO_Init+0x1a8>)
 8000738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800073a:	2208      	movs	r2, #8
 800073c:	4013      	ands	r3, r2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M23_Pin|H9_Pin|M22_Pin|M21_Pin
 8000742:	494d      	ldr	r1, [pc, #308]	; (8000878 <MX_GPIO_Init+0x1ac>)
 8000744:	4b4d      	ldr	r3, [pc, #308]	; (800087c <MX_GPIO_Init+0x1b0>)
 8000746:	2200      	movs	r2, #0
 8000748:	0018      	movs	r0, r3
 800074a:	f001 fe58 	bl	80023fe <HAL_GPIO_WritePin>
                          |M15_Pin|M14_Pin|M6_Pin|H2_Pin
                          |M0_Pin|M1_Pin|M24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, H8_Pin|M19_Pin|M18_Pin|H7_Pin
 800074e:	494c      	ldr	r1, [pc, #304]	; (8000880 <MX_GPIO_Init+0x1b4>)
 8000750:	23a0      	movs	r3, #160	; 0xa0
 8000752:	05db      	lsls	r3, r3, #23
 8000754:	2200      	movs	r2, #0
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fe51 	bl	80023fe <HAL_GPIO_WritePin>
                          |M17_Pin|M16_Pin|H6_Pin|H3_Pin
                          |M7_Pin|M4_Pin|M3_Pin|H1_Pin
                          |H0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M13_Pin|H5_Pin|M12_Pin|M11_Pin
 800075c:	4949      	ldr	r1, [pc, #292]	; (8000884 <MX_GPIO_Init+0x1b8>)
 800075e:	4b4a      	ldr	r3, [pc, #296]	; (8000888 <MX_GPIO_Init+0x1bc>)
 8000760:	2200      	movs	r2, #0
 8000762:	0018      	movs	r0, r3
 8000764:	f001 fe4b 	bl	80023fe <HAL_GPIO_WritePin>
                          |M10_Pin|H4_Pin|M9_Pin|M8_Pin
                          |H10_Pin|WORK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M5_Pin|M20_Pin|M2_Pin|M29_Pin
 8000768:	4948      	ldr	r1, [pc, #288]	; (800088c <MX_GPIO_Init+0x1c0>)
 800076a:	4b49      	ldr	r3, [pc, #292]	; (8000890 <MX_GPIO_Init+0x1c4>)
 800076c:	2200      	movs	r2, #0
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fe45 	bl	80023fe <HAL_GPIO_WritePin>
                          |M25_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : M23_Pin H9_Pin M22_Pin M21_Pin
                           M15_Pin M14_Pin M6_Pin H2_Pin
                           M0_Pin M1_Pin M24_Pin */
  GPIO_InitStruct.Pin = M23_Pin|H9_Pin|M22_Pin|M21_Pin
 8000774:	193b      	adds	r3, r7, r4
 8000776:	4a40      	ldr	r2, [pc, #256]	; (8000878 <MX_GPIO_Init+0x1ac>)
 8000778:	601a      	str	r2, [r3, #0]
                          |M15_Pin|M14_Pin|M6_Pin|H2_Pin
                          |M0_Pin|M1_Pin|M24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	193b      	adds	r3, r7, r4
 800077c:	2201      	movs	r2, #1
 800077e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	193b      	adds	r3, r7, r4
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2200      	movs	r2, #0
 800078a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800078c:	193b      	adds	r3, r7, r4
 800078e:	4a3b      	ldr	r2, [pc, #236]	; (800087c <MX_GPIO_Init+0x1b0>)
 8000790:	0019      	movs	r1, r3
 8000792:	0010      	movs	r0, r2
 8000794:	f001 fcb2 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_Pin */
  GPIO_InitStruct.Pin = TOUCH_Pin;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2202      	movs	r2, #2
 800079c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	4a3c      	ldr	r2, [pc, #240]	; (8000894 <MX_GPIO_Init+0x1c8>)
 80007a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TOUCH_GPIO_Port, &GPIO_InitStruct);
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	4a33      	ldr	r2, [pc, #204]	; (800087c <MX_GPIO_Init+0x1b0>)
 80007ae:	0019      	movs	r1, r3
 80007b0:	0010      	movs	r0, r2
 80007b2:	f001 fca3 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : H8_Pin M19_Pin M18_Pin H7_Pin
                           M17_Pin M16_Pin H6_Pin H3_Pin
                           M7_Pin M4_Pin M3_Pin H1_Pin
                           H0_Pin */
  GPIO_InitStruct.Pin = H8_Pin|M19_Pin|M18_Pin|H7_Pin
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	4a31      	ldr	r2, [pc, #196]	; (8000880 <MX_GPIO_Init+0x1b4>)
 80007ba:	601a      	str	r2, [r3, #0]
                          |M17_Pin|M16_Pin|H6_Pin|H3_Pin
                          |M7_Pin|M4_Pin|M3_Pin|H1_Pin
                          |H0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2201      	movs	r2, #1
 80007c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	193a      	adds	r2, r7, r4
 80007d0:	23a0      	movs	r3, #160	; 0xa0
 80007d2:	05db      	lsls	r3, r3, #23
 80007d4:	0011      	movs	r1, r2
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 fc90 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : M13_Pin H5_Pin M12_Pin M11_Pin
                           M10_Pin H4_Pin M9_Pin M8_Pin
                           H10_Pin WORK_Pin */
  GPIO_InitStruct.Pin = M13_Pin|H5_Pin|M12_Pin|M11_Pin
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	4a29      	ldr	r2, [pc, #164]	; (8000884 <MX_GPIO_Init+0x1b8>)
 80007e0:	601a      	str	r2, [r3, #0]
                          |M10_Pin|H4_Pin|M9_Pin|M8_Pin
                          |H10_Pin|WORK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	2201      	movs	r2, #1
 80007e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	193b      	adds	r3, r7, r4
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f4:	193b      	adds	r3, r7, r4
 80007f6:	4a24      	ldr	r2, [pc, #144]	; (8000888 <MX_GPIO_Init+0x1bc>)
 80007f8:	0019      	movs	r1, r3
 80007fa:	0010      	movs	r0, r2
 80007fc:	f001 fc7e 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_Pin */
  GPIO_InitStruct.Pin = SET_Pin;
 8000800:	0021      	movs	r1, r4
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	0212      	lsls	r2, r2, #8
 8000808:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800080a:	000c      	movs	r4, r1
 800080c:	193b      	adds	r3, r7, r4
 800080e:	4a22      	ldr	r2, [pc, #136]	; (8000898 <MX_GPIO_Init+0x1cc>)
 8000810:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000812:	193b      	adds	r3, r7, r4
 8000814:	2201      	movs	r2, #1
 8000816:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SET_GPIO_Port, &GPIO_InitStruct);
 8000818:	193b      	adds	r3, r7, r4
 800081a:	4a1b      	ldr	r2, [pc, #108]	; (8000888 <MX_GPIO_Init+0x1bc>)
 800081c:	0019      	movs	r1, r3
 800081e:	0010      	movs	r0, r2
 8000820:	f001 fc6c 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : M5_Pin M20_Pin M2_Pin M29_Pin
                           M28_Pin H11_Pin M27_Pin M26_Pin
                           M25_Pin */
  GPIO_InitStruct.Pin = M5_Pin|M20_Pin|M2_Pin|M29_Pin
 8000824:	0021      	movs	r1, r4
 8000826:	187b      	adds	r3, r7, r1
 8000828:	4a18      	ldr	r2, [pc, #96]	; (800088c <MX_GPIO_Init+0x1c0>)
 800082a:	601a      	str	r2, [r3, #0]
                          |M28_Pin|H11_Pin|M27_Pin|M26_Pin
                          |M25_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2201      	movs	r2, #1
 8000830:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800083e:	187b      	adds	r3, r7, r1
 8000840:	4a13      	ldr	r2, [pc, #76]	; (8000890 <MX_GPIO_Init+0x1c4>)
 8000842:	0019      	movs	r1, r3
 8000844:	0010      	movs	r0, r2
 8000846:	f001 fc59 	bl	80020fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2005      	movs	r0, #5
 8000850:	f001 fc22 	bl	8002098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000854:	2005      	movs	r0, #5
 8000856:	f001 fc34 	bl	80020c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2100      	movs	r1, #0
 800085e:	2007      	movs	r0, #7
 8000860:	f001 fc1a 	bl	8002098 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000864:	2007      	movs	r0, #7
 8000866:	f001 fc2c 	bl	80020c2 <HAL_NVIC_EnableIRQ>

}
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	46bd      	mov	sp, r7
 800086e:	b00b      	add	sp, #44	; 0x2c
 8000870:	bd90      	pop	{r4, r7, pc}
 8000872:	46c0      	nop			; (mov r8, r8)
 8000874:	40021000 	.word	0x40021000
 8000878:	00001ffc 	.word	0x00001ffc
 800087c:	50000800 	.word	0x50000800
 8000880:	00009ffe 	.word	0x00009ffe
 8000884:	00007c1f 	.word	0x00007c1f
 8000888:	50000400 	.word	0x50000400
 800088c:	0000037f 	.word	0x0000037f
 8000890:	50000c00 	.word	0x50000c00
 8000894:	10310000 	.word	0x10310000
 8000898:	10210000 	.word	0x10210000

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80008a4:	e7fe      	b.n	80008a4 <Error_Handler+0x8>
	...

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b2:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <HAL_MspInit+0x4c>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	430a      	orrs	r2, r1
 80008b8:	641a      	str	r2, [r3, #64]	; 0x40
 80008ba:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_MspInit+0x4c>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	2201      	movs	r2, #1
 80008c0:	4013      	ands	r3, r2
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_MspInit+0x4c>)
 80008c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008ca:	4b0a      	ldr	r3, [pc, #40]	; (80008f4 <HAL_MspInit+0x4c>)
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	0549      	lsls	r1, r1, #21
 80008d0:	430a      	orrs	r2, r1
 80008d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <HAL_MspInit+0x4c>)
 80008d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	055b      	lsls	r3, r3, #21
 80008dc:	4013      	ands	r3, r2
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008e2:	23c0      	movs	r3, #192	; 0xc0
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fe7a 	bl	80015e0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ec:	46c0      	nop			; (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b002      	add	sp, #8
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b08b      	sub	sp, #44	; 0x2c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	2414      	movs	r4, #20
 8000902:	193b      	adds	r3, r7, r4
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f003 f86a 	bl	80039e4 <memset>
  if(hadc->Instance==ADC1)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a18      	ldr	r2, [pc, #96]	; (8000978 <HAL_ADC_MspInit+0x80>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d129      	bne.n	800096e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <HAL_ADC_MspInit+0x84>)
 800091c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_ADC_MspInit+0x84>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0349      	lsls	r1, r1, #13
 8000924:	430a      	orrs	r2, r1
 8000926:	641a      	str	r2, [r3, #64]	; 0x40
 8000928:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_ADC_MspInit+0x84>)
 800092a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	035b      	lsls	r3, r3, #13
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_ADC_MspInit+0x84>)
 8000938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_ADC_MspInit+0x84>)
 800093c:	2101      	movs	r1, #1
 800093e:	430a      	orrs	r2, r1
 8000940:	635a      	str	r2, [r3, #52]	; 0x34
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_ADC_MspInit+0x84>)
 8000944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000946:	2201      	movs	r2, #1
 8000948:	4013      	ands	r3, r2
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = STATE_Pin;
 800094e:	193b      	adds	r3, r7, r4
 8000950:	2201      	movs	r2, #1
 8000952:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000954:	193b      	adds	r3, r7, r4
 8000956:	2203      	movs	r2, #3
 8000958:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	193b      	adds	r3, r7, r4
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(STATE_GPIO_Port, &GPIO_InitStruct);
 8000960:	193a      	adds	r2, r7, r4
 8000962:	23a0      	movs	r3, #160	; 0xa0
 8000964:	05db      	lsls	r3, r3, #23
 8000966:	0011      	movs	r1, r2
 8000968:	0018      	movs	r0, r3
 800096a:	f001 fbc7 	bl	80020fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b00b      	add	sp, #44	; 0x2c
 8000974:	bd90      	pop	{r4, r7, pc}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	40012400 	.word	0x40012400
 800097c:	40021000 	.word	0x40021000

08000980 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a11      	ldr	r2, [pc, #68]	; (80009d4 <HAL_RTC_MspInit+0x54>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d11c      	bne.n	80009cc <HAL_RTC_MspInit+0x4c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_RTC_MspInit+0x58>)
 8000994:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <HAL_RTC_MspInit+0x58>)
 8000998:	2180      	movs	r1, #128	; 0x80
 800099a:	0209      	lsls	r1, r1, #8
 800099c:	430a      	orrs	r2, r1
 800099e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80009a0:	4b0d      	ldr	r3, [pc, #52]	; (80009d8 <HAL_RTC_MspInit+0x58>)
 80009a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <HAL_RTC_MspInit+0x58>)
 80009a6:	2180      	movs	r1, #128	; 0x80
 80009a8:	00c9      	lsls	r1, r1, #3
 80009aa:	430a      	orrs	r2, r1
 80009ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_RTC_MspInit+0x58>)
 80009b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	4013      	ands	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 80009bc:	2200      	movs	r2, #0
 80009be:	2100      	movs	r1, #0
 80009c0:	2002      	movs	r0, #2
 80009c2:	f001 fb69 	bl	8002098 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 80009c6:	2002      	movs	r0, #2
 80009c8:	f001 fb7b 	bl	80020c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b004      	add	sp, #16
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	40002800 	.word	0x40002800
 80009d8:	40021000 	.word	0x40021000

080009dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <NMI_Handler+0x4>

080009e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <HardFault_Handler+0x4>

080009e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009ec:	46c0      	nop			; (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 fdae 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	46c0      	nop			; (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <RTC_TAMP_IRQHandler+0x14>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f002 ff9c 	bl	8003950 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	200000ac 	.word	0x200000ac

08000a24 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f001 fd05 	bl	8002438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f001 fcfb 	bl	8002438 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <SystemInit+0x14>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	0512      	lsls	r2, r2, #20
 8000a52:	609a      	str	r2, [r3, #8]
#endif
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a62:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a64:	f7ff fff0 	bl	8000a48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	; (8000aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <LoopForever+0xe>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	; (8000aac <LoopForever+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a8e:	f002 ff85 	bl	800399c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a92:	f7ff fbc1 	bl	8000218 <main>

08000a96 <LoopForever>:

LoopForever:
  b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   r0, =_estack
 8000a98:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000aa4:	08003afc 	.word	0x08003afc
  ldr r2, =_sbss
 8000aa8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000aac:	200000e4 	.word	0x200000e4

08000ab0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_IRQHandler>
	...

08000ab4 <displayShowTimeForce>:
 *      Author: bartosz
 */

#include "display.h"

void displayShowTimeForce(uint8_t hours, uint8_t minutes, uint8_t secondsFlag) {
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	0004      	movs	r4, r0
 8000abc:	0008      	movs	r0, r1
 8000abe:	0011      	movs	r1, r2
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	1c22      	adds	r2, r4, #0
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	1dbb      	adds	r3, r7, #6
 8000ac8:	1c02      	adds	r2, r0, #0
 8000aca:	701a      	strb	r2, [r3, #0]
 8000acc:	1d7b      	adds	r3, r7, #5
 8000ace:	1c0a      	adds	r2, r1, #0
 8000ad0:	701a      	strb	r2, [r3, #0]

//	displayTurnOff();

//turn on LEDs
	for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000ad2:	230f      	movs	r3, #15
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
 8000ada:	e00c      	b.n	8000af6 <displayShowTimeForce+0x42>
		displayTurnMinutesLED(i, 1);
 8000adc:	240f      	movs	r4, #15
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f000 fa77 	bl	8000fd8 <displayTurnMinutesLED>
	for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000aea:	0021      	movs	r1, r4
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	3201      	adds	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	1dbb      	adds	r3, r7, #6
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	085b      	lsrs	r3, r3, #1
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	220f      	movs	r2, #15
 8000b00:	18ba      	adds	r2, r7, r2
 8000b02:	7812      	ldrb	r2, [r2, #0]
 8000b04:	429a      	cmp	r2, r3
 8000b06:	d9e9      	bls.n	8000adc <displayShowTimeForce+0x28>
	}
//turn off unused
	for (uint8_t i = minutes / 2 + 1; i < 59; i++) {
 8000b08:	1dbb      	adds	r3, r7, #6
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	085b      	lsrs	r3, r3, #1
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	230e      	movs	r3, #14
 8000b12:	18fb      	adds	r3, r7, r3
 8000b14:	3201      	adds	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
 8000b18:	e00c      	b.n	8000b34 <displayShowTimeForce+0x80>
		displayTurnMinutesLED(i, 0);
 8000b1a:	240e      	movs	r4, #14
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2100      	movs	r1, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f000 fa58 	bl	8000fd8 <displayTurnMinutesLED>
	for (uint8_t i = minutes / 2 + 1; i < 59; i++) {
 8000b28:	0021      	movs	r1, r4
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	187b      	adds	r3, r7, r1
 8000b30:	3201      	adds	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
 8000b34:	230e      	movs	r3, #14
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b3a      	cmp	r3, #58	; 0x3a
 8000b3c:	d9ed      	bls.n	8000b1a <displayShowTimeForce+0x66>
	}

	if (minutes == 0) {
 8000b3e:	1dbb      	adds	r3, r7, #6
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d104      	bne.n	8000b50 <displayShowTimeForce+0x9c>
		displayTurnMinutesLED(0, 1);
 8000b46:	2101      	movs	r1, #1
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f000 fa45 	bl	8000fd8 <displayTurnMinutesLED>
 8000b4e:	e003      	b.n	8000b58 <displayShowTimeForce+0xa4>
	} else {
		displayTurnMinutesLED(0, 0);
 8000b50:	2100      	movs	r1, #0
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 fa40 	bl	8000fd8 <displayTurnMinutesLED>
	}

//turn off/on parity LED
	if (minutes % 2 == 1) {
 8000b58:	1dbb      	adds	r3, r7, #6
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	4013      	ands	r3, r2
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d006      	beq.n	8000b74 <displayShowTimeForce+0xc0>
		HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 8000b66:	4b36      	ldr	r3, [pc, #216]	; (8000c40 <displayShowTimeForce+0x18c>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f001 fc46 	bl	80023fe <HAL_GPIO_WritePin>
 8000b72:	e005      	b.n	8000b80 <displayShowTimeForce+0xcc>
	} else {
		HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 8000b74:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <displayShowTimeForce+0x18c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	2110      	movs	r1, #16
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 fc3f 	bl	80023fe <HAL_GPIO_WritePin>
	}

	if (secondsFlag == 0) {
 8000b80:	1d7b      	adds	r3, r7, #5
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d13f      	bne.n	8000c08 <displayShowTimeForce+0x154>
		for (uint8_t i = 1; i < hours + 1; i++) {
 8000b88:	230d      	movs	r3, #13
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e00c      	b.n	8000bac <displayShowTimeForce+0xf8>
			displayTurnHoursLED(i, 1);
 8000b92:	240d      	movs	r4, #13
 8000b94:	193b      	adds	r3, r7, r4
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2101      	movs	r1, #1
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f000 f992 	bl	8000ec4 <displayTurnHoursLED>
		for (uint8_t i = 1; i < hours + 1; i++) {
 8000ba0:	0021      	movs	r1, r4
 8000ba2:	187b      	adds	r3, r7, r1
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	3201      	adds	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	1dfa      	adds	r2, r7, #7
 8000bae:	230d      	movs	r3, #13
 8000bb0:	18fb      	adds	r3, r7, r3
 8000bb2:	7812      	ldrb	r2, [r2, #0]
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	d2eb      	bcs.n	8000b92 <displayShowTimeForce+0xde>
		}

		if (hours == 0) {
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d104      	bne.n	8000bcc <displayShowTimeForce+0x118>
			displayTurnHoursLED(0, 1);
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	2000      	movs	r0, #0
 8000bc6:	f000 f97d 	bl	8000ec4 <displayTurnHoursLED>
 8000bca:	e003      	b.n	8000bd4 <displayShowTimeForce+0x120>
		} else {
			displayTurnHoursLED(0, 0);
 8000bcc:	2100      	movs	r1, #0
 8000bce:	2000      	movs	r0, #0
 8000bd0:	f000 f978 	bl	8000ec4 <displayTurnHoursLED>
		}

		for (uint8_t i = hours + 1; i < 11; i++) {
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	1dfa      	adds	r2, r7, #7
 8000bda:	7812      	ldrb	r2, [r2, #0]
 8000bdc:	3201      	adds	r2, #1
 8000bde:	701a      	strb	r2, [r3, #0]
 8000be0:	e00c      	b.n	8000bfc <displayShowTimeForce+0x148>
			displayTurnHoursLED(i, 0);
 8000be2:	240c      	movs	r4, #12
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2100      	movs	r1, #0
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 f96a 	bl	8000ec4 <displayTurnHoursLED>
		for (uint8_t i = hours + 1; i < 11; i++) {
 8000bf0:	0021      	movs	r1, r4
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	781a      	ldrb	r2, [r3, #0]
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	3201      	adds	r2, #1
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	230c      	movs	r3, #12
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b0a      	cmp	r3, #10
 8000c04:	d9ed      	bls.n	8000be2 <displayShowTimeForce+0x12e>
		for (uint8_t i = 0; i < 12; i++) {
			displayTurnHoursLED(i, 0);
		}
	}

}
 8000c06:	e016      	b.n	8000c36 <displayShowTimeForce+0x182>
		for (uint8_t i = 0; i < 12; i++) {
 8000c08:	230b      	movs	r3, #11
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	e00c      	b.n	8000c2c <displayShowTimeForce+0x178>
			displayTurnHoursLED(i, 0);
 8000c12:	240b      	movs	r4, #11
 8000c14:	193b      	adds	r3, r7, r4
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2100      	movs	r1, #0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 f952 	bl	8000ec4 <displayTurnHoursLED>
		for (uint8_t i = 0; i < 12; i++) {
 8000c20:	0021      	movs	r1, r4
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	781a      	ldrb	r2, [r3, #0]
 8000c26:	187b      	adds	r3, r7, r1
 8000c28:	3201      	adds	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
 8000c2c:	230b      	movs	r3, #11
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b0b      	cmp	r3, #11
 8000c34:	d9ed      	bls.n	8000c12 <displayShowTimeForce+0x15e>
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b005      	add	sp, #20
 8000c3c:	bd90      	pop	{r4, r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	50000400 	.word	0x50000400

08000c44 <displayTurnOff>:

void displayTurnOff(void) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 60; i++) {
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
 8000c50:	e00a      	b.n	8000c68 <displayTurnOff+0x24>
		displayTurnMinutesLED(i, 0);
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2100      	movs	r1, #0
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 f9bd 	bl	8000fd8 <displayTurnMinutesLED>
	for (uint8_t i = 0; i < 60; i++) {
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781a      	ldrb	r2, [r3, #0]
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	3201      	adds	r2, #1
 8000c66:	701a      	strb	r2, [r3, #0]
 8000c68:	1dfb      	adds	r3, r7, #7
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b3b      	cmp	r3, #59	; 0x3b
 8000c6e:	d9f0      	bls.n	8000c52 <displayTurnOff+0xe>
	}
	for (uint8_t i = 0; i < 12; i++) {
 8000c70:	1dbb      	adds	r3, r7, #6
 8000c72:	2200      	movs	r2, #0
 8000c74:	701a      	strb	r2, [r3, #0]
 8000c76:	e00a      	b.n	8000c8e <displayTurnOff+0x4a>
		displayTurnHoursLED(i, 0);
 8000c78:	1dbb      	adds	r3, r7, #6
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 f920 	bl	8000ec4 <displayTurnHoursLED>
	for (uint8_t i = 0; i < 12; i++) {
 8000c84:	1dbb      	adds	r3, r7, #6
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	1dbb      	adds	r3, r7, #6
 8000c8a:	3201      	adds	r2, #1
 8000c8c:	701a      	strb	r2, [r3, #0]
 8000c8e:	1dbb      	adds	r3, r7, #6
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b0b      	cmp	r3, #11
 8000c94:	d9f0      	bls.n	8000c78 <displayTurnOff+0x34>
	}
}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	46c0      	nop			; (mov r8, r8)
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <displayShowTime>:

void displayShowTime(uint8_t hours, uint8_t minutes, uint8_t timeH,
		uint8_t timeM) {
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b084      	sub	sp, #16
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	0005      	movs	r5, r0
 8000ca8:	000c      	movs	r4, r1
 8000caa:	0010      	movs	r0, r2
 8000cac:	0019      	movs	r1, r3
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	1c2a      	adds	r2, r5, #0
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	1dbb      	adds	r3, r7, #6
 8000cb6:	1c22      	adds	r2, r4, #0
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	1d7b      	adds	r3, r7, #5
 8000cbc:	1c02      	adds	r2, r0, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	1c0a      	adds	r2, r1, #0
 8000cc4:	701a      	strb	r2, [r3, #0]

	displaySplashMinutes(4);
 8000cc6:	2004      	movs	r0, #4
 8000cc8:	f000 f8ba 	bl	8000e40 <displaySplashMinutes>

	for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000ccc:	230f      	movs	r3, #15
 8000cce:	18fb      	adds	r3, r7, r3
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	701a      	strb	r2, [r3, #0]
 8000cd4:	e010      	b.n	8000cf8 <displayShowTime+0x58>
		displayTurnMinutesLED(i, 1);
 8000cd6:	240f      	movs	r4, #15
 8000cd8:	193b      	adds	r3, r7, r4
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2101      	movs	r1, #1
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f000 f97a 	bl	8000fd8 <displayTurnMinutesLED>
		HAL_Delay(timeM);
 8000ce4:	1d3b      	adds	r3, r7, #4
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f000 fc55 	bl	8001598 <HAL_Delay>
	for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	193b      	adds	r3, r7, r4
 8000cf4:	3201      	adds	r2, #1
 8000cf6:	701a      	strb	r2, [r3, #0]
 8000cf8:	1dbb      	adds	r3, r7, #6
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	085b      	lsrs	r3, r3, #1
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	220f      	movs	r2, #15
 8000d02:	18ba      	adds	r2, r7, r2
 8000d04:	7812      	ldrb	r2, [r2, #0]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	d9e5      	bls.n	8000cd6 <displayShowTime+0x36>
	}

	if (minutes == 0) {
 8000d0a:	1dbb      	adds	r3, r7, #6
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d104      	bne.n	8000d1c <displayShowTime+0x7c>
		displayTurnMinutesLED(0, 1);
 8000d12:	2101      	movs	r1, #1
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 f95f 	bl	8000fd8 <displayTurnMinutesLED>
 8000d1a:	e003      	b.n	8000d24 <displayShowTime+0x84>
	} else {
		displayTurnMinutesLED(0, 0);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 f95a 	bl	8000fd8 <displayTurnMinutesLED>
	}

	if (minutes % 2 == 1) {
 8000d24:	1dbb      	adds	r3, r7, #6
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d005      	beq.n	8000d3e <displayShowTime+0x9e>
		HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 8000d32:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <displayShowTime+0x198>)
 8000d34:	2201      	movs	r2, #1
 8000d36:	2110      	movs	r1, #16
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f001 fb60 	bl	80023fe <HAL_GPIO_WritePin>
	}

//	displaySplashHours(10);

	for (uint8_t i = 1; i < hours + 1; i++) {
 8000d3e:	230e      	movs	r3, #14
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	2201      	movs	r2, #1
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	e010      	b.n	8000d6a <displayShowTime+0xca>
		displayTurnHoursLED(i, 1);
 8000d48:	240e      	movs	r4, #14
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	2101      	movs	r1, #1
 8000d50:	0018      	movs	r0, r3
 8000d52:	f000 f8b7 	bl	8000ec4 <displayTurnHoursLED>
		HAL_Delay(timeH);
 8000d56:	1d7b      	adds	r3, r7, #5
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f000 fc1c 	bl	8001598 <HAL_Delay>
	for (uint8_t i = 1; i < hours + 1; i++) {
 8000d60:	193b      	adds	r3, r7, r4
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	3201      	adds	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
 8000d6a:	1dfa      	adds	r2, r7, #7
 8000d6c:	230e      	movs	r3, #14
 8000d6e:	18fb      	adds	r3, r7, r3
 8000d70:	7812      	ldrb	r2, [r2, #0]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d2e7      	bcs.n	8000d48 <displayShowTime+0xa8>
	}

	if (hours == 0) {
 8000d78:	1dfb      	adds	r3, r7, #7
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d104      	bne.n	8000d8a <displayShowTime+0xea>
		displayTurnHoursLED(0, 1);
 8000d80:	2101      	movs	r1, #1
 8000d82:	2000      	movs	r0, #0
 8000d84:	f000 f89e 	bl	8000ec4 <displayTurnHoursLED>
 8000d88:	e003      	b.n	8000d92 <displayShowTime+0xf2>
	} else {
		displayTurnHoursLED(0, 0);
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 f899 	bl	8000ec4 <displayTurnHoursLED>
	}

	HAL_Delay(1200);
 8000d92:	2396      	movs	r3, #150	; 0x96
 8000d94:	00db      	lsls	r3, r3, #3
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 fbfe 	bl	8001598 <HAL_Delay>

	if (mode != MODE_FORCE) {
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <displayShowTime+0x19c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	2b05      	cmp	r3, #5
 8000da4:	d043      	beq.n	8000e2e <displayShowTime+0x18e>
		for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000da6:	230d      	movs	r3, #13
 8000da8:	18fb      	adds	r3, r7, r3
 8000daa:	2201      	movs	r2, #1
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e010      	b.n	8000dd2 <displayShowTime+0x132>
			displayTurnMinutesLED(i, 0);
 8000db0:	240d      	movs	r4, #13
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	2100      	movs	r1, #0
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 f90d 	bl	8000fd8 <displayTurnMinutesLED>
			HAL_Delay(timeM);
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f000 fbe8 	bl	8001598 <HAL_Delay>
		for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000dc8:	193b      	adds	r3, r7, r4
 8000dca:	781a      	ldrb	r2, [r3, #0]
 8000dcc:	193b      	adds	r3, r7, r4
 8000dce:	3201      	adds	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
 8000dd2:	1dbb      	adds	r3, r7, #6
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	085b      	lsrs	r3, r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	220d      	movs	r2, #13
 8000ddc:	18ba      	adds	r2, r7, r2
 8000dde:	7812      	ldrb	r2, [r2, #0]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d9e5      	bls.n	8000db0 <displayShowTime+0x110>
		}

		for (uint8_t i = 1; i < hours + 1; i++) {
 8000de4:	230c      	movs	r3, #12
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	e010      	b.n	8000e10 <displayShowTime+0x170>
			displayTurnHoursLED(i, 0);
 8000dee:	240c      	movs	r4, #12
 8000df0:	193b      	adds	r3, r7, r4
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2100      	movs	r1, #0
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 f864 	bl	8000ec4 <displayTurnHoursLED>
			HAL_Delay(timeH);
 8000dfc:	1d7b      	adds	r3, r7, #5
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	0018      	movs	r0, r3
 8000e02:	f000 fbc9 	bl	8001598 <HAL_Delay>
		for (uint8_t i = 1; i < hours + 1; i++) {
 8000e06:	193b      	adds	r3, r7, r4
 8000e08:	781a      	ldrb	r2, [r3, #0]
 8000e0a:	193b      	adds	r3, r7, r4
 8000e0c:	3201      	adds	r2, #1
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	1dfa      	adds	r2, r7, #7
 8000e12:	230c      	movs	r3, #12
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	7812      	ldrb	r2, [r2, #0]
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	d2e7      	bcs.n	8000dee <displayShowTime+0x14e>
		}

		displayTurnOff();
 8000e1e:	f7ff ff11 	bl	8000c44 <displayTurnOff>
		HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 8000e22:	4b05      	ldr	r3, [pc, #20]	; (8000e38 <displayShowTime+0x198>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 fae8 	bl	80023fe <HAL_GPIO_WritePin>
	}

}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b004      	add	sp, #16
 8000e34:	bdb0      	pop	{r4, r5, r7, pc}
 8000e36:	46c0      	nop			; (mov r8, r8)
 8000e38:	50000400 	.word	0x50000400
 8000e3c:	200000a4 	.word	0x200000a4

08000e40 <displaySplashMinutes>:

void displaySplashMinutes(uint8_t time) {
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	0002      	movs	r2, r0
 8000e48:	1dfb      	adds	r3, r7, #7
 8000e4a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 30; i++) {
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e010      	b.n	8000e78 <displaySplashMinutes+0x38>
		displayTurnMinutesLED(i, 1);
 8000e56:	240f      	movs	r4, #15
 8000e58:	193b      	adds	r3, r7, r4
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	0018      	movs	r0, r3
 8000e60:	f000 f8ba 	bl	8000fd8 <displayTurnMinutesLED>
		HAL_Delay(time);
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f000 fb95 	bl	8001598 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++) {
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	781a      	ldrb	r2, [r3, #0]
 8000e72:	193b      	adds	r3, r7, r4
 8000e74:	3201      	adds	r2, #1
 8000e76:	701a      	strb	r2, [r3, #0]
 8000e78:	230f      	movs	r3, #15
 8000e7a:	18fb      	adds	r3, r7, r3
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2b1d      	cmp	r3, #29
 8000e80:	d9e9      	bls.n	8000e56 <displaySplashMinutes+0x16>
	}

	for (uint8_t i = 0; i < 30; i++) {
 8000e82:	230e      	movs	r3, #14
 8000e84:	18fb      	adds	r3, r7, r3
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
 8000e8a:	e010      	b.n	8000eae <displaySplashMinutes+0x6e>
		displayTurnMinutesLED(i, 0);
 8000e8c:	240e      	movs	r4, #14
 8000e8e:	193b      	adds	r3, r7, r4
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2100      	movs	r1, #0
 8000e94:	0018      	movs	r0, r3
 8000e96:	f000 f89f 	bl	8000fd8 <displayTurnMinutesLED>
		HAL_Delay(time);
 8000e9a:	1dfb      	adds	r3, r7, #7
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f000 fb7a 	bl	8001598 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++) {
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	193b      	adds	r3, r7, r4
 8000eaa:	3201      	adds	r2, #1
 8000eac:	701a      	strb	r2, [r3, #0]
 8000eae:	230e      	movs	r3, #14
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b1d      	cmp	r3, #29
 8000eb6:	d9e9      	bls.n	8000e8c <displaySplashMinutes+0x4c>
	}
}
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b005      	add	sp, #20
 8000ec0:	bd90      	pop	{r4, r7, pc}
	...

08000ec4 <displayTurnHoursLED>:
		displayTurnHoursLED(i, 0);
		HAL_Delay(time);
	}
}

void displayTurnHoursLED(uint8_t led, uint8_t state) {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	0002      	movs	r2, r0
 8000ecc:	1dfb      	adds	r3, r7, #7
 8000ece:	701a      	strb	r2, [r3, #0]
 8000ed0:	1dbb      	adds	r3, r7, #6
 8000ed2:	1c0a      	adds	r2, r1, #0
 8000ed4:	701a      	strb	r2, [r3, #0]

	switch (led) {
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b0b      	cmp	r3, #11
 8000edc:	d86f      	bhi.n	8000fbe <displayTurnHoursLED+0xfa>
 8000ede:	009a      	lsls	r2, r3, #2
 8000ee0:	4b39      	ldr	r3, [pc, #228]	; (8000fc8 <displayTurnHoursLED+0x104>)
 8000ee2:	18d3      	adds	r3, r2, r3
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	469f      	mov	pc, r3

	case 0:
		HAL_GPIO_WritePin(H0_GPIO_Port, H0_Pin, state);
 8000ee8:	1dbb      	adds	r3, r7, #6
 8000eea:	781a      	ldrb	r2, [r3, #0]
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	0219      	lsls	r1, r3, #8
 8000ef0:	23a0      	movs	r3, #160	; 0xa0
 8000ef2:	05db      	lsls	r3, r3, #23
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f001 fa82 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8000efa:	e060      	b.n	8000fbe <displayTurnHoursLED+0xfa>
	case 1:
		HAL_GPIO_WritePin(H1_GPIO_Port, H1_Pin, state);
 8000efc:	1dbb      	adds	r3, r7, #6
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	0159      	lsls	r1, r3, #5
 8000f04:	23a0      	movs	r3, #160	; 0xa0
 8000f06:	05db      	lsls	r3, r3, #23
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f001 fa78 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8000f0e:	e056      	b.n	8000fbe <displayTurnHoursLED+0xfa>
	case 2:
		HAL_GPIO_WritePin(H2_GPIO_Port, H2_Pin, state);
 8000f10:	1dbb      	adds	r3, r7, #6
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	482d      	ldr	r0, [pc, #180]	; (8000fcc <displayTurnHoursLED+0x108>)
 8000f16:	001a      	movs	r2, r3
 8000f18:	2180      	movs	r1, #128	; 0x80
 8000f1a:	f001 fa70 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8000f1e:	e04e      	b.n	8000fbe <displayTurnHoursLED+0xfa>
	case 3:
		HAL_GPIO_WritePin(H3_GPIO_Port, H3_Pin, state);
 8000f20:	1dbb      	adds	r3, r7, #6
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	0059      	lsls	r1, r3, #1
 8000f28:	23a0      	movs	r3, #160	; 0xa0
 8000f2a:	05db      	lsls	r3, r3, #23
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f001 fa66 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8000f32:	e044      	b.n	8000fbe <displayTurnHoursLED+0xfa>
	case 4:
		HAL_GPIO_WritePin(H4_GPIO_Port, H4_Pin, state);
 8000f34:	1dbb      	adds	r3, r7, #6
 8000f36:	781a      	ldrb	r2, [r3, #0]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	015b      	lsls	r3, r3, #5
 8000f3c:	4824      	ldr	r0, [pc, #144]	; (8000fd0 <displayTurnHoursLED+0x10c>)
 8000f3e:	0019      	movs	r1, r3
 8000f40:	f001 fa5d 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8000f44:	e03b      	b.n	8000fbe <displayTurnHoursLED+0xfa>
	case 5:
		HAL_GPIO_WritePin(H5_GPIO_Port, H5_Pin, state);
 8000f46:	1dbb      	adds	r3, r7, #6
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	4821      	ldr	r0, [pc, #132]	; (8000fd0 <displayTurnHoursLED+0x10c>)
 8000f4c:	001a      	movs	r2, r3
 8000f4e:	2102      	movs	r1, #2
 8000f50:	f001 fa55 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8000f54:	e033      	b.n	8000fbe <displayTurnHoursLED+0xfa>
	case 6:
		HAL_GPIO_WritePin(H6_GPIO_Port, H6_Pin, state);
 8000f56:	1dbb      	adds	r3, r7, #6
 8000f58:	781a      	ldrb	r2, [r3, #0]
 8000f5a:	23a0      	movs	r3, #160	; 0xa0
 8000f5c:	05db      	lsls	r3, r3, #23
 8000f5e:	2180      	movs	r1, #128	; 0x80
 8000f60:	0018      	movs	r0, r3
 8000f62:	f001 fa4c 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8000f66:	e02a      	b.n	8000fbe <displayTurnHoursLED+0xfa>
	case 7:
		HAL_GPIO_WritePin(H7_GPIO_Port, H7_Pin, state);
 8000f68:	1dbb      	adds	r3, r7, #6
 8000f6a:	781a      	ldrb	r2, [r3, #0]
 8000f6c:	23a0      	movs	r3, #160	; 0xa0
 8000f6e:	05db      	lsls	r3, r3, #23
 8000f70:	2110      	movs	r1, #16
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 fa43 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8000f78:	e021      	b.n	8000fbe <displayTurnHoursLED+0xfa>
	case 8:
		HAL_GPIO_WritePin(H8_GPIO_Port, H8_Pin, state);
 8000f7a:	1dbb      	adds	r3, r7, #6
 8000f7c:	781a      	ldrb	r2, [r3, #0]
 8000f7e:	23a0      	movs	r3, #160	; 0xa0
 8000f80:	05db      	lsls	r3, r3, #23
 8000f82:	2102      	movs	r1, #2
 8000f84:	0018      	movs	r0, r3
 8000f86:	f001 fa3a 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8000f8a:	e018      	b.n	8000fbe <displayTurnHoursLED+0xfa>
	case 9:
		HAL_GPIO_WritePin(H9_GPIO_Port, H9_Pin, state);
 8000f8c:	1dbb      	adds	r3, r7, #6
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	015b      	lsls	r3, r3, #5
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <displayTurnHoursLED+0x108>)
 8000f96:	0019      	movs	r1, r3
 8000f98:	f001 fa31 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8000f9c:	e00f      	b.n	8000fbe <displayTurnHoursLED+0xfa>
	case 10:
		HAL_GPIO_WritePin(H10_GPIO_Port, H10_Pin, state);
 8000f9e:	1dbb      	adds	r3, r7, #6
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <displayTurnHoursLED+0x10c>)
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	2108      	movs	r1, #8
 8000fa8:	f001 fa29 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8000fac:	e007      	b.n	8000fbe <displayTurnHoursLED+0xfa>
	case 11:
		HAL_GPIO_WritePin(H11_GPIO_Port, H11_Pin, state);
 8000fae:	1dbb      	adds	r3, r7, #6
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <displayTurnHoursLED+0x110>)
 8000fb4:	001a      	movs	r2, r3
 8000fb6:	2108      	movs	r1, #8
 8000fb8:	f001 fa21 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8000fbc:	46c0      	nop			; (mov r8, r8)

	}

}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b002      	add	sp, #8
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	08003a4c 	.word	0x08003a4c
 8000fcc:	50000800 	.word	0x50000800
 8000fd0:	50000400 	.word	0x50000400
 8000fd4:	50000c00 	.word	0x50000c00

08000fd8 <displayTurnMinutesLED>:

void displayTurnMinutesLED(uint8_t led, uint8_t state) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	701a      	strb	r2, [r3, #0]
 8000fe4:	1dbb      	adds	r3, r7, #6
 8000fe6:	1c0a      	adds	r2, r1, #0
 8000fe8:	701a      	strb	r2, [r3, #0]

	switch (led) {
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	2b1d      	cmp	r3, #29
 8000ff0:	d900      	bls.n	8000ff4 <displayTurnMinutesLED+0x1c>
 8000ff2:	e108      	b.n	8001206 <displayTurnMinutesLED+0x22e>
 8000ff4:	009a      	lsls	r2, r3, #2
 8000ff6:	4b86      	ldr	r3, [pc, #536]	; (8001210 <displayTurnMinutesLED+0x238>)
 8000ff8:	18d3      	adds	r3, r2, r3
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	469f      	mov	pc, r3

	case 0:
		HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, state);
 8000ffe:	1dbb      	adds	r3, r7, #6
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	2380      	movs	r3, #128	; 0x80
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4883      	ldr	r0, [pc, #524]	; (8001214 <displayTurnMinutesLED+0x23c>)
 8001008:	0019      	movs	r1, r3
 800100a:	f001 f9f8 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 800100e:	e0fa      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 1:
		HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, state);
 8001010:	1dbb      	adds	r3, r7, #6
 8001012:	781a      	ldrb	r2, [r3, #0]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	487e      	ldr	r0, [pc, #504]	; (8001214 <displayTurnMinutesLED+0x23c>)
 800101a:	0019      	movs	r1, r3
 800101c:	f001 f9ef 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8001020:	e0f1      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 2:
		HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, state);
 8001022:	1dbb      	adds	r3, r7, #6
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	487c      	ldr	r0, [pc, #496]	; (8001218 <displayTurnMinutesLED+0x240>)
 8001028:	001a      	movs	r2, r3
 800102a:	2101      	movs	r1, #1
 800102c:	f001 f9e7 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8001030:	e0e9      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 3:
		HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin, state);
 8001032:	1dbb      	adds	r3, r7, #6
 8001034:	781a      	ldrb	r2, [r3, #0]
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	0119      	lsls	r1, r3, #4
 800103a:	23a0      	movs	r3, #160	; 0xa0
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	0018      	movs	r0, r3
 8001040:	f001 f9dd 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8001044:	e0df      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 4:
		HAL_GPIO_WritePin(M4_GPIO_Port, M4_Pin, state);
 8001046:	1dbb      	adds	r3, r7, #6
 8001048:	781a      	ldrb	r2, [r3, #0]
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	00d9      	lsls	r1, r3, #3
 800104e:	23a0      	movs	r3, #160	; 0xa0
 8001050:	05db      	lsls	r3, r3, #23
 8001052:	0018      	movs	r0, r3
 8001054:	f001 f9d3 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8001058:	e0d5      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 5:
		HAL_GPIO_WritePin(M5_GPIO_Port, M5_Pin, state);
 800105a:	1dbb      	adds	r3, r7, #6
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	486d      	ldr	r0, [pc, #436]	; (8001218 <displayTurnMinutesLED+0x240>)
 8001064:	0019      	movs	r1, r3
 8001066:	f001 f9ca 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 800106a:	e0cc      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 6:
		HAL_GPIO_WritePin(M6_GPIO_Port, M6_Pin, state);
 800106c:	1dbb      	adds	r3, r7, #6
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4868      	ldr	r0, [pc, #416]	; (8001214 <displayTurnMinutesLED+0x23c>)
 8001072:	001a      	movs	r2, r3
 8001074:	2140      	movs	r1, #64	; 0x40
 8001076:	f001 f9c2 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 800107a:	e0c4      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 7:
		HAL_GPIO_WritePin(M7_GPIO_Port, M7_Pin, state);
 800107c:	1dbb      	adds	r3, r7, #6
 800107e:	781a      	ldrb	r2, [r3, #0]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	0099      	lsls	r1, r3, #2
 8001084:	23a0      	movs	r3, #160	; 0xa0
 8001086:	05db      	lsls	r3, r3, #23
 8001088:	0018      	movs	r0, r3
 800108a:	f001 f9b8 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 800108e:	e0ba      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 8:
		HAL_GPIO_WritePin(M8_GPIO_Port, M8_Pin, state);
 8001090:	1dbb      	adds	r3, r7, #6
 8001092:	781a      	ldrb	r2, [r3, #0]
 8001094:	2380      	movs	r3, #128	; 0x80
 8001096:	01db      	lsls	r3, r3, #7
 8001098:	4860      	ldr	r0, [pc, #384]	; (800121c <displayTurnMinutesLED+0x244>)
 800109a:	0019      	movs	r1, r3
 800109c:	f001 f9af 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 80010a0:	e0b1      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 9:
		HAL_GPIO_WritePin(M9_GPIO_Port, M9_Pin, state);
 80010a2:	1dbb      	adds	r3, r7, #6
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	019b      	lsls	r3, r3, #6
 80010aa:	485c      	ldr	r0, [pc, #368]	; (800121c <displayTurnMinutesLED+0x244>)
 80010ac:	0019      	movs	r1, r3
 80010ae:	f001 f9a6 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 80010b2:	e0a8      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 10:
		HAL_GPIO_WritePin(M10_GPIO_Port, M10_Pin, state);
 80010b4:	1dbb      	adds	r3, r7, #6
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	011b      	lsls	r3, r3, #4
 80010bc:	4857      	ldr	r0, [pc, #348]	; (800121c <displayTurnMinutesLED+0x244>)
 80010be:	0019      	movs	r1, r3
 80010c0:	f001 f99d 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 80010c4:	e09f      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 11:
		HAL_GPIO_WritePin(M11_GPIO_Port, M11_Pin, state);
 80010c6:	1dbb      	adds	r3, r7, #6
 80010c8:	781a      	ldrb	r2, [r3, #0]
 80010ca:	2380      	movs	r3, #128	; 0x80
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	4853      	ldr	r0, [pc, #332]	; (800121c <displayTurnMinutesLED+0x244>)
 80010d0:	0019      	movs	r1, r3
 80010d2:	f001 f994 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 80010d6:	e096      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 12:
		HAL_GPIO_WritePin(M12_GPIO_Port, M12_Pin, state);
 80010d8:	1dbb      	adds	r3, r7, #6
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	484f      	ldr	r0, [pc, #316]	; (800121c <displayTurnMinutesLED+0x244>)
 80010de:	001a      	movs	r2, r3
 80010e0:	2104      	movs	r1, #4
 80010e2:	f001 f98c 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 80010e6:	e08e      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 13:
		HAL_GPIO_WritePin(M13_GPIO_Port, M13_Pin, state);
 80010e8:	1dbb      	adds	r3, r7, #6
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	484b      	ldr	r0, [pc, #300]	; (800121c <displayTurnMinutesLED+0x244>)
 80010ee:	001a      	movs	r2, r3
 80010f0:	2101      	movs	r1, #1
 80010f2:	f001 f984 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 80010f6:	e086      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 14:
		HAL_GPIO_WritePin(M14_GPIO_Port, M14_Pin, state);
 80010f8:	1dbb      	adds	r3, r7, #6
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4845      	ldr	r0, [pc, #276]	; (8001214 <displayTurnMinutesLED+0x23c>)
 80010fe:	001a      	movs	r2, r3
 8001100:	2120      	movs	r1, #32
 8001102:	f001 f97c 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8001106:	e07e      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 15:
		HAL_GPIO_WritePin(M15_GPIO_Port, M15_Pin, state);
 8001108:	1dbb      	adds	r3, r7, #6
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4841      	ldr	r0, [pc, #260]	; (8001214 <displayTurnMinutesLED+0x23c>)
 800110e:	001a      	movs	r2, r3
 8001110:	2110      	movs	r1, #16
 8001112:	f001 f974 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8001116:	e076      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 16:
		HAL_GPIO_WritePin(M16_GPIO_Port, M16_Pin, state);
 8001118:	1dbb      	adds	r3, r7, #6
 800111a:	781a      	ldrb	r2, [r3, #0]
 800111c:	23a0      	movs	r3, #160	; 0xa0
 800111e:	05db      	lsls	r3, r3, #23
 8001120:	2140      	movs	r1, #64	; 0x40
 8001122:	0018      	movs	r0, r3
 8001124:	f001 f96b 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8001128:	e06d      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 17:
		HAL_GPIO_WritePin(M17_GPIO_Port, M17_Pin, state);
 800112a:	1dbb      	adds	r3, r7, #6
 800112c:	781a      	ldrb	r2, [r3, #0]
 800112e:	23a0      	movs	r3, #160	; 0xa0
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	2120      	movs	r1, #32
 8001134:	0018      	movs	r0, r3
 8001136:	f001 f962 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 800113a:	e064      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 18:
		HAL_GPIO_WritePin(M18_GPIO_Port, M18_Pin, state);
 800113c:	1dbb      	adds	r3, r7, #6
 800113e:	781a      	ldrb	r2, [r3, #0]
 8001140:	23a0      	movs	r3, #160	; 0xa0
 8001142:	05db      	lsls	r3, r3, #23
 8001144:	2108      	movs	r1, #8
 8001146:	0018      	movs	r0, r3
 8001148:	f001 f959 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 800114c:	e05b      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 19:
		HAL_GPIO_WritePin(M19_GPIO_Port, M19_Pin, state);
 800114e:	1dbb      	adds	r3, r7, #6
 8001150:	781a      	ldrb	r2, [r3, #0]
 8001152:	23a0      	movs	r3, #160	; 0xa0
 8001154:	05db      	lsls	r3, r3, #23
 8001156:	2104      	movs	r1, #4
 8001158:	0018      	movs	r0, r3
 800115a:	f001 f950 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 800115e:	e052      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 20:
		HAL_GPIO_WritePin(M20_GPIO_Port, M20_Pin, state);
 8001160:	1dbb      	adds	r3, r7, #6
 8001162:	781a      	ldrb	r2, [r3, #0]
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	482b      	ldr	r0, [pc, #172]	; (8001218 <displayTurnMinutesLED+0x240>)
 800116a:	0019      	movs	r1, r3
 800116c:	f001 f947 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8001170:	e049      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 21:
		HAL_GPIO_WritePin(M21_GPIO_Port, M21_Pin, state);
 8001172:	1dbb      	adds	r3, r7, #6
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	4827      	ldr	r0, [pc, #156]	; (8001214 <displayTurnMinutesLED+0x23c>)
 8001178:	001a      	movs	r2, r3
 800117a:	2108      	movs	r1, #8
 800117c:	f001 f93f 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8001180:	e041      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 22:
		HAL_GPIO_WritePin(M22_GPIO_Port, M22_Pin, state);
 8001182:	1dbb      	adds	r3, r7, #6
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4823      	ldr	r0, [pc, #140]	; (8001214 <displayTurnMinutesLED+0x23c>)
 8001188:	001a      	movs	r2, r3
 800118a:	2104      	movs	r1, #4
 800118c:	f001 f937 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8001190:	e039      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 23:
		HAL_GPIO_WritePin(M23_GPIO_Port, M23_Pin, state);
 8001192:	1dbb      	adds	r3, r7, #6
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	011b      	lsls	r3, r3, #4
 800119a:	481e      	ldr	r0, [pc, #120]	; (8001214 <displayTurnMinutesLED+0x23c>)
 800119c:	0019      	movs	r1, r3
 800119e:	f001 f92e 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 80011a2:	e030      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 24:
		HAL_GPIO_WritePin(M24_GPIO_Port, M24_Pin, state);
 80011a4:	1dbb      	adds	r3, r7, #6
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	00db      	lsls	r3, r3, #3
 80011ac:	4819      	ldr	r0, [pc, #100]	; (8001214 <displayTurnMinutesLED+0x23c>)
 80011ae:	0019      	movs	r1, r3
 80011b0:	f001 f925 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 80011b4:	e027      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 25:
		HAL_GPIO_WritePin(M25_GPIO_Port, M25_Pin, state);
 80011b6:	1dbb      	adds	r3, r7, #6
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	4817      	ldr	r0, [pc, #92]	; (8001218 <displayTurnMinutesLED+0x240>)
 80011bc:	001a      	movs	r2, r3
 80011be:	2140      	movs	r1, #64	; 0x40
 80011c0:	f001 f91d 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 80011c4:	e01f      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 26:
		HAL_GPIO_WritePin(M26_GPIO_Port, M26_Pin, state);
 80011c6:	1dbb      	adds	r3, r7, #6
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4813      	ldr	r0, [pc, #76]	; (8001218 <displayTurnMinutesLED+0x240>)
 80011cc:	001a      	movs	r2, r3
 80011ce:	2120      	movs	r1, #32
 80011d0:	f001 f915 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 80011d4:	e017      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 27:
		HAL_GPIO_WritePin(M27_GPIO_Port, M27_Pin, state);
 80011d6:	1dbb      	adds	r3, r7, #6
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	480f      	ldr	r0, [pc, #60]	; (8001218 <displayTurnMinutesLED+0x240>)
 80011dc:	001a      	movs	r2, r3
 80011de:	2110      	movs	r1, #16
 80011e0:	f001 f90d 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 80011e4:	e00f      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 28:
		HAL_GPIO_WritePin(M28_GPIO_Port, M28_Pin, state);
 80011e6:	1dbb      	adds	r3, r7, #6
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	480b      	ldr	r0, [pc, #44]	; (8001218 <displayTurnMinutesLED+0x240>)
 80011ec:	001a      	movs	r2, r3
 80011ee:	2104      	movs	r1, #4
 80011f0:	f001 f905 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 80011f4:	e007      	b.n	8001206 <displayTurnMinutesLED+0x22e>
	case 29:
		HAL_GPIO_WritePin(M29_GPIO_Port, M29_Pin, state);
 80011f6:	1dbb      	adds	r3, r7, #6
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	4807      	ldr	r0, [pc, #28]	; (8001218 <displayTurnMinutesLED+0x240>)
 80011fc:	001a      	movs	r2, r3
 80011fe:	2102      	movs	r1, #2
 8001200:	f001 f8fd 	bl	80023fe <HAL_GPIO_WritePin>
		break;
 8001204:	46c0      	nop			; (mov r8, r8)

	}

}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	08003a7c 	.word	0x08003a7c
 8001214:	50000800 	.word	0x50000800
 8001218:	50000c00 	.word	0x50000c00
 800121c:	50000400 	.word	0x50000400

08001220 <extiCallback>:

#include "interrupts.h"
#include "main.h"
#include "../rtc/rtc.h"

void extiCallback(uint16_t pin) {
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	0002      	movs	r2, r0
 8001228:	1dbb      	adds	r3, r7, #6
 800122a:	801a      	strh	r2, [r3, #0]

//	if(pin == 0){
//		pin = SET_Pin; // dunno why- SET pin is reading as - instead of 15
//	}
	dontSleepFlag = 1;
 800122c:	4b51      	ldr	r3, [pc, #324]	; (8001374 <extiCallback+0x154>)
 800122e:	2201      	movs	r2, #1
 8001230:	701a      	strb	r2, [r3, #0]

	if (pin == TOUCH_Pin) {
 8001232:	1dbb      	adds	r3, r7, #6
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d154      	bne.n	80012e4 <extiCallback+0xc4>

		if (mode == MODE_SLEEP) {
 800123a:	4b4f      	ldr	r3, [pc, #316]	; (8001378 <extiCallback+0x158>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b04      	cmp	r3, #4
 8001242:	d103      	bne.n	800124c <extiCallback+0x2c>
			mode = MODE_NORMAL;
 8001244:	4b4c      	ldr	r3, [pc, #304]	; (8001378 <extiCallback+0x158>)
 8001246:	2200      	movs	r2, #0
 8001248:	701a      	strb	r2, [r3, #0]
			displayTurnOff();
		}

	}

}
 800124a:	e08e      	b.n	800136a <extiCallback+0x14a>
		} else if (mode == MODE_SETTINGS_H) {
 800124c:	4b4a      	ldr	r3, [pc, #296]	; (8001378 <extiCallback+0x158>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b01      	cmp	r3, #1
 8001254:	d116      	bne.n	8001284 <extiCallback+0x64>
			hours++;
 8001256:	4b49      	ldr	r3, [pc, #292]	; (800137c <extiCallback+0x15c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b25b      	sxtb	r3, r3
 800125c:	b2db      	uxtb	r3, r3
 800125e:	3301      	adds	r3, #1
 8001260:	b2db      	uxtb	r3, r3
 8001262:	b25a      	sxtb	r2, r3
 8001264:	4b45      	ldr	r3, [pc, #276]	; (800137c <extiCallback+0x15c>)
 8001266:	701a      	strb	r2, [r3, #0]
			if (hours > 11)
 8001268:	4b44      	ldr	r3, [pc, #272]	; (800137c <extiCallback+0x15c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b25b      	sxtb	r3, r3
 800126e:	2b0b      	cmp	r3, #11
 8001270:	dd02      	ble.n	8001278 <extiCallback+0x58>
				hours = 0;
 8001272:	4b42      	ldr	r3, [pc, #264]	; (800137c <extiCallback+0x15c>)
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]
			seconds = 0;
 8001278:	4b41      	ldr	r3, [pc, #260]	; (8001380 <extiCallback+0x160>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
			rtcSetTime();
 800127e:	f000 f8d5 	bl	800142c <rtcSetTime>
}
 8001282:	e072      	b.n	800136a <extiCallback+0x14a>
		} else if (mode == MODE_SETTINGS_M) {
 8001284:	4b3c      	ldr	r3, [pc, #240]	; (8001378 <extiCallback+0x158>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d116      	bne.n	80012bc <extiCallback+0x9c>
			minutes++;
 800128e:	4b3d      	ldr	r3, [pc, #244]	; (8001384 <extiCallback+0x164>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b21b      	sxth	r3, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	3301      	adds	r3, #1
 8001298:	b29b      	uxth	r3, r3
 800129a:	b21a      	sxth	r2, r3
 800129c:	4b39      	ldr	r3, [pc, #228]	; (8001384 <extiCallback+0x164>)
 800129e:	801a      	strh	r2, [r3, #0]
			if (minutes > 59)
 80012a0:	4b38      	ldr	r3, [pc, #224]	; (8001384 <extiCallback+0x164>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	2b3b      	cmp	r3, #59	; 0x3b
 80012a8:	dd02      	ble.n	80012b0 <extiCallback+0x90>
				minutes = 0;
 80012aa:	4b36      	ldr	r3, [pc, #216]	; (8001384 <extiCallback+0x164>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	801a      	strh	r2, [r3, #0]
			seconds = 0;
 80012b0:	4b33      	ldr	r3, [pc, #204]	; (8001380 <extiCallback+0x160>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
			rtcSetTime();
 80012b6:	f000 f8b9 	bl	800142c <rtcSetTime>
}
 80012ba:	e056      	b.n	800136a <extiCallback+0x14a>
		} else if(mode == MODE_SETTINGS_S){
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <extiCallback+0x158>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d105      	bne.n	80012d2 <extiCallback+0xb2>
			seconds = 0;
 80012c6:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <extiCallback+0x160>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
			rtcSetTime();
 80012cc:	f000 f8ae 	bl	800142c <rtcSetTime>
}
 80012d0:	e04b      	b.n	800136a <extiCallback+0x14a>
		}else if(mode == MODE_FORCE){
 80012d2:	4b29      	ldr	r3, [pc, #164]	; (8001378 <extiCallback+0x158>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d146      	bne.n	800136a <extiCallback+0x14a>
			mode = MODE_NORMAL;
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <extiCallback+0x158>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
}
 80012e2:	e042      	b.n	800136a <extiCallback+0x14a>
	else if (pin == SET_Pin) {
 80012e4:	1dbb      	adds	r3, r7, #6
 80012e6:	881a      	ldrh	r2, [r3, #0]
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d13c      	bne.n	800136a <extiCallback+0x14a>
		if (mode == MODE_SLEEP) {
 80012f0:	4b21      	ldr	r3, [pc, #132]	; (8001378 <extiCallback+0x158>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d108      	bne.n	800130c <extiCallback+0xec>
			mode = MODE_SETTINGS_H;
 80012fa:	4b1f      	ldr	r3, [pc, #124]	; (8001378 <extiCallback+0x158>)
 80012fc:	2201      	movs	r2, #1
 80012fe:	701a      	strb	r2, [r3, #0]
			seconds = 0;
 8001300:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <extiCallback+0x160>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
			rtcSetTime();
 8001306:	f000 f891 	bl	800142c <rtcSetTime>
}
 800130a:	e02e      	b.n	800136a <extiCallback+0x14a>
		} else if (mode == MODE_SETTINGS_H) {
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <extiCallback+0x158>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	2b01      	cmp	r3, #1
 8001314:	d103      	bne.n	800131e <extiCallback+0xfe>
			mode = MODE_SETTINGS_M;
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <extiCallback+0x158>)
 8001318:	2202      	movs	r2, #2
 800131a:	701a      	strb	r2, [r3, #0]
}
 800131c:	e025      	b.n	800136a <extiCallback+0x14a>
		} else if (mode == MODE_SETTINGS_M) {
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <extiCallback+0x158>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d103      	bne.n	8001330 <extiCallback+0x110>
			mode = MODE_SETTINGS_S;
 8001328:	4b13      	ldr	r3, [pc, #76]	; (8001378 <extiCallback+0x158>)
 800132a:	2203      	movs	r2, #3
 800132c:	701a      	strb	r2, [r3, #0]
}
 800132e:	e01c      	b.n	800136a <extiCallback+0x14a>
		} else if (mode == MODE_SETTINGS_S) {
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <extiCallback+0x158>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b03      	cmp	r3, #3
 8001338:	d107      	bne.n	800134a <extiCallback+0x12a>
			rtcSetTime();
 800133a:	f000 f877 	bl	800142c <rtcSetTime>
			displayTurnOff();
 800133e:	f7ff fc81 	bl	8000c44 <displayTurnOff>
			mode = MODE_NORMAL;
 8001342:	4b0d      	ldr	r3, [pc, #52]	; (8001378 <extiCallback+0x158>)
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
}
 8001348:	e00f      	b.n	800136a <extiCallback+0x14a>
		} else if(mode == MODE_NORMAL){
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <extiCallback+0x158>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2b00      	cmp	r3, #0
 8001352:	d103      	bne.n	800135c <extiCallback+0x13c>
			mode = MODE_FORCE;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <extiCallback+0x158>)
 8001356:	2205      	movs	r2, #5
 8001358:	701a      	strb	r2, [r3, #0]
}
 800135a:	e006      	b.n	800136a <extiCallback+0x14a>
		} else if(mode == MODE_FORCE){
 800135c:	4b06      	ldr	r3, [pc, #24]	; (8001378 <extiCallback+0x158>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b05      	cmp	r3, #5
 8001364:	d101      	bne.n	800136a <extiCallback+0x14a>
			displayTurnOff();
 8001366:	f7ff fc6d 	bl	8000c44 <displayTurnOff>
}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
 8001372:	46c0      	nop			; (mov r8, r8)
 8001374:	2000003c 	.word	0x2000003c
 8001378:	200000a4 	.word	0x200000a4
 800137c:	200000dc 	.word	0x200000dc
 8001380:	200000d8 	.word	0x200000d8
 8001384:	200000da 	.word	0x200000da

08001388 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	0002      	movs	r2, r0
 8001390:	1dbb      	adds	r3, r7, #6
 8001392:	801a      	strh	r2, [r3, #0]

	extiCallback(GPIO_Pin);
 8001394:	1dbb      	adds	r3, r7, #6
 8001396:	881b      	ldrh	r3, [r3, #0]
 8001398:	0018      	movs	r0, r3
 800139a:	f7ff ff41 	bl	8001220 <extiCallback>

}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	46bd      	mov	sp, r7
 80013a2:	b002      	add	sp, #8
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	0002      	movs	r2, r0
 80013ae:	1dbb      	adds	r3, r7, #6
 80013b0:	801a      	strh	r2, [r3, #0]

	extiCallback(GPIO_Pin);
 80013b2:	1dbb      	adds	r3, r7, #6
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	0018      	movs	r0, r3
 80013b8:	f7ff ff32 	bl	8001220 <extiCallback>

}
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b002      	add	sp, #8
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <rtcGetTime>:
 */

#include "rtc.h"


void rtcGetTime() {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013c8:	4912      	ldr	r1, [pc, #72]	; (8001414 <rtcGetTime+0x50>)
 80013ca:	4b13      	ldr	r3, [pc, #76]	; (8001418 <rtcGetTime+0x54>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	0018      	movs	r0, r3
 80013d0:	f001 fff4 	bl	80033bc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80013d4:	4911      	ldr	r1, [pc, #68]	; (800141c <rtcGetTime+0x58>)
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <rtcGetTime+0x54>)
 80013d8:	2200      	movs	r2, #0
 80013da:	0018      	movs	r0, r3
 80013dc:	f002 f8dc 	bl	8003598 <HAL_RTC_GetDate>



	if(sTime.Hours == 12){
 80013e0:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <rtcGetTime+0x50>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b0c      	cmp	r3, #12
 80013e6:	d103      	bne.n	80013f0 <rtcGetTime+0x2c>
		hours = 0;
 80013e8:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <rtcGetTime+0x5c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	701a      	strb	r2, [r3, #0]
 80013ee:	e004      	b.n	80013fa <rtcGetTime+0x36>
	}else{
		hours = sTime.Hours;
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <rtcGetTime+0x50>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b25a      	sxtb	r2, r3
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <rtcGetTime+0x5c>)
 80013f8:	701a      	strb	r2, [r3, #0]
	}
	minutes = sTime.Minutes;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <rtcGetTime+0x50>)
 80013fc:	785b      	ldrb	r3, [r3, #1]
 80013fe:	b21a      	sxth	r2, r3
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <rtcGetTime+0x60>)
 8001402:	801a      	strh	r2, [r3, #0]
	seconds = sTime.Seconds;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <rtcGetTime+0x50>)
 8001406:	789b      	ldrb	r3, [r3, #2]
 8001408:	b25a      	sxtb	r2, r3
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <rtcGetTime+0x64>)
 800140c:	701a      	strb	r2, [r3, #0]

}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000028 	.word	0x20000028
 8001418:	200000ac 	.word	0x200000ac
 800141c:	200000a8 	.word	0x200000a8
 8001420:	200000dc 	.word	0x200000dc
 8001424:	200000da 	.word	0x200000da
 8001428:	200000d8 	.word	0x200000d8

0800142c <rtcSetTime>:

void rtcSetTime() {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0

	sTime.Hours = hours;
 8001430:	4b10      	ldr	r3, [pc, #64]	; (8001474 <rtcSetTime+0x48>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	b25b      	sxtb	r3, r3
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <rtcSetTime+0x4c>)
 800143a:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = minutes;
 800143c:	4b0f      	ldr	r3, [pc, #60]	; (800147c <rtcSetTime+0x50>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	b21b      	sxth	r3, r3
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <rtcSetTime+0x4c>)
 8001446:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = seconds;
 8001448:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <rtcSetTime+0x54>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b25b      	sxtb	r3, r3
 800144e:	b2da      	uxtb	r2, r3
 8001450:	4b09      	ldr	r3, [pc, #36]	; (8001478 <rtcSetTime+0x4c>)
 8001452:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001454:	4908      	ldr	r1, [pc, #32]	; (8001478 <rtcSetTime+0x4c>)
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <rtcSetTime+0x58>)
 8001458:	2200      	movs	r2, #0
 800145a:	0018      	movs	r0, r3
 800145c:	f001 ff06 	bl	800326c <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001460:	4909      	ldr	r1, [pc, #36]	; (8001488 <rtcSetTime+0x5c>)
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <rtcSetTime+0x58>)
 8001464:	2200      	movs	r2, #0
 8001466:	0018      	movs	r0, r3
 8001468:	f002 f804 	bl	8003474 <HAL_RTC_SetDate>

//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0);

}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	46c0      	nop			; (mov r8, r8)
 8001474:	200000dc 	.word	0x200000dc
 8001478:	20000028 	.word	0x20000028
 800147c:	200000da 	.word	0x200000da
 8001480:	200000d8 	.word	0x200000d8
 8001484:	200000ac 	.word	0x200000ac
 8001488:	200000a8 	.word	0x200000a8

0800148c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001498:	4b0b      	ldr	r3, [pc, #44]	; (80014c8 <HAL_Init+0x3c>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_Init+0x3c>)
 800149e:	2180      	movs	r1, #128	; 0x80
 80014a0:	0049      	lsls	r1, r1, #1
 80014a2:	430a      	orrs	r2, r1
 80014a4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 f810 	bl	80014cc <HAL_InitTick>
 80014ac:	1e03      	subs	r3, r0, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014b0:	1dfb      	adds	r3, r7, #7
 80014b2:	2201      	movs	r2, #1
 80014b4:	701a      	strb	r2, [r3, #0]
 80014b6:	e001      	b.n	80014bc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80014b8:	f7ff f9f6 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014bc:	1dfb      	adds	r3, r7, #7
 80014be:	781b      	ldrb	r3, [r3, #0]
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40022000 	.word	0x40022000

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b590      	push	{r4, r7, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	230f      	movs	r3, #15
 80014d6:	18fb      	adds	r3, r7, r3
 80014d8:	2200      	movs	r2, #0
 80014da:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80014dc:	4b1d      	ldr	r3, [pc, #116]	; (8001554 <HAL_InitTick+0x88>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d02b      	beq.n	800153c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <HAL_InitTick+0x8c>)
 80014e6:	681c      	ldr	r4, [r3, #0]
 80014e8:	4b1a      	ldr	r3, [pc, #104]	; (8001554 <HAL_InitTick+0x88>)
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	0019      	movs	r1, r3
 80014ee:	23fa      	movs	r3, #250	; 0xfa
 80014f0:	0098      	lsls	r0, r3, #2
 80014f2:	f7fe fe05 	bl	8000100 <__udivsi3>
 80014f6:	0003      	movs	r3, r0
 80014f8:	0019      	movs	r1, r3
 80014fa:	0020      	movs	r0, r4
 80014fc:	f7fe fe00 	bl	8000100 <__udivsi3>
 8001500:	0003      	movs	r3, r0
 8001502:	0018      	movs	r0, r3
 8001504:	f000 fded 	bl	80020e2 <HAL_SYSTICK_Config>
 8001508:	1e03      	subs	r3, r0, #0
 800150a:	d112      	bne.n	8001532 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b03      	cmp	r3, #3
 8001510:	d80a      	bhi.n	8001528 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001512:	6879      	ldr	r1, [r7, #4]
 8001514:	2301      	movs	r3, #1
 8001516:	425b      	negs	r3, r3
 8001518:	2200      	movs	r2, #0
 800151a:	0018      	movs	r0, r3
 800151c:	f000 fdbc 	bl	8002098 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001520:	4b0e      	ldr	r3, [pc, #56]	; (800155c <HAL_InitTick+0x90>)
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e00d      	b.n	8001544 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001528:	230f      	movs	r3, #15
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	2201      	movs	r2, #1
 800152e:	701a      	strb	r2, [r3, #0]
 8001530:	e008      	b.n	8001544 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001532:	230f      	movs	r3, #15
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
 800153a:	e003      	b.n	8001544 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800153c:	230f      	movs	r3, #15
 800153e:	18fb      	adds	r3, r7, r3
 8001540:	2201      	movs	r2, #1
 8001542:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001544:	230f      	movs	r3, #15
 8001546:	18fb      	adds	r3, r7, r3
 8001548:	781b      	ldrb	r3, [r3, #0]
}
 800154a:	0018      	movs	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	b005      	add	sp, #20
 8001550:	bd90      	pop	{r4, r7, pc}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	20000008 	.word	0x20000008
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x1c>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	001a      	movs	r2, r3
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x20>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	18d2      	adds	r2, r2, r3
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <HAL_IncTick+0x20>)
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	46c0      	nop			; (mov r8, r8)
 800157c:	20000008 	.word	0x20000008
 8001580:	200000e0 	.word	0x200000e0

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <HAL_GetTick+0x10>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	0018      	movs	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	200000e0 	.word	0x200000e0

08001598 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a0:	f7ff fff0 	bl	8001584 <HAL_GetTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	3301      	adds	r3, #1
 80015b0:	d005      	beq.n	80015be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <HAL_Delay+0x44>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	001a      	movs	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	189b      	adds	r3, r3, r2
 80015bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	f7ff ffe0 	bl	8001584 <HAL_GetTick>
 80015c4:	0002      	movs	r2, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d8f7      	bhi.n	80015c0 <HAL_Delay+0x28>
  {
  }
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b004      	add	sp, #16
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	20000008 	.word	0x20000008

080015e0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	4b04      	ldr	r3, [pc, #16]	; (8001604 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80015f4:	687a      	ldr	r2, [r7, #4]
 80015f6:	430a      	orrs	r2, r1
 80015f8:	601a      	str	r2, [r3, #0]
}
 80015fa:	46c0      	nop			; (mov r8, r8)
 80015fc:	46bd      	mov	sp, r7
 80015fe:	b002      	add	sp, #8
 8001600:	bd80      	pop	{r7, pc}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	40010000 	.word	0x40010000
 8001608:	fffff9ff 	.word	0xfffff9ff

0800160c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a05      	ldr	r2, [pc, #20]	; (8001630 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800161c:	401a      	ands	r2, r3
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	601a      	str	r2, [r3, #0]
}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	b002      	add	sp, #8
 800162c:	bd80      	pop	{r7, pc}
 800162e:	46c0      	nop			; (mov r8, r8)
 8001630:	fe3fffff 	.word	0xfe3fffff

08001634 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	23e0      	movs	r3, #224	; 0xe0
 8001642:	045b      	lsls	r3, r3, #17
 8001644:	4013      	ands	r3, r2
}
 8001646:	0018      	movs	r0, r3
 8001648:	46bd      	mov	sp, r7
 800164a:	b002      	add	sp, #8
 800164c:	bd80      	pop	{r7, pc}

0800164e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	2104      	movs	r1, #4
 8001662:	400a      	ands	r2, r1
 8001664:	2107      	movs	r1, #7
 8001666:	4091      	lsls	r1, r2
 8001668:	000a      	movs	r2, r1
 800166a:	43d2      	mvns	r2, r2
 800166c:	401a      	ands	r2, r3
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	2104      	movs	r1, #4
 8001672:	400b      	ands	r3, r1
 8001674:	6879      	ldr	r1, [r7, #4]
 8001676:	4099      	lsls	r1, r3
 8001678:	000b      	movs	r3, r1
 800167a:	431a      	orrs	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	b004      	add	sp, #16
 8001686:	bd80      	pop	{r7, pc}

08001688 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	211f      	movs	r1, #31
 800169c:	400a      	ands	r2, r1
 800169e:	210f      	movs	r1, #15
 80016a0:	4091      	lsls	r1, r2
 80016a2:	000a      	movs	r2, r1
 80016a4:	43d2      	mvns	r2, r2
 80016a6:	401a      	ands	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	0e9b      	lsrs	r3, r3, #26
 80016ac:	210f      	movs	r1, #15
 80016ae:	4019      	ands	r1, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	201f      	movs	r0, #31
 80016b4:	4003      	ands	r3, r0
 80016b6:	4099      	lsls	r1, r3
 80016b8:	000b      	movs	r3, r1
 80016ba:	431a      	orrs	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b004      	add	sp, #16
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	035b      	lsls	r3, r3, #13
 80016da:	0b5b      	lsrs	r3, r3, #13
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b002      	add	sp, #8
 80016e8:	bd80      	pop	{r7, pc}

080016ea <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b082      	sub	sp, #8
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	0352      	lsls	r2, r2, #13
 80016fc:	0b52      	lsrs	r2, r2, #13
 80016fe:	43d2      	mvns	r2, r2
 8001700:	401a      	ands	r2, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001706:	46c0      	nop			; (mov r8, r8)
 8001708:	46bd      	mov	sp, r7
 800170a:	b002      	add	sp, #8
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	68ba      	ldr	r2, [r7, #8]
 8001722:	0212      	lsls	r2, r2, #8
 8001724:	43d2      	mvns	r2, r2
 8001726:	401a      	ands	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	021b      	lsls	r3, r3, #8
 800172c:	6879      	ldr	r1, [r7, #4]
 800172e:	400b      	ands	r3, r1
 8001730:	4904      	ldr	r1, [pc, #16]	; (8001744 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001732:	400b      	ands	r3, r1
 8001734:	431a      	orrs	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bd80      	pop	{r7, pc}
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	07ffff00 	.word	0x07ffff00

08001748 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a05      	ldr	r2, [pc, #20]	; (800176c <LL_ADC_EnableInternalRegulator+0x24>)
 8001756:	4013      	ands	r3, r2
 8001758:	2280      	movs	r2, #128	; 0x80
 800175a:	0552      	lsls	r2, r2, #21
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	46bd      	mov	sp, r7
 8001766:	b002      	add	sp, #8
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	6fffffe8 	.word	0x6fffffe8

08001770 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	055b      	lsls	r3, r3, #21
 8001780:	401a      	ands	r2, r3
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	055b      	lsls	r3, r3, #21
 8001786:	429a      	cmp	r2, r3
 8001788:	d101      	bne.n	800178e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800178e:	2300      	movs	r3, #0
}
 8001790:	0018      	movs	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	b002      	add	sp, #8
 8001796:	bd80      	pop	{r7, pc}

08001798 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	2201      	movs	r2, #1
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <LL_ADC_IsEnabled+0x18>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <LL_ADC_IsEnabled+0x1a>
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	0018      	movs	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b002      	add	sp, #8
 80017b8:	bd80      	pop	{r7, pc}

080017ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	2204      	movs	r2, #4
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b04      	cmp	r3, #4
 80017cc:	d101      	bne.n	80017d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	0018      	movs	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	b002      	add	sp, #8
 80017da:	bd80      	pop	{r7, pc}

080017dc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e4:	231f      	movs	r3, #31
 80017e6:	18fb      	adds	r3, r7, r3
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e1ab      	b.n	8001b5a <HAL_ADC_Init+0x37e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10a      	bne.n	8001820 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff f873 	bl	80008f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2254      	movs	r2, #84	; 0x54
 800181c:	2100      	movs	r1, #0
 800181e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff ffa3 	bl	8001770 <LL_ADC_IsInternalRegulatorEnabled>
 800182a:	1e03      	subs	r3, r0, #0
 800182c:	d114      	bne.n	8001858 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	0018      	movs	r0, r3
 8001834:	f7ff ff88 	bl	8001748 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001838:	4bca      	ldr	r3, [pc, #808]	; (8001b64 <HAL_ADC_Init+0x388>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	49ca      	ldr	r1, [pc, #808]	; (8001b68 <HAL_ADC_Init+0x38c>)
 800183e:	0018      	movs	r0, r3
 8001840:	f7fe fc5e 	bl	8000100 <__udivsi3>
 8001844:	0003      	movs	r3, r0
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800184a:	e002      	b.n	8001852 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	3b01      	subs	r3, #1
 8001850:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1f9      	bne.n	800184c <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	0018      	movs	r0, r3
 800185e:	f7ff ff87 	bl	8001770 <LL_ADC_IsInternalRegulatorEnabled>
 8001862:	1e03      	subs	r3, r0, #0
 8001864:	d10f      	bne.n	8001886 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186a:	2210      	movs	r2, #16
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001876:	2201      	movs	r2, #1
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800187e:	231f      	movs	r3, #31
 8001880:	18fb      	adds	r3, r7, r3
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	0018      	movs	r0, r3
 800188c:	f7ff ff95 	bl	80017ba <LL_ADC_REG_IsConversionOngoing>
 8001890:	0003      	movs	r3, r0
 8001892:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001898:	2210      	movs	r2, #16
 800189a:	4013      	ands	r3, r2
 800189c:	d000      	beq.n	80018a0 <HAL_ADC_Init+0xc4>
 800189e:	e14f      	b.n	8001b40 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d000      	beq.n	80018a8 <HAL_ADC_Init+0xcc>
 80018a6:	e14b      	b.n	8001b40 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4aaf      	ldr	r2, [pc, #700]	; (8001b6c <HAL_ADC_Init+0x390>)
 80018ae:	4013      	ands	r3, r2
 80018b0:	2202      	movs	r2, #2
 80018b2:	431a      	orrs	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff ff6b 	bl	8001798 <LL_ADC_IsEnabled>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d151      	bne.n	800196a <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2218      	movs	r2, #24
 80018ce:	4393      	bics	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	430a      	orrs	r2, r1
 80018dc:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	0f9b      	lsrs	r3, r3, #30
 80018e4:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018ea:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 80018f0:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 80018f6:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 80018fc:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80018fe:	697a      	ldr	r2, [r7, #20]
 8001900:	4313      	orrs	r3, r2
 8001902:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	223c      	movs	r2, #60	; 0x3c
 8001908:	5c9b      	ldrb	r3, [r3, r2]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d103      	bne.n	8001916 <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	2201      	movs	r2, #1
 8001912:	4313      	orrs	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	4a94      	ldr	r2, [pc, #592]	; (8001b70 <HAL_ADC_Init+0x394>)
 800191e:	4013      	ands	r3, r2
 8001920:	0019      	movs	r1, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	697a      	ldr	r2, [r7, #20]
 8001928:	430a      	orrs	r2, r1
 800192a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	23c0      	movs	r3, #192	; 0xc0
 8001932:	061b      	lsls	r3, r3, #24
 8001934:	429a      	cmp	r2, r3
 8001936:	d018      	beq.n	800196a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	05db      	lsls	r3, r3, #23
 8001940:	429a      	cmp	r2, r3
 8001942:	d012      	beq.n	800196a <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	061b      	lsls	r3, r3, #24
 800194c:	429a      	cmp	r2, r3
 800194e:	d00c      	beq.n	800196a <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001950:	4b88      	ldr	r3, [pc, #544]	; (8001b74 <HAL_ADC_Init+0x398>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a88      	ldr	r2, [pc, #544]	; (8001b78 <HAL_ADC_Init+0x39c>)
 8001956:	4013      	ands	r3, r2
 8001958:	0019      	movs	r1, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	23f0      	movs	r3, #240	; 0xf0
 8001960:	039b      	lsls	r3, r3, #14
 8001962:	401a      	ands	r2, r3
 8001964:	4b83      	ldr	r3, [pc, #524]	; (8001b74 <HAL_ADC_Init+0x398>)
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7e1b      	ldrb	r3, [r3, #24]
 800196e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	7e5b      	ldrb	r3, [r3, #25]
 8001974:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001976:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7e9b      	ldrb	r3, [r3, #26]
 800197c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800197e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_ADC_Init+0x1b2>
 8001988:	2380      	movs	r3, #128	; 0x80
 800198a:	015b      	lsls	r3, r3, #5
 800198c:	e000      	b.n	8001990 <HAL_ADC_Init+0x1b4>
 800198e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001990:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001996:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	2b00      	cmp	r3, #0
 800199e:	da04      	bge.n	80019aa <HAL_ADC_Init+0x1ce>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	085b      	lsrs	r3, r3, #1
 80019a8:	e001      	b.n	80019ae <HAL_ADC_Init+0x1d2>
 80019aa:	2380      	movs	r3, #128	; 0x80
 80019ac:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80019ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	212c      	movs	r1, #44	; 0x2c
 80019b4:	5c5b      	ldrb	r3, [r3, r1]
 80019b6:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019b8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	5c9b      	ldrb	r3, [r3, r2]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d115      	bne.n	80019f6 <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	7e9b      	ldrb	r3, [r3, #26]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d105      	bne.n	80019de <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	0252      	lsls	r2, r2, #9
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	e00b      	b.n	80019f6 <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e2:	2220      	movs	r2, #32
 80019e4:	431a      	orrs	r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ee:	2201      	movs	r2, #1
 80019f0:	431a      	orrs	r2, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a02:	23e0      	movs	r3, #224	; 0xe0
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	4a58      	ldr	r2, [pc, #352]	; (8001b7c <HAL_ADC_Init+0x3a0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	0019      	movs	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	4a53      	ldr	r2, [pc, #332]	; (8001b80 <HAL_ADC_Init+0x3a4>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	0019      	movs	r1, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a48:	001a      	movs	r2, r3
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	f7ff fdff 	bl	800164e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a58:	494a      	ldr	r1, [pc, #296]	; (8001b84 <HAL_ADC_Init+0x3a8>)
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	f7ff fdf7 	bl	800164e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2110      	movs	r1, #16
 8001a74:	4249      	negs	r1, r1
 8001a76:	430a      	orrs	r2, r1
 8001a78:	629a      	str	r2, [r3, #40]	; 0x28
 8001a7a:	e03a      	b.n	8001af2 <HAL_ADC_Init+0x316>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691a      	ldr	r2, [r3, #16]
 8001a80:	2380      	movs	r3, #128	; 0x80
 8001a82:	039b      	lsls	r3, r3, #14
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d134      	bne.n	8001af2 <HAL_ADC_Init+0x316>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	e00c      	b.n	8001aa8 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	40da      	lsrs	r2, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	220f      	movs	r2, #15
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	2b0f      	cmp	r3, #15
 8001aa0:	d006      	beq.n	8001ab0 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	613b      	str	r3, [r7, #16]
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b07      	cmp	r3, #7
 8001aac:	d9ef      	bls.n	8001a8e <HAL_ADC_Init+0x2b2>
 8001aae:	e000      	b.n	8001ab2 <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8001ab0:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d109      	bne.n	8001acc <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2110      	movs	r1, #16
 8001ac4:	4249      	negs	r1, r1
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	629a      	str	r2, [r3, #40]	; 0x28
 8001aca:	e012      	b.n	8001af2 <HAL_ADC_Init+0x316>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	221c      	movs	r2, #28
 8001adc:	4013      	ands	r3, r2
 8001ade:	2210      	movs	r2, #16
 8001ae0:	4252      	negs	r2, r2
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	0011      	movs	r1, r2
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <HAL_ADC_Init+0x3ac>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d10b      	bne.n	8001b1a <HAL_ADC_Init+0x33e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	4393      	bics	r3, r2
 8001b10:	2201      	movs	r2, #1
 8001b12:	431a      	orrs	r2, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001b18:	e01c      	b.n	8001b54 <HAL_ADC_Init+0x378>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	2212      	movs	r2, #18
 8001b20:	4393      	bics	r3, r2
 8001b22:	2210      	movs	r2, #16
 8001b24:	431a      	orrs	r2, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b2e:	2201      	movs	r2, #1
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001b36:	231f      	movs	r3, #31
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8001b3e:	e009      	b.n	8001b54 <HAL_ADC_Init+0x378>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	2210      	movs	r2, #16
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001b4c:	231f      	movs	r3, #31
 8001b4e:	18fb      	adds	r3, r7, r3
 8001b50:	2201      	movs	r2, #1
 8001b52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b54:	231f      	movs	r3, #31
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	781b      	ldrb	r3, [r3, #0]
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b008      	add	sp, #32
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	20000000 	.word	0x20000000
 8001b68:	00030d40 	.word	0x00030d40
 8001b6c:	fffffefd 	.word	0xfffffefd
 8001b70:	1ffffc02 	.word	0x1ffffc02
 8001b74:	40012708 	.word	0x40012708
 8001b78:	ffc3ffff 	.word	0xffc3ffff
 8001b7c:	fffe0219 	.word	0xfffe0219
 8001b80:	dffffc02 	.word	0xdffffc02
 8001b84:	07ffff04 	.word	0x07ffff04
 8001b88:	833fffe7 	.word	0x833fffe7

08001b8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b96:	2317      	movs	r3, #23
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2254      	movs	r2, #84	; 0x54
 8001ba6:	5c9b      	ldrb	r3, [r3, r2]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_ADC_ConfigChannel+0x24>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e1c2      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x3aa>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2254      	movs	r2, #84	; 0x54
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff fdfc 	bl	80017ba <LL_ADC_REG_IsConversionOngoing>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d000      	beq.n	8001bc8 <HAL_ADC_ConfigChannel+0x3c>
 8001bc6:	e1a5      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d100      	bne.n	8001bd2 <HAL_ADC_ConfigChannel+0x46>
 8001bd0:	e144      	b.n	8001e5c <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691a      	ldr	r2, [r3, #16]
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	061b      	lsls	r3, r3, #24
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d004      	beq.n	8001be8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001be2:	4ac2      	ldr	r2, [pc, #776]	; (8001eec <HAL_ADC_ConfigChannel+0x360>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d108      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	0010      	movs	r0, r2
 8001bf4:	f7ff fd68 	bl	80016c8 <LL_ADC_REG_SetSequencerChAdd>
 8001bf8:	e0c9      	b.n	8001d8e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	211f      	movs	r1, #31
 8001c04:	400b      	ands	r3, r1
 8001c06:	210f      	movs	r1, #15
 8001c08:	4099      	lsls	r1, r3
 8001c0a:	000b      	movs	r3, r1
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	4013      	ands	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	035b      	lsls	r3, r3, #13
 8001c18:	0b5b      	lsrs	r3, r3, #13
 8001c1a:	d105      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x9c>
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0e9b      	lsrs	r3, r3, #26
 8001c22:	221f      	movs	r2, #31
 8001c24:	4013      	ands	r3, r2
 8001c26:	e098      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d000      	beq.n	8001c34 <HAL_ADC_ConfigChannel+0xa8>
 8001c32:	e091      	b.n	8001d58 <HAL_ADC_ConfigChannel+0x1cc>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2202      	movs	r2, #2
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d000      	beq.n	8001c40 <HAL_ADC_ConfigChannel+0xb4>
 8001c3e:	e089      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x1c8>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2204      	movs	r2, #4
 8001c46:	4013      	ands	r3, r2
 8001c48:	d000      	beq.n	8001c4c <HAL_ADC_ConfigChannel+0xc0>
 8001c4a:	e081      	b.n	8001d50 <HAL_ADC_ConfigChannel+0x1c4>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2208      	movs	r2, #8
 8001c52:	4013      	ands	r3, r2
 8001c54:	d000      	beq.n	8001c58 <HAL_ADC_ConfigChannel+0xcc>
 8001c56:	e079      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x1c0>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d000      	beq.n	8001c64 <HAL_ADC_ConfigChannel+0xd8>
 8001c62:	e071      	b.n	8001d48 <HAL_ADC_ConfigChannel+0x1bc>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2220      	movs	r2, #32
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	d000      	beq.n	8001c70 <HAL_ADC_ConfigChannel+0xe4>
 8001c6e:	e069      	b.n	8001d44 <HAL_ADC_ConfigChannel+0x1b8>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2240      	movs	r2, #64	; 0x40
 8001c76:	4013      	ands	r3, r2
 8001c78:	d000      	beq.n	8001c7c <HAL_ADC_ConfigChannel+0xf0>
 8001c7a:	e061      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x1b4>
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2280      	movs	r2, #128	; 0x80
 8001c82:	4013      	ands	r3, r2
 8001c84:	d000      	beq.n	8001c88 <HAL_ADC_ConfigChannel+0xfc>
 8001c86:	e059      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x1b0>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2380      	movs	r3, #128	; 0x80
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	4013      	ands	r3, r2
 8001c92:	d151      	bne.n	8001d38 <HAL_ADC_ConfigChannel+0x1ac>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d149      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x1a8>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2380      	movs	r3, #128	; 0x80
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d141      	bne.n	8001d30 <HAL_ADC_ConfigChannel+0x1a4>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d139      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1a0>
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	015b      	lsls	r3, r3, #5
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d131      	bne.n	8001d28 <HAL_ADC_ConfigChannel+0x19c>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	019b      	lsls	r3, r3, #6
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d129      	bne.n	8001d24 <HAL_ADC_ConfigChannel+0x198>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	01db      	lsls	r3, r3, #7
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d121      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x194>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	d119      	bne.n	8001d1c <HAL_ADC_ConfigChannel+0x190>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	2380      	movs	r3, #128	; 0x80
 8001cee:	025b      	lsls	r3, r3, #9
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d111      	bne.n	8001d18 <HAL_ADC_ConfigChannel+0x18c>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	2380      	movs	r3, #128	; 0x80
 8001cfa:	029b      	lsls	r3, r3, #10
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d109      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x188>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2380      	movs	r3, #128	; 0x80
 8001d06:	02db      	lsls	r3, r3, #11
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d001      	beq.n	8001d10 <HAL_ADC_ConfigChannel+0x184>
 8001d0c:	2312      	movs	r3, #18
 8001d0e:	e024      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d10:	2300      	movs	r3, #0
 8001d12:	e022      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d14:	2311      	movs	r3, #17
 8001d16:	e020      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d18:	2310      	movs	r3, #16
 8001d1a:	e01e      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d1c:	230f      	movs	r3, #15
 8001d1e:	e01c      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d20:	230e      	movs	r3, #14
 8001d22:	e01a      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d24:	230d      	movs	r3, #13
 8001d26:	e018      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d28:	230c      	movs	r3, #12
 8001d2a:	e016      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d2c:	230b      	movs	r3, #11
 8001d2e:	e014      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d30:	230a      	movs	r3, #10
 8001d32:	e012      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d34:	2309      	movs	r3, #9
 8001d36:	e010      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d38:	2308      	movs	r3, #8
 8001d3a:	e00e      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d3c:	2307      	movs	r3, #7
 8001d3e:	e00c      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d40:	2306      	movs	r3, #6
 8001d42:	e00a      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d44:	2305      	movs	r3, #5
 8001d46:	e008      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d48:	2304      	movs	r3, #4
 8001d4a:	e006      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e004      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e002      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_ADC_ConfigChannel+0x1ce>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	683a      	ldr	r2, [r7, #0]
 8001d5c:	6852      	ldr	r2, [r2, #4]
 8001d5e:	201f      	movs	r0, #31
 8001d60:	4002      	ands	r2, r0
 8001d62:	4093      	lsls	r3, r2
 8001d64:	000a      	movs	r2, r1
 8001d66:	431a      	orrs	r2, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d808      	bhi.n	8001d8e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	001a      	movs	r2, r3
 8001d8a:	f7ff fc7d 	bl	8001688 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	001a      	movs	r2, r3
 8001d9c:	f7ff fcb8 	bl	8001710 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	db00      	blt.n	8001daa <HAL_ADC_ConfigChannel+0x21e>
 8001da8:	e0be      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001daa:	4b51      	ldr	r3, [pc, #324]	; (8001ef0 <HAL_ADC_ConfigChannel+0x364>)
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7ff fc41 	bl	8001634 <LL_ADC_GetCommonPathInternalCh>
 8001db2:	0003      	movs	r3, r0
 8001db4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a4e      	ldr	r2, [pc, #312]	; (8001ef4 <HAL_ADC_ConfigChannel+0x368>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d123      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	041b      	lsls	r3, r3, #16
 8001dc6:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001dc8:	d11e      	bne.n	8001e08 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2280      	movs	r2, #128	; 0x80
 8001dce:	0412      	lsls	r2, r2, #16
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	4a47      	ldr	r2, [pc, #284]	; (8001ef0 <HAL_ADC_ConfigChannel+0x364>)
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	0010      	movs	r0, r2
 8001dd8:	f7ff fc18 	bl	800160c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001ddc:	4b46      	ldr	r3, [pc, #280]	; (8001ef8 <HAL_ADC_ConfigChannel+0x36c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4946      	ldr	r1, [pc, #280]	; (8001efc <HAL_ADC_ConfigChannel+0x370>)
 8001de2:	0018      	movs	r0, r3
 8001de4:	f7fe f98c 	bl	8000100 <__udivsi3>
 8001de8:	0003      	movs	r3, r0
 8001dea:	001a      	movs	r2, r3
 8001dec:	0013      	movs	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	189b      	adds	r3, r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	3301      	adds	r3, #1
 8001df6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001df8:	e002      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	3b01      	subs	r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f9      	bne.n	8001dfa <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001e06:	e08f      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a3c      	ldr	r2, [pc, #240]	; (8001f00 <HAL_ADC_ConfigChannel+0x374>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10e      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x2a4>
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	045b      	lsls	r3, r3, #17
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d109      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	2280      	movs	r2, #128	; 0x80
 8001e20:	0452      	lsls	r2, r2, #17
 8001e22:	4313      	orrs	r3, r2
 8001e24:	4a32      	ldr	r2, [pc, #200]	; (8001ef0 <HAL_ADC_ConfigChannel+0x364>)
 8001e26:	0019      	movs	r1, r3
 8001e28:	0010      	movs	r0, r2
 8001e2a:	f7ff fbef 	bl	800160c <LL_ADC_SetCommonPathInternalCh>
 8001e2e:	e07b      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a33      	ldr	r2, [pc, #204]	; (8001f04 <HAL_ADC_ConfigChannel+0x378>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d000      	beq.n	8001e3c <HAL_ADC_ConfigChannel+0x2b0>
 8001e3a:	e075      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	03db      	lsls	r3, r3, #15
 8001e42:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001e44:	d000      	beq.n	8001e48 <HAL_ADC_ConfigChannel+0x2bc>
 8001e46:	e06f      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	03d2      	lsls	r2, r2, #15
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	4a27      	ldr	r2, [pc, #156]	; (8001ef0 <HAL_ADC_ConfigChannel+0x364>)
 8001e52:	0019      	movs	r1, r3
 8001e54:	0010      	movs	r0, r2
 8001e56:	f7ff fbd9 	bl	800160c <LL_ADC_SetCommonPathInternalCh>
 8001e5a:	e065      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	691a      	ldr	r2, [r3, #16]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	061b      	lsls	r3, r3, #24
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d004      	beq.n	8001e72 <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001e6c:	4a1f      	ldr	r2, [pc, #124]	; (8001eec <HAL_ADC_ConfigChannel+0x360>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d107      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	0019      	movs	r1, r3
 8001e7c:	0010      	movs	r0, r2
 8001e7e:	f7ff fc34 	bl	80016ea <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	da4e      	bge.n	8001f28 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e8a:	4b19      	ldr	r3, [pc, #100]	; (8001ef0 <HAL_ADC_ConfigChannel+0x364>)
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	f7ff fbd1 	bl	8001634 <LL_ADC_GetCommonPathInternalCh>
 8001e92:	0003      	movs	r3, r0
 8001e94:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a16      	ldr	r2, [pc, #88]	; (8001ef4 <HAL_ADC_ConfigChannel+0x368>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d108      	bne.n	8001eb2 <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	4a19      	ldr	r2, [pc, #100]	; (8001f08 <HAL_ADC_ConfigChannel+0x37c>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <HAL_ADC_ConfigChannel+0x364>)
 8001ea8:	0019      	movs	r1, r3
 8001eaa:	0010      	movs	r0, r2
 8001eac:	f7ff fbae 	bl	800160c <LL_ADC_SetCommonPathInternalCh>
 8001eb0:	e03a      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a12      	ldr	r2, [pc, #72]	; (8001f00 <HAL_ADC_ConfigChannel+0x374>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d108      	bne.n	8001ece <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4a13      	ldr	r2, [pc, #76]	; (8001f0c <HAL_ADC_ConfigChannel+0x380>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <HAL_ADC_ConfigChannel+0x364>)
 8001ec4:	0019      	movs	r1, r3
 8001ec6:	0010      	movs	r0, r2
 8001ec8:	f7ff fba0 	bl	800160c <LL_ADC_SetCommonPathInternalCh>
 8001ecc:	e02c      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <HAL_ADC_ConfigChannel+0x378>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d127      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <HAL_ADC_ConfigChannel+0x384>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	4a04      	ldr	r2, [pc, #16]	; (8001ef0 <HAL_ADC_ConfigChannel+0x364>)
 8001ee0:	0019      	movs	r1, r3
 8001ee2:	0010      	movs	r0, r2
 8001ee4:	f7ff fb92 	bl	800160c <LL_ADC_SetCommonPathInternalCh>
 8001ee8:	e01e      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x39c>
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	80000004 	.word	0x80000004
 8001ef0:	40012708 	.word	0x40012708
 8001ef4:	b0001000 	.word	0xb0001000
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	00030d40 	.word	0x00030d40
 8001f00:	b8004000 	.word	0xb8004000
 8001f04:	b4002000 	.word	0xb4002000
 8001f08:	ff7fffff 	.word	0xff7fffff
 8001f0c:	feffffff 	.word	0xfeffffff
 8001f10:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	2220      	movs	r2, #32
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001f20:	2317      	movs	r3, #23
 8001f22:	18fb      	adds	r3, r7, r3
 8001f24:	2201      	movs	r2, #1
 8001f26:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2254      	movs	r2, #84	; 0x54
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001f30:	2317      	movs	r3, #23
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	781b      	ldrb	r3, [r3, #0]
}
 8001f36:	0018      	movs	r0, r3
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b006      	add	sp, #24
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)

08001f40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	0002      	movs	r2, r0
 8001f48:	1dfb      	adds	r3, r7, #7
 8001f4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f4c:	1dfb      	adds	r3, r7, #7
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b7f      	cmp	r3, #127	; 0x7f
 8001f52:	d809      	bhi.n	8001f68 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f54:	1dfb      	adds	r3, r7, #7
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	001a      	movs	r2, r3
 8001f5a:	231f      	movs	r3, #31
 8001f5c:	401a      	ands	r2, r3
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <__NVIC_EnableIRQ+0x30>)
 8001f60:	2101      	movs	r1, #1
 8001f62:	4091      	lsls	r1, r2
 8001f64:	000a      	movs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	e000e100 	.word	0xe000e100

08001f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f74:	b590      	push	{r4, r7, lr}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	0002      	movs	r2, r0
 8001f7c:	6039      	str	r1, [r7, #0]
 8001f7e:	1dfb      	adds	r3, r7, #7
 8001f80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f82:	1dfb      	adds	r3, r7, #7
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b7f      	cmp	r3, #127	; 0x7f
 8001f88:	d828      	bhi.n	8001fdc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f8a:	4a2f      	ldr	r2, [pc, #188]	; (8002048 <__NVIC_SetPriority+0xd4>)
 8001f8c:	1dfb      	adds	r3, r7, #7
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	33c0      	adds	r3, #192	; 0xc0
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	589b      	ldr	r3, [r3, r2]
 8001f9a:	1dfa      	adds	r2, r7, #7
 8001f9c:	7812      	ldrb	r2, [r2, #0]
 8001f9e:	0011      	movs	r1, r2
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	400a      	ands	r2, r1
 8001fa4:	00d2      	lsls	r2, r2, #3
 8001fa6:	21ff      	movs	r1, #255	; 0xff
 8001fa8:	4091      	lsls	r1, r2
 8001faa:	000a      	movs	r2, r1
 8001fac:	43d2      	mvns	r2, r2
 8001fae:	401a      	ands	r2, r3
 8001fb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	019b      	lsls	r3, r3, #6
 8001fb6:	22ff      	movs	r2, #255	; 0xff
 8001fb8:	401a      	ands	r2, r3
 8001fba:	1dfb      	adds	r3, r7, #7
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	4003      	ands	r3, r0
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fc8:	481f      	ldr	r0, [pc, #124]	; (8002048 <__NVIC_SetPriority+0xd4>)
 8001fca:	1dfb      	adds	r3, r7, #7
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b25b      	sxtb	r3, r3
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	33c0      	adds	r3, #192	; 0xc0
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001fda:	e031      	b.n	8002040 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	; (800204c <__NVIC_SetPriority+0xd8>)
 8001fde:	1dfb      	adds	r3, r7, #7
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	230f      	movs	r3, #15
 8001fe6:	400b      	ands	r3, r1
 8001fe8:	3b08      	subs	r3, #8
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3306      	adds	r3, #6
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	18d3      	adds	r3, r2, r3
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	1dfa      	adds	r2, r7, #7
 8001ff8:	7812      	ldrb	r2, [r2, #0]
 8001ffa:	0011      	movs	r1, r2
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	400a      	ands	r2, r1
 8002000:	00d2      	lsls	r2, r2, #3
 8002002:	21ff      	movs	r1, #255	; 0xff
 8002004:	4091      	lsls	r1, r2
 8002006:	000a      	movs	r2, r1
 8002008:	43d2      	mvns	r2, r2
 800200a:	401a      	ands	r2, r3
 800200c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	019b      	lsls	r3, r3, #6
 8002012:	22ff      	movs	r2, #255	; 0xff
 8002014:	401a      	ands	r2, r3
 8002016:	1dfb      	adds	r3, r7, #7
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	0018      	movs	r0, r3
 800201c:	2303      	movs	r3, #3
 800201e:	4003      	ands	r3, r0
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002024:	4809      	ldr	r0, [pc, #36]	; (800204c <__NVIC_SetPriority+0xd8>)
 8002026:	1dfb      	adds	r3, r7, #7
 8002028:	781b      	ldrb	r3, [r3, #0]
 800202a:	001c      	movs	r4, r3
 800202c:	230f      	movs	r3, #15
 800202e:	4023      	ands	r3, r4
 8002030:	3b08      	subs	r3, #8
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	430a      	orrs	r2, r1
 8002036:	3306      	adds	r3, #6
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	18c3      	adds	r3, r0, r3
 800203c:	3304      	adds	r3, #4
 800203e:	601a      	str	r2, [r3, #0]
}
 8002040:	46c0      	nop			; (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b003      	add	sp, #12
 8002046:	bd90      	pop	{r4, r7, pc}
 8002048:	e000e100 	.word	0xe000e100
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	045b      	lsls	r3, r3, #17
 8002060:	429a      	cmp	r2, r3
 8002062:	d301      	bcc.n	8002068 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002064:	2301      	movs	r3, #1
 8002066:	e010      	b.n	800208a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002068:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <SysTick_Config+0x44>)
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	3a01      	subs	r2, #1
 800206e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002070:	2301      	movs	r3, #1
 8002072:	425b      	negs	r3, r3
 8002074:	2103      	movs	r1, #3
 8002076:	0018      	movs	r0, r3
 8002078:	f7ff ff7c 	bl	8001f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <SysTick_Config+0x44>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <SysTick_Config+0x44>)
 8002084:	2207      	movs	r2, #7
 8002086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002088:	2300      	movs	r3, #0
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b002      	add	sp, #8
 8002090:	bd80      	pop	{r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	e000e010 	.word	0xe000e010

08002098 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	210f      	movs	r1, #15
 80020a4:	187b      	adds	r3, r7, r1
 80020a6:	1c02      	adds	r2, r0, #0
 80020a8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	187b      	adds	r3, r7, r1
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	b25b      	sxtb	r3, r3
 80020b2:	0011      	movs	r1, r2
 80020b4:	0018      	movs	r0, r3
 80020b6:	f7ff ff5d 	bl	8001f74 <__NVIC_SetPriority>
}
 80020ba:	46c0      	nop			; (mov r8, r8)
 80020bc:	46bd      	mov	sp, r7
 80020be:	b004      	add	sp, #16
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b082      	sub	sp, #8
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	0002      	movs	r2, r0
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ce:	1dfb      	adds	r3, r7, #7
 80020d0:	781b      	ldrb	r3, [r3, #0]
 80020d2:	b25b      	sxtb	r3, r3
 80020d4:	0018      	movs	r0, r3
 80020d6:	f7ff ff33 	bl	8001f40 <__NVIC_EnableIRQ>
}
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	46bd      	mov	sp, r7
 80020de:	b002      	add	sp, #8
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	0018      	movs	r0, r3
 80020ee:	f7ff ffaf 	bl	8002050 <SysTick_Config>
 80020f2:	0003      	movs	r3, r0
}
 80020f4:	0018      	movs	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210a:	e147      	b.n	800239c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2101      	movs	r1, #1
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	4091      	lsls	r1, r2
 8002116:	000a      	movs	r2, r1
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d100      	bne.n	8002124 <HAL_GPIO_Init+0x28>
 8002122:	e138      	b.n	8002396 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d00b      	beq.n	8002144 <HAL_GPIO_Init+0x48>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d007      	beq.n	8002144 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002138:	2b11      	cmp	r3, #17
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b12      	cmp	r3, #18
 8002142:	d130      	bne.n	80021a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	409a      	lsls	r2, r3
 8002152:	0013      	movs	r3, r2
 8002154:	43da      	mvns	r2, r3
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	409a      	lsls	r2, r3
 8002166:	0013      	movs	r3, r2
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	4313      	orrs	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800217a:	2201      	movs	r2, #1
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
 8002180:	0013      	movs	r3, r2
 8002182:	43da      	mvns	r2, r3
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4013      	ands	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	2201      	movs	r2, #1
 8002192:	401a      	ands	r2, r3
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	409a      	lsls	r2, r3
 8002198:	0013      	movs	r3, r2
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	693a      	ldr	r2, [r7, #16]
 80021a4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2203      	movs	r2, #3
 80021b2:	409a      	lsls	r2, r3
 80021b4:	0013      	movs	r3, r2
 80021b6:	43da      	mvns	r2, r3
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4013      	ands	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	409a      	lsls	r2, r3
 80021c8:	0013      	movs	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0xea>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b12      	cmp	r3, #18
 80021e4:	d123      	bne.n	800222e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	08da      	lsrs	r2, r3, #3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3208      	adds	r2, #8
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	58d3      	ldr	r3, [r2, r3]
 80021f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2207      	movs	r2, #7
 80021f8:	4013      	ands	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	220f      	movs	r2, #15
 80021fe:	409a      	lsls	r2, r3
 8002200:	0013      	movs	r3, r2
 8002202:	43da      	mvns	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4013      	ands	r3, r2
 8002208:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	691a      	ldr	r2, [r3, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2107      	movs	r1, #7
 8002212:	400b      	ands	r3, r1
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	409a      	lsls	r2, r3
 8002218:	0013      	movs	r3, r2
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	08da      	lsrs	r2, r3, #3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3208      	adds	r2, #8
 8002228:	0092      	lsls	r2, r2, #2
 800222a:	6939      	ldr	r1, [r7, #16]
 800222c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	43da      	mvns	r2, r3
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2203      	movs	r2, #3
 800224c:	401a      	ands	r2, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	409a      	lsls	r2, r3
 8002254:	0013      	movs	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	2380      	movs	r3, #128	; 0x80
 8002268:	055b      	lsls	r3, r3, #21
 800226a:	4013      	ands	r3, r2
 800226c:	d100      	bne.n	8002270 <HAL_GPIO_Init+0x174>
 800226e:	e092      	b.n	8002396 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002270:	4a50      	ldr	r2, [pc, #320]	; (80023b4 <HAL_GPIO_Init+0x2b8>)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3318      	adds	r3, #24
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	589b      	ldr	r3, [r3, r2]
 800227c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	2203      	movs	r2, #3
 8002282:	4013      	ands	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	220f      	movs	r2, #15
 8002288:	409a      	lsls	r2, r3
 800228a:	0013      	movs	r3, r2
 800228c:	43da      	mvns	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4013      	ands	r3, r2
 8002292:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	23a0      	movs	r3, #160	; 0xa0
 8002298:	05db      	lsls	r3, r3, #23
 800229a:	429a      	cmp	r2, r3
 800229c:	d013      	beq.n	80022c6 <HAL_GPIO_Init+0x1ca>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a45      	ldr	r2, [pc, #276]	; (80023b8 <HAL_GPIO_Init+0x2bc>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d00d      	beq.n	80022c2 <HAL_GPIO_Init+0x1c6>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a44      	ldr	r2, [pc, #272]	; (80023bc <HAL_GPIO_Init+0x2c0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d007      	beq.n	80022be <HAL_GPIO_Init+0x1c2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a43      	ldr	r2, [pc, #268]	; (80023c0 <HAL_GPIO_Init+0x2c4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d101      	bne.n	80022ba <HAL_GPIO_Init+0x1be>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e006      	b.n	80022c8 <HAL_GPIO_Init+0x1cc>
 80022ba:	2305      	movs	r3, #5
 80022bc:	e004      	b.n	80022c8 <HAL_GPIO_Init+0x1cc>
 80022be:	2302      	movs	r3, #2
 80022c0:	e002      	b.n	80022c8 <HAL_GPIO_Init+0x1cc>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_GPIO_Init+0x1cc>
 80022c6:	2300      	movs	r3, #0
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	2103      	movs	r1, #3
 80022cc:	400a      	ands	r2, r1
 80022ce:	00d2      	lsls	r2, r2, #3
 80022d0:	4093      	lsls	r3, r2
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80022d8:	4936      	ldr	r1, [pc, #216]	; (80023b4 <HAL_GPIO_Init+0x2b8>)
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	089b      	lsrs	r3, r3, #2
 80022de:	3318      	adds	r3, #24
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022e6:	4a33      	ldr	r2, [pc, #204]	; (80023b4 <HAL_GPIO_Init+0x2b8>)
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	58d3      	ldr	r3, [r2, r3]
 80022ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	43da      	mvns	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	025b      	lsls	r3, r3, #9
 8002300:	4013      	ands	r3, r2
 8002302:	d003      	beq.n	800230c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8002304:	693a      	ldr	r2, [r7, #16]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800230c:	4929      	ldr	r1, [pc, #164]	; (80023b4 <HAL_GPIO_Init+0x2b8>)
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8002314:	4a27      	ldr	r2, [pc, #156]	; (80023b4 <HAL_GPIO_Init+0x2b8>)
 8002316:	2384      	movs	r3, #132	; 0x84
 8002318:	58d3      	ldr	r3, [r2, r3]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43da      	mvns	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	029b      	lsls	r3, r3, #10
 800232e:	4013      	ands	r3, r2
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800233a:	491e      	ldr	r1, [pc, #120]	; (80023b4 <HAL_GPIO_Init+0x2b8>)
 800233c:	2284      	movs	r2, #132	; 0x84
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002342:	4b1c      	ldr	r3, [pc, #112]	; (80023b4 <HAL_GPIO_Init+0x2b8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	43da      	mvns	r2, r3
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4013      	ands	r3, r2
 8002350:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685a      	ldr	r2, [r3, #4]
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	035b      	lsls	r3, r3, #13
 800235a:	4013      	ands	r3, r2
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4313      	orrs	r3, r2
 8002364:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002366:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <HAL_GPIO_Init+0x2b8>)
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <HAL_GPIO_Init+0x2b8>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	43da      	mvns	r2, r3
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	039b      	lsls	r3, r3, #14
 8002384:	4013      	ands	r3, r2
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <HAL_GPIO_Init+0x2b8>)
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	3301      	adds	r3, #1
 800239a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	40da      	lsrs	r2, r3
 80023a4:	1e13      	subs	r3, r2, #0
 80023a6:	d000      	beq.n	80023aa <HAL_GPIO_Init+0x2ae>
 80023a8:	e6b0      	b.n	800210c <HAL_GPIO_Init+0x10>
  }
}
 80023aa:	46c0      	nop			; (mov r8, r8)
 80023ac:	46c0      	nop			; (mov r8, r8)
 80023ae:	46bd      	mov	sp, r7
 80023b0:	b006      	add	sp, #24
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021800 	.word	0x40021800
 80023b8:	50000400 	.word	0x50000400
 80023bc:	50000800 	.word	0x50000800
 80023c0:	50000c00 	.word	0x50000c00

080023c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	000a      	movs	r2, r1
 80023ce:	1cbb      	adds	r3, r7, #2
 80023d0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	1cba      	adds	r2, r7, #2
 80023d8:	8812      	ldrh	r2, [r2, #0]
 80023da:	4013      	ands	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80023de:	230f      	movs	r3, #15
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	2201      	movs	r2, #1
 80023e4:	701a      	strb	r2, [r3, #0]
 80023e6:	e003      	b.n	80023f0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023e8:	230f      	movs	r3, #15
 80023ea:	18fb      	adds	r3, r7, r3
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80023f0:	230f      	movs	r3, #15
 80023f2:	18fb      	adds	r3, r7, r3
 80023f4:	781b      	ldrb	r3, [r3, #0]
}
 80023f6:	0018      	movs	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	b004      	add	sp, #16
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	0008      	movs	r0, r1
 8002408:	0011      	movs	r1, r2
 800240a:	1cbb      	adds	r3, r7, #2
 800240c:	1c02      	adds	r2, r0, #0
 800240e:	801a      	strh	r2, [r3, #0]
 8002410:	1c7b      	adds	r3, r7, #1
 8002412:	1c0a      	adds	r2, r1, #0
 8002414:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002416:	1c7b      	adds	r3, r7, #1
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d004      	beq.n	8002428 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800241e:	1cbb      	adds	r3, r7, #2
 8002420:	881a      	ldrh	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002426:	e003      	b.n	8002430 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002428:	1cbb      	adds	r3, r7, #2
 800242a:	881a      	ldrh	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002430:	46c0      	nop			; (mov r8, r8)
 8002432:	46bd      	mov	sp, r7
 8002434:	b002      	add	sp, #8
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	0002      	movs	r2, r0
 8002440:	1dbb      	adds	r3, r7, #6
 8002442:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	1dba      	adds	r2, r7, #6
 800244a:	8812      	ldrh	r2, [r2, #0]
 800244c:	4013      	ands	r3, r2
 800244e:	d008      	beq.n	8002462 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002450:	4b0d      	ldr	r3, [pc, #52]	; (8002488 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002452:	1dba      	adds	r2, r7, #6
 8002454:	8812      	ldrh	r2, [r2, #0]
 8002456:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002458:	1dbb      	adds	r3, r7, #6
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	0018      	movs	r0, r3
 800245e:	f7fe ff93 	bl	8001388 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	1dba      	adds	r2, r7, #6
 8002468:	8812      	ldrh	r2, [r2, #0]
 800246a:	4013      	ands	r3, r2
 800246c:	d008      	beq.n	8002480 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002470:	1dba      	adds	r2, r7, #6
 8002472:	8812      	ldrh	r2, [r2, #0]
 8002474:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002476:	1dbb      	adds	r3, r7, #6
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	0018      	movs	r0, r3
 800247c:	f7fe ff93 	bl	80013a6 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002480:	46c0      	nop			; (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b002      	add	sp, #8
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40021800 	.word	0x40021800

0800248c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b03      	ldr	r3, [pc, #12]	; (80024a4 <HAL_PWR_EnableBkUpAccess+0x18>)
 8002496:	2180      	movs	r1, #128	; 0x80
 8002498:	0049      	lsls	r1, r1, #1
 800249a:	430a      	orrs	r2, r1
 800249c:	601a      	str	r2, [r3, #0]
}
 800249e:	46c0      	nop			; (mov r8, r8)
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40007000 	.word	0x40007000

080024a8 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	000a      	movs	r2, r1
 80024b2:	1cfb      	adds	r3, r7, #3
 80024b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d009      	beq.n	80024d0 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_PWR_EnterSTOPMode+0x68>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2207      	movs	r2, #7
 80024c2:	4393      	bics	r3, r2
 80024c4:	001a      	movs	r2, r3
 80024c6:	4b12      	ldr	r3, [pc, #72]	; (8002510 <HAL_PWR_EnterSTOPMode+0x68>)
 80024c8:	2101      	movs	r1, #1
 80024ca:	430a      	orrs	r2, r1
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	e005      	b.n	80024dc <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_PWR_EnterSTOPMode+0x68>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <HAL_PWR_EnterSTOPMode+0x68>)
 80024d6:	2107      	movs	r1, #7
 80024d8:	438a      	bics	r2, r1
 80024da:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80024dc:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <HAL_PWR_EnterSTOPMode+0x6c>)
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_PWR_EnterSTOPMode+0x6c>)
 80024e2:	2104      	movs	r1, #4
 80024e4:	430a      	orrs	r2, r1
 80024e6:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80024e8:	1cfb      	adds	r3, r7, #3
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80024f0:	bf30      	wfi
 80024f2:	e002      	b.n	80024fa <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80024f4:	bf40      	sev
    __WFE();
 80024f6:	bf20      	wfe
    __WFE();
 80024f8:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_PWR_EnterSTOPMode+0x6c>)
 80024fc:	691a      	ldr	r2, [r3, #16]
 80024fe:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_PWR_EnterSTOPMode+0x6c>)
 8002500:	2104      	movs	r1, #4
 8002502:	438a      	bics	r2, r1
 8002504:	611a      	str	r2, [r3, #16]
}
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b002      	add	sp, #8
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	40007000 	.word	0x40007000
 8002514:	e000ed00 	.word	0xe000ed00

08002518 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002520:	4b19      	ldr	r3, [pc, #100]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a19      	ldr	r2, [pc, #100]	; (800258c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002526:	4013      	ands	r3, r2
 8002528:	0019      	movs	r1, r3
 800252a:	4b17      	ldr	r3, [pc, #92]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	430a      	orrs	r2, r1
 8002530:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	429a      	cmp	r2, r3
 800253a:	d11f      	bne.n	800257c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 800253c:	4b14      	ldr	r3, [pc, #80]	; (8002590 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	0013      	movs	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	189b      	adds	r3, r3, r2
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	4912      	ldr	r1, [pc, #72]	; (8002594 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800254a:	0018      	movs	r0, r3
 800254c:	f7fd fdd8 	bl	8000100 <__udivsi3>
 8002550:	0003      	movs	r3, r0
 8002552:	3301      	adds	r3, #1
 8002554:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002556:	e008      	b.n	800256a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	3b01      	subs	r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	e001      	b.n	800256a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e009      	b.n	800257e <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800256a:	4b07      	ldr	r3, [pc, #28]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	2380      	movs	r3, #128	; 0x80
 8002570:	00db      	lsls	r3, r3, #3
 8002572:	401a      	ands	r2, r3
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	429a      	cmp	r2, r3
 800257a:	d0ed      	beq.n	8002558 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	0018      	movs	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	b004      	add	sp, #16
 8002584:	bd80      	pop	{r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	40007000 	.word	0x40007000
 800258c:	fffff9ff 	.word	0xfffff9ff
 8002590:	20000000 	.word	0x20000000
 8002594:	000f4240 	.word	0x000f4240

08002598 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e2f9      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2201      	movs	r2, #1
 80025b0:	4013      	ands	r3, r2
 80025b2:	d100      	bne.n	80025b6 <HAL_RCC_OscConfig+0x1e>
 80025b4:	e07c      	b.n	80026b0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025b6:	4bc3      	ldr	r3, [pc, #780]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	2238      	movs	r2, #56	; 0x38
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c0:	4bc0      	ldr	r3, [pc, #768]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2203      	movs	r2, #3
 80025c6:	4013      	ands	r3, r2
 80025c8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b10      	cmp	r3, #16
 80025ce:	d102      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3e>
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d002      	beq.n	80025dc <HAL_RCC_OscConfig+0x44>
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d10b      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	4bb9      	ldr	r3, [pc, #740]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	2380      	movs	r3, #128	; 0x80
 80025e2:	029b      	lsls	r3, r3, #10
 80025e4:	4013      	ands	r3, r2
 80025e6:	d062      	beq.n	80026ae <HAL_RCC_OscConfig+0x116>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d15e      	bne.n	80026ae <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e2d4      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	2380      	movs	r3, #128	; 0x80
 80025fa:	025b      	lsls	r3, r3, #9
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_OscConfig+0x78>
 8002600:	4bb0      	ldr	r3, [pc, #704]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	4baf      	ldr	r3, [pc, #700]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002606:	2180      	movs	r1, #128	; 0x80
 8002608:	0249      	lsls	r1, r1, #9
 800260a:	430a      	orrs	r2, r1
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	e020      	b.n	8002652 <HAL_RCC_OscConfig+0xba>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	23a0      	movs	r3, #160	; 0xa0
 8002616:	02db      	lsls	r3, r3, #11
 8002618:	429a      	cmp	r2, r3
 800261a:	d10e      	bne.n	800263a <HAL_RCC_OscConfig+0xa2>
 800261c:	4ba9      	ldr	r3, [pc, #676]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4ba8      	ldr	r3, [pc, #672]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002622:	2180      	movs	r1, #128	; 0x80
 8002624:	02c9      	lsls	r1, r1, #11
 8002626:	430a      	orrs	r2, r1
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	4ba6      	ldr	r3, [pc, #664]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	4ba5      	ldr	r3, [pc, #660]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002630:	2180      	movs	r1, #128	; 0x80
 8002632:	0249      	lsls	r1, r1, #9
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e00b      	b.n	8002652 <HAL_RCC_OscConfig+0xba>
 800263a:	4ba2      	ldr	r3, [pc, #648]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4ba1      	ldr	r3, [pc, #644]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002640:	49a1      	ldr	r1, [pc, #644]	; (80028c8 <HAL_RCC_OscConfig+0x330>)
 8002642:	400a      	ands	r2, r1
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	4b9f      	ldr	r3, [pc, #636]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b9e      	ldr	r3, [pc, #632]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800264c:	499f      	ldr	r1, [pc, #636]	; (80028cc <HAL_RCC_OscConfig+0x334>)
 800264e:	400a      	ands	r2, r1
 8002650:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d014      	beq.n	8002684 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7fe ff93 	bl	8001584 <HAL_GetTick>
 800265e:	0003      	movs	r3, r0
 8002660:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe ff8e 	bl	8001584 <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e293      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002676:	4b93      	ldr	r3, [pc, #588]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	2380      	movs	r3, #128	; 0x80
 800267c:	029b      	lsls	r3, r3, #10
 800267e:	4013      	ands	r3, r2
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0xcc>
 8002682:	e015      	b.n	80026b0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7fe ff7e 	bl	8001584 <HAL_GetTick>
 8002688:	0003      	movs	r3, r0
 800268a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800268c:	e008      	b.n	80026a0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800268e:	f7fe ff79 	bl	8001584 <HAL_GetTick>
 8002692:	0002      	movs	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b64      	cmp	r3, #100	; 0x64
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e27e      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026a0:	4b88      	ldr	r3, [pc, #544]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	2380      	movs	r3, #128	; 0x80
 80026a6:	029b      	lsls	r3, r3, #10
 80026a8:	4013      	ands	r3, r2
 80026aa:	d1f0      	bne.n	800268e <HAL_RCC_OscConfig+0xf6>
 80026ac:	e000      	b.n	80026b0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2202      	movs	r2, #2
 80026b6:	4013      	ands	r3, r2
 80026b8:	d100      	bne.n	80026bc <HAL_RCC_OscConfig+0x124>
 80026ba:	e099      	b.n	80027f0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026bc:	4b81      	ldr	r3, [pc, #516]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	2238      	movs	r2, #56	; 0x38
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026c6:	4b7f      	ldr	r3, [pc, #508]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2203      	movs	r2, #3
 80026cc:	4013      	ands	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d102      	bne.n	80026dc <HAL_RCC_OscConfig+0x144>
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d002      	beq.n	80026e2 <HAL_RCC_OscConfig+0x14a>
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d135      	bne.n	800274e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026e2:	4b78      	ldr	r3, [pc, #480]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	2380      	movs	r3, #128	; 0x80
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	4013      	ands	r3, r2
 80026ec:	d005      	beq.n	80026fa <HAL_RCC_OscConfig+0x162>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e251      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026fa:	4b72      	ldr	r3, [pc, #456]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a74      	ldr	r2, [pc, #464]	; (80028d0 <HAL_RCC_OscConfig+0x338>)
 8002700:	4013      	ands	r3, r2
 8002702:	0019      	movs	r1, r3
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	021a      	lsls	r2, r3, #8
 800270a:	4b6e      	ldr	r3, [pc, #440]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800270c:	430a      	orrs	r2, r1
 800270e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d112      	bne.n	800273c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002716:	4b6b      	ldr	r3, [pc, #428]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6e      	ldr	r2, [pc, #440]	; (80028d4 <HAL_RCC_OscConfig+0x33c>)
 800271c:	4013      	ands	r3, r2
 800271e:	0019      	movs	r1, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	4b67      	ldr	r3, [pc, #412]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002726:	430a      	orrs	r2, r1
 8002728:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800272a:	4b66      	ldr	r3, [pc, #408]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0adb      	lsrs	r3, r3, #11
 8002730:	2207      	movs	r2, #7
 8002732:	4013      	ands	r3, r2
 8002734:	4a68      	ldr	r2, [pc, #416]	; (80028d8 <HAL_RCC_OscConfig+0x340>)
 8002736:	40da      	lsrs	r2, r3
 8002738:	4b68      	ldr	r3, [pc, #416]	; (80028dc <HAL_RCC_OscConfig+0x344>)
 800273a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800273c:	4b68      	ldr	r3, [pc, #416]	; (80028e0 <HAL_RCC_OscConfig+0x348>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	0018      	movs	r0, r3
 8002742:	f7fe fec3 	bl	80014cc <HAL_InitTick>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d051      	beq.n	80027ee <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e227      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d030      	beq.n	80027b8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002756:	4b5b      	ldr	r3, [pc, #364]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a5e      	ldr	r2, [pc, #376]	; (80028d4 <HAL_RCC_OscConfig+0x33c>)
 800275c:	4013      	ands	r3, r2
 800275e:	0019      	movs	r1, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	4b57      	ldr	r3, [pc, #348]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800276a:	4b56      	ldr	r3, [pc, #344]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002770:	2180      	movs	r1, #128	; 0x80
 8002772:	0049      	lsls	r1, r1, #1
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7fe ff04 	bl	8001584 <HAL_GetTick>
 800277c:	0003      	movs	r3, r0
 800277e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002780:	e008      	b.n	8002794 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002782:	f7fe feff 	bl	8001584 <HAL_GetTick>
 8002786:	0002      	movs	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e204      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002794:	4b4b      	ldr	r3, [pc, #300]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	2380      	movs	r3, #128	; 0x80
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	4013      	ands	r3, r2
 800279e:	d0f0      	beq.n	8002782 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027a0:	4b48      	ldr	r3, [pc, #288]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a4a      	ldr	r2, [pc, #296]	; (80028d0 <HAL_RCC_OscConfig+0x338>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	0019      	movs	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	021a      	lsls	r2, r3, #8
 80027b0:	4b44      	ldr	r3, [pc, #272]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80027b2:	430a      	orrs	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	e01b      	b.n	80027f0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80027b8:	4b42      	ldr	r3, [pc, #264]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b41      	ldr	r3, [pc, #260]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80027be:	4949      	ldr	r1, [pc, #292]	; (80028e4 <HAL_RCC_OscConfig+0x34c>)
 80027c0:	400a      	ands	r2, r1
 80027c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe fede 	bl	8001584 <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ce:	f7fe fed9 	bl	8001584 <HAL_GetTick>
 80027d2:	0002      	movs	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e1de      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e0:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4013      	ands	r3, r2
 80027ea:	d1f0      	bne.n	80027ce <HAL_RCC_OscConfig+0x236>
 80027ec:	e000      	b.n	80027f0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2208      	movs	r2, #8
 80027f6:	4013      	ands	r3, r2
 80027f8:	d047      	beq.n	800288a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80027fa:	4b32      	ldr	r3, [pc, #200]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	2238      	movs	r2, #56	; 0x38
 8002800:	4013      	ands	r3, r2
 8002802:	2b18      	cmp	r3, #24
 8002804:	d10a      	bne.n	800281c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002806:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800280a:	2202      	movs	r2, #2
 800280c:	4013      	ands	r3, r2
 800280e:	d03c      	beq.n	800288a <HAL_RCC_OscConfig+0x2f2>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d138      	bne.n	800288a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e1c0      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d019      	beq.n	8002858 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002826:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002828:	4b26      	ldr	r3, [pc, #152]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800282a:	2101      	movs	r1, #1
 800282c:	430a      	orrs	r2, r1
 800282e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fea8 	bl	8001584 <HAL_GetTick>
 8002834:	0003      	movs	r3, r0
 8002836:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe fea3 	bl	8001584 <HAL_GetTick>
 800283e:	0002      	movs	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1a8      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800284c:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800284e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002850:	2202      	movs	r2, #2
 8002852:	4013      	ands	r3, r2
 8002854:	d0f1      	beq.n	800283a <HAL_RCC_OscConfig+0x2a2>
 8002856:	e018      	b.n	800288a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800285a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800285c:	4b19      	ldr	r3, [pc, #100]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 800285e:	2101      	movs	r1, #1
 8002860:	438a      	bics	r2, r1
 8002862:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fe8e 	bl	8001584 <HAL_GetTick>
 8002868:	0003      	movs	r3, r0
 800286a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286e:	f7fe fe89 	bl	8001584 <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e18e      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002880:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 8002882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002884:	2202      	movs	r2, #2
 8002886:	4013      	ands	r3, r2
 8002888:	d1f1      	bne.n	800286e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d100      	bne.n	8002896 <HAL_RCC_OscConfig+0x2fe>
 8002894:	e0c6      	b.n	8002a24 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002896:	231f      	movs	r3, #31
 8002898:	18fb      	adds	r3, r7, r3
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	2238      	movs	r2, #56	; 0x38
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b20      	cmp	r3, #32
 80028a8:	d11e      	bne.n	80028e8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <HAL_RCC_OscConfig+0x32c>)
 80028ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ae:	2202      	movs	r2, #2
 80028b0:	4013      	ands	r3, r2
 80028b2:	d100      	bne.n	80028b6 <HAL_RCC_OscConfig+0x31e>
 80028b4:	e0b6      	b.n	8002a24 <HAL_RCC_OscConfig+0x48c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d000      	beq.n	80028c0 <HAL_RCC_OscConfig+0x328>
 80028be:	e0b1      	b.n	8002a24 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e16c      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	fffeffff 	.word	0xfffeffff
 80028cc:	fffbffff 	.word	0xfffbffff
 80028d0:	ffff80ff 	.word	0xffff80ff
 80028d4:	ffffc7ff 	.word	0xffffc7ff
 80028d8:	00f42400 	.word	0x00f42400
 80028dc:	20000000 	.word	0x20000000
 80028e0:	20000004 	.word	0x20000004
 80028e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028e8:	4baf      	ldr	r3, [pc, #700]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 80028ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ec:	2380      	movs	r3, #128	; 0x80
 80028ee:	055b      	lsls	r3, r3, #21
 80028f0:	4013      	ands	r3, r2
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_OscConfig+0x360>
 80028f4:	2301      	movs	r3, #1
 80028f6:	e000      	b.n	80028fa <HAL_RCC_OscConfig+0x362>
 80028f8:	2300      	movs	r3, #0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d011      	beq.n	8002922 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	4baa      	ldr	r3, [pc, #680]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002902:	4ba9      	ldr	r3, [pc, #676]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002904:	2180      	movs	r1, #128	; 0x80
 8002906:	0549      	lsls	r1, r1, #21
 8002908:	430a      	orrs	r2, r1
 800290a:	63da      	str	r2, [r3, #60]	; 0x3c
 800290c:	4ba6      	ldr	r3, [pc, #664]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 800290e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	055b      	lsls	r3, r3, #21
 8002914:	4013      	ands	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800291a:	231f      	movs	r3, #31
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002922:	4ba2      	ldr	r3, [pc, #648]	; (8002bac <HAL_RCC_OscConfig+0x614>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4013      	ands	r3, r2
 800292c:	d11a      	bne.n	8002964 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800292e:	4b9f      	ldr	r3, [pc, #636]	; (8002bac <HAL_RCC_OscConfig+0x614>)
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	4b9e      	ldr	r3, [pc, #632]	; (8002bac <HAL_RCC_OscConfig+0x614>)
 8002934:	2180      	movs	r1, #128	; 0x80
 8002936:	0049      	lsls	r1, r1, #1
 8002938:	430a      	orrs	r2, r1
 800293a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800293c:	f7fe fe22 	bl	8001584 <HAL_GetTick>
 8002940:	0003      	movs	r3, r0
 8002942:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002946:	f7fe fe1d 	bl	8001584 <HAL_GetTick>
 800294a:	0002      	movs	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e122      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002958:	4b94      	ldr	r3, [pc, #592]	; (8002bac <HAL_RCC_OscConfig+0x614>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	4013      	ands	r3, r2
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d106      	bne.n	800297a <HAL_RCC_OscConfig+0x3e2>
 800296c:	4b8e      	ldr	r3, [pc, #568]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 800296e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002970:	4b8d      	ldr	r3, [pc, #564]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002972:	2101      	movs	r1, #1
 8002974:	430a      	orrs	r2, r1
 8002976:	65da      	str	r2, [r3, #92]	; 0x5c
 8002978:	e01c      	b.n	80029b4 <HAL_RCC_OscConfig+0x41c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0x404>
 8002982:	4b89      	ldr	r3, [pc, #548]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002984:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002986:	4b88      	ldr	r3, [pc, #544]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002988:	2104      	movs	r1, #4
 800298a:	430a      	orrs	r2, r1
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c
 800298e:	4b86      	ldr	r3, [pc, #536]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002990:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002992:	4b85      	ldr	r3, [pc, #532]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002994:	2101      	movs	r1, #1
 8002996:	430a      	orrs	r2, r1
 8002998:	65da      	str	r2, [r3, #92]	; 0x5c
 800299a:	e00b      	b.n	80029b4 <HAL_RCC_OscConfig+0x41c>
 800299c:	4b82      	ldr	r3, [pc, #520]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 800299e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029a0:	4b81      	ldr	r3, [pc, #516]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 80029a2:	2101      	movs	r1, #1
 80029a4:	438a      	bics	r2, r1
 80029a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80029a8:	4b7f      	ldr	r3, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 80029aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80029ac:	4b7e      	ldr	r3, [pc, #504]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 80029ae:	2104      	movs	r1, #4
 80029b0:	438a      	bics	r2, r1
 80029b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d014      	beq.n	80029e6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe fde2 	bl	8001584 <HAL_GetTick>
 80029c0:	0003      	movs	r3, r0
 80029c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029c4:	e009      	b.n	80029da <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c6:	f7fe fddd 	bl	8001584 <HAL_GetTick>
 80029ca:	0002      	movs	r2, r0
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	4a77      	ldr	r2, [pc, #476]	; (8002bb0 <HAL_RCC_OscConfig+0x618>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e0e1      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029da:	4b73      	ldr	r3, [pc, #460]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 80029dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029de:	2202      	movs	r2, #2
 80029e0:	4013      	ands	r3, r2
 80029e2:	d0f0      	beq.n	80029c6 <HAL_RCC_OscConfig+0x42e>
 80029e4:	e013      	b.n	8002a0e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e6:	f7fe fdcd 	bl	8001584 <HAL_GetTick>
 80029ea:	0003      	movs	r3, r0
 80029ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029ee:	e009      	b.n	8002a04 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029f0:	f7fe fdc8 	bl	8001584 <HAL_GetTick>
 80029f4:	0002      	movs	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	4a6d      	ldr	r2, [pc, #436]	; (8002bb0 <HAL_RCC_OscConfig+0x618>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e0cc      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a04:	4b68      	ldr	r3, [pc, #416]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a08:	2202      	movs	r2, #2
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002a0e:	231f      	movs	r3, #31
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d105      	bne.n	8002a24 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a18:	4b63      	ldr	r3, [pc, #396]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a1c:	4b62      	ldr	r3, [pc, #392]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002a1e:	4965      	ldr	r1, [pc, #404]	; (8002bb4 <HAL_RCC_OscConfig+0x61c>)
 8002a20:	400a      	ands	r2, r1
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d100      	bne.n	8002a2e <HAL_RCC_OscConfig+0x496>
 8002a2c:	e0b6      	b.n	8002b9c <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2e:	4b5e      	ldr	r3, [pc, #376]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2238      	movs	r2, #56	; 0x38
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b10      	cmp	r3, #16
 8002a38:	d100      	bne.n	8002a3c <HAL_RCC_OscConfig+0x4a4>
 8002a3a:	e07e      	b.n	8002b3a <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d153      	bne.n	8002aec <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a44:	4b58      	ldr	r3, [pc, #352]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b57      	ldr	r3, [pc, #348]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002a4a:	495b      	ldr	r1, [pc, #364]	; (8002bb8 <HAL_RCC_OscConfig+0x620>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a50:	f7fe fd98 	bl	8001584 <HAL_GetTick>
 8002a54:	0003      	movs	r3, r0
 8002a56:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7fe fd93 	bl	8001584 <HAL_GetTick>
 8002a5e:	0002      	movs	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e098      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a6c:	4b4e      	ldr	r3, [pc, #312]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	049b      	lsls	r3, r3, #18
 8002a74:	4013      	ands	r3, r2
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a78:	4b4b      	ldr	r3, [pc, #300]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4a4f      	ldr	r2, [pc, #316]	; (8002bbc <HAL_RCC_OscConfig+0x624>)
 8002a7e:	4013      	ands	r3, r2
 8002a80:	0019      	movs	r1, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1a      	ldr	r2, [r3, #32]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	4b41      	ldr	r3, [pc, #260]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002aa6:	4b40      	ldr	r3, [pc, #256]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002aac:	2180      	movs	r1, #128	; 0x80
 8002aae:	0449      	lsls	r1, r1, #17
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ab4:	4b3c      	ldr	r3, [pc, #240]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002ab6:	68da      	ldr	r2, [r3, #12]
 8002ab8:	4b3b      	ldr	r3, [pc, #236]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002aba:	2180      	movs	r1, #128	; 0x80
 8002abc:	0549      	lsls	r1, r1, #21
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac2:	f7fe fd5f 	bl	8001584 <HAL_GetTick>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002acc:	f7fe fd5a 	bl	8001584 <HAL_GetTick>
 8002ad0:	0002      	movs	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e05f      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ade:	4b32      	ldr	r3, [pc, #200]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	2380      	movs	r3, #128	; 0x80
 8002ae4:	049b      	lsls	r3, r3, #18
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x534>
 8002aea:	e057      	b.n	8002b9c <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aec:	4b2e      	ldr	r3, [pc, #184]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	4b2d      	ldr	r3, [pc, #180]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002af2:	4931      	ldr	r1, [pc, #196]	; (8002bb8 <HAL_RCC_OscConfig+0x620>)
 8002af4:	400a      	ands	r2, r1
 8002af6:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002af8:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002afa:	68da      	ldr	r2, [r3, #12]
 8002afc:	4b2a      	ldr	r3, [pc, #168]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002afe:	2103      	movs	r1, #3
 8002b00:	438a      	bics	r2, r1
 8002b02:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002b04:	4b28      	ldr	r3, [pc, #160]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	4b27      	ldr	r3, [pc, #156]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002b0a:	492d      	ldr	r1, [pc, #180]	; (8002bc0 <HAL_RCC_OscConfig+0x628>)
 8002b0c:	400a      	ands	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fd38 	bl	8001584 <HAL_GetTick>
 8002b14:	0003      	movs	r3, r0
 8002b16:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7fe fd33 	bl	8001584 <HAL_GetTick>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e038      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	049b      	lsls	r3, r3, #18
 8002b34:	4013      	ands	r3, r2
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x582>
 8002b38:	e030      	b.n	8002b9c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e02b      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b46:	4b18      	ldr	r3, [pc, #96]	; (8002ba8 <HAL_RCC_OscConfig+0x610>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	401a      	ands	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d11e      	bne.n	8002b98 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2270      	movs	r2, #112	; 0x70
 8002b5e:	401a      	ands	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d117      	bne.n	8002b98 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	23fe      	movs	r3, #254	; 0xfe
 8002b6c:	01db      	lsls	r3, r3, #7
 8002b6e:	401a      	ands	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b74:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d10e      	bne.n	8002b98 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	23f8      	movs	r3, #248	; 0xf8
 8002b7e:	039b      	lsls	r3, r3, #14
 8002b80:	401a      	ands	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d106      	bne.n	8002b98 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	0f5b      	lsrs	r3, r3, #29
 8002b8e:	075a      	lsls	r2, r3, #29
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b008      	add	sp, #32
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40007000 	.word	0x40007000
 8002bb0:	00001388 	.word	0x00001388
 8002bb4:	efffffff 	.word	0xefffffff
 8002bb8:	feffffff 	.word	0xfeffffff
 8002bbc:	1fc1808c 	.word	0x1fc1808c
 8002bc0:	effeffff 	.word	0xeffeffff

08002bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e0e9      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bd8:	4b76      	ldr	r3, [pc, #472]	; (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2207      	movs	r2, #7
 8002bde:	4013      	ands	r3, r2
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d91e      	bls.n	8002c24 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	4b73      	ldr	r3, [pc, #460]	; (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2207      	movs	r2, #7
 8002bec:	4393      	bics	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	4b70      	ldr	r3, [pc, #448]	; (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bf8:	f7fe fcc4 	bl	8001584 <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c00:	e009      	b.n	8002c16 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c02:	f7fe fcbf 	bl	8001584 <HAL_GetTick>
 8002c06:	0002      	movs	r2, r0
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	4a6a      	ldr	r2, [pc, #424]	; (8002db8 <HAL_RCC_ClockConfig+0x1f4>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d901      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e0ca      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002c16:	4b67      	ldr	r3, [pc, #412]	; (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2207      	movs	r2, #7
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d1ee      	bne.n	8002c02 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	d015      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2204      	movs	r2, #4
 8002c34:	4013      	ands	r3, r2
 8002c36:	d006      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c38:	4b60      	ldr	r3, [pc, #384]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	4b5f      	ldr	r3, [pc, #380]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c3e:	21e0      	movs	r1, #224	; 0xe0
 8002c40:	01c9      	lsls	r1, r1, #7
 8002c42:	430a      	orrs	r2, r1
 8002c44:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c46:	4b5d      	ldr	r3, [pc, #372]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	4a5d      	ldr	r2, [pc, #372]	; (8002dc0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	0019      	movs	r1, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c56:	430a      	orrs	r2, r1
 8002c58:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	d057      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6c:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	2380      	movs	r3, #128	; 0x80
 8002c72:	029b      	lsls	r3, r3, #10
 8002c74:	4013      	ands	r3, r2
 8002c76:	d12b      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e097      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c84:	4b4d      	ldr	r3, [pc, #308]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	049b      	lsls	r3, r3, #18
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d11f      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e08b      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d107      	bne.n	8002cac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c9c:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d113      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e07f      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb4:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cb8:	2202      	movs	r2, #2
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d108      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e074      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cc2:	4b3e      	ldr	r3, [pc, #248]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc6:	2202      	movs	r2, #2
 8002cc8:	4013      	ands	r3, r2
 8002cca:	d101      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e06d      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cd0:	4b3a      	ldr	r3, [pc, #232]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	4393      	bics	r3, r2
 8002cd8:	0019      	movs	r1, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685a      	ldr	r2, [r3, #4]
 8002cde:	4b37      	ldr	r3, [pc, #220]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce4:	f7fe fc4e 	bl	8001584 <HAL_GetTick>
 8002ce8:	0003      	movs	r3, r0
 8002cea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cec:	e009      	b.n	8002d02 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cee:	f7fe fc49 	bl	8001584 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	4a2f      	ldr	r2, [pc, #188]	; (8002db8 <HAL_RCC_ClockConfig+0x1f4>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e054      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	4b2e      	ldr	r3, [pc, #184]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2238      	movs	r2, #56	; 0x38
 8002d08:	401a      	ands	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d1ec      	bne.n	8002cee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d14:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2207      	movs	r2, #7
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	683a      	ldr	r2, [r7, #0]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d21e      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2207      	movs	r2, #7
 8002d28:	4393      	bics	r3, r2
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d34:	f7fe fc26 	bl	8001584 <HAL_GetTick>
 8002d38:	0003      	movs	r3, r0
 8002d3a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d3c:	e009      	b.n	8002d52 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d3e:	f7fe fc21 	bl	8001584 <HAL_GetTick>
 8002d42:	0002      	movs	r2, r0
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	4a1b      	ldr	r2, [pc, #108]	; (8002db8 <HAL_RCC_ClockConfig+0x1f4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e02c      	b.n	8002dac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d52:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2207      	movs	r2, #7
 8002d58:	4013      	ands	r3, r2
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d1ee      	bne.n	8002d3e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2204      	movs	r2, #4
 8002d66:	4013      	ands	r3, r2
 8002d68:	d009      	beq.n	8002d7e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6a:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	4a15      	ldr	r2, [pc, #84]	; (8002dc4 <HAL_RCC_ClockConfig+0x200>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	0019      	movs	r1, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	68da      	ldr	r2, [r3, #12]
 8002d78:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d7e:	f000 f829 	bl	8002dd4 <HAL_RCC_GetSysClockFreq>
 8002d82:	0001      	movs	r1, r0
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_RCC_ClockConfig+0x1f8>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	0a1b      	lsrs	r3, r3, #8
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	401a      	ands	r2, r3
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <HAL_RCC_ClockConfig+0x204>)
 8002d90:	0092      	lsls	r2, r2, #2
 8002d92:	58d3      	ldr	r3, [r2, r3]
 8002d94:	221f      	movs	r2, #31
 8002d96:	4013      	ands	r3, r2
 8002d98:	000a      	movs	r2, r1
 8002d9a:	40da      	lsrs	r2, r3
 8002d9c:	4b0b      	ldr	r3, [pc, #44]	; (8002dcc <HAL_RCC_ClockConfig+0x208>)
 8002d9e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002da0:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <HAL_RCC_ClockConfig+0x20c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f7fe fb91 	bl	80014cc <HAL_InitTick>
 8002daa:	0003      	movs	r3, r0
}
 8002dac:	0018      	movs	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	b004      	add	sp, #16
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40022000 	.word	0x40022000
 8002db8:	00001388 	.word	0x00001388
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	fffff0ff 	.word	0xfffff0ff
 8002dc4:	ffff8fff 	.word	0xffff8fff
 8002dc8:	08003a0c 	.word	0x08003a0c
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	20000004 	.word	0x20000004

08002dd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dda:	4b3c      	ldr	r3, [pc, #240]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2238      	movs	r2, #56	; 0x38
 8002de0:	4013      	ands	r3, r2
 8002de2:	d10f      	bne.n	8002e04 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002de4:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0adb      	lsrs	r3, r3, #11
 8002dea:	2207      	movs	r2, #7
 8002dec:	4013      	ands	r3, r2
 8002dee:	2201      	movs	r2, #1
 8002df0:	409a      	lsls	r2, r3
 8002df2:	0013      	movs	r3, r2
 8002df4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002df6:	6839      	ldr	r1, [r7, #0]
 8002df8:	4835      	ldr	r0, [pc, #212]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002dfa:	f7fd f981 	bl	8000100 <__udivsi3>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	e05d      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e04:	4b31      	ldr	r3, [pc, #196]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2238      	movs	r2, #56	; 0x38
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d102      	bne.n	8002e16 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e10:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	e054      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e16:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2238      	movs	r2, #56	; 0x38
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	d138      	bne.n	8002e94 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2203      	movs	r2, #3
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e2c:	4b27      	ldr	r3, [pc, #156]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	091b      	lsrs	r3, r3, #4
 8002e32:	2207      	movs	r2, #7
 8002e34:	4013      	ands	r3, r2
 8002e36:	3301      	adds	r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d10d      	bne.n	8002e5c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e40:	68b9      	ldr	r1, [r7, #8]
 8002e42:	4824      	ldr	r0, [pc, #144]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002e44:	f7fd f95c 	bl	8000100 <__udivsi3>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	0a1b      	lsrs	r3, r3, #8
 8002e52:	227f      	movs	r2, #127	; 0x7f
 8002e54:	4013      	ands	r3, r2
 8002e56:	434b      	muls	r3, r1
 8002e58:	617b      	str	r3, [r7, #20]
        break;
 8002e5a:	e00d      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e5c:	68b9      	ldr	r1, [r7, #8]
 8002e5e:	481c      	ldr	r0, [pc, #112]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e60:	f7fd f94e 	bl	8000100 <__udivsi3>
 8002e64:	0003      	movs	r3, r0
 8002e66:	0019      	movs	r1, r3
 8002e68:	4b18      	ldr	r3, [pc, #96]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	227f      	movs	r2, #127	; 0x7f
 8002e70:	4013      	ands	r3, r2
 8002e72:	434b      	muls	r3, r1
 8002e74:	617b      	str	r3, [r7, #20]
        break;
 8002e76:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002e78:	4b14      	ldr	r3, [pc, #80]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	0f5b      	lsrs	r3, r3, #29
 8002e7e:	2207      	movs	r2, #7
 8002e80:	4013      	ands	r3, r2
 8002e82:	3301      	adds	r3, #1
 8002e84:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	6978      	ldr	r0, [r7, #20]
 8002e8a:	f7fd f939 	bl	8000100 <__udivsi3>
 8002e8e:	0003      	movs	r3, r0
 8002e90:	613b      	str	r3, [r7, #16]
 8002e92:	e015      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e94:	4b0d      	ldr	r3, [pc, #52]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2238      	movs	r2, #56	; 0x38
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	d103      	bne.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	021b      	lsls	r3, r3, #8
 8002ea4:	613b      	str	r3, [r7, #16]
 8002ea6:	e00b      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ea8:	4b08      	ldr	r3, [pc, #32]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2238      	movs	r2, #56	; 0x38
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b18      	cmp	r3, #24
 8002eb2:	d103      	bne.n	8002ebc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002eb4:	23fa      	movs	r3, #250	; 0xfa
 8002eb6:	01db      	lsls	r3, r3, #7
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	e001      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ec0:	693b      	ldr	r3, [r7, #16]
}
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b006      	add	sp, #24
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	00f42400 	.word	0x00f42400
 8002ed4:	007a1200 	.word	0x007a1200

08002ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ee0:	2313      	movs	r3, #19
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ee8:	2312      	movs	r3, #18
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	029b      	lsls	r3, r3, #10
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d100      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002efc:	e0a3      	b.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002efe:	2011      	movs	r0, #17
 8002f00:	183b      	adds	r3, r7, r0
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f06:	4b86      	ldr	r3, [pc, #536]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f0a:	2380      	movs	r3, #128	; 0x80
 8002f0c:	055b      	lsls	r3, r3, #21
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d110      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	4b83      	ldr	r3, [pc, #524]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f16:	4b82      	ldr	r3, [pc, #520]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f18:	2180      	movs	r1, #128	; 0x80
 8002f1a:	0549      	lsls	r1, r1, #21
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f20:	4b7f      	ldr	r3, [pc, #508]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	055b      	lsls	r3, r3, #21
 8002f28:	4013      	ands	r3, r2
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2e:	183b      	adds	r3, r7, r0
 8002f30:	2201      	movs	r2, #1
 8002f32:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f34:	4b7b      	ldr	r3, [pc, #492]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	4b7a      	ldr	r3, [pc, #488]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f3a:	2180      	movs	r1, #128	; 0x80
 8002f3c:	0049      	lsls	r1, r1, #1
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f42:	f7fe fb1f 	bl	8001584 <HAL_GetTick>
 8002f46:	0003      	movs	r3, r0
 8002f48:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f4a:	e00b      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4c:	f7fe fb1a 	bl	8001584 <HAL_GetTick>
 8002f50:	0002      	movs	r2, r0
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d904      	bls.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002f5a:	2313      	movs	r3, #19
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	2203      	movs	r2, #3
 8002f60:	701a      	strb	r2, [r3, #0]
        break;
 8002f62:	e005      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f64:	4b6f      	ldr	r3, [pc, #444]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d0ed      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002f70:	2313      	movs	r3, #19
 8002f72:	18fb      	adds	r3, r7, r3
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d154      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f7a:	4b69      	ldr	r3, [pc, #420]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f7e:	23c0      	movs	r3, #192	; 0xc0
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4013      	ands	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d019      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d014      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f96:	4b62      	ldr	r3, [pc, #392]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9a:	4a63      	ldr	r2, [pc, #396]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fa0:	4b5f      	ldr	r3, [pc, #380]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fa4:	4b5e      	ldr	r3, [pc, #376]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fa6:	2180      	movs	r1, #128	; 0x80
 8002fa8:	0249      	lsls	r1, r1, #9
 8002faa:	430a      	orrs	r2, r1
 8002fac:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fae:	4b5c      	ldr	r3, [pc, #368]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fb0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fb2:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fb4:	495d      	ldr	r1, [pc, #372]	; (800312c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002fb6:	400a      	ands	r2, r1
 8002fb8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fba:	4b59      	ldr	r3, [pc, #356]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fbc:	697a      	ldr	r2, [r7, #20]
 8002fbe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	d016      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fe fadc 	bl	8001584 <HAL_GetTick>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd0:	e00c      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fd2:	f7fe fad7 	bl	8001584 <HAL_GetTick>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	4a54      	ldr	r2, [pc, #336]	; (8003130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d904      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002fe2:	2313      	movs	r3, #19
 8002fe4:	18fb      	adds	r3, r7, r3
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	701a      	strb	r2, [r3, #0]
            break;
 8002fea:	e004      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fec:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d0ed      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ff6:	2313      	movs	r3, #19
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003000:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	4a48      	ldr	r2, [pc, #288]	; (8003128 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003006:	4013      	ands	r3, r2
 8003008:	0019      	movs	r1, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699a      	ldr	r2, [r3, #24]
 800300e:	4b44      	ldr	r3, [pc, #272]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003010:	430a      	orrs	r2, r1
 8003012:	65da      	str	r2, [r3, #92]	; 0x5c
 8003014:	e00c      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003016:	2312      	movs	r3, #18
 8003018:	18fb      	adds	r3, r7, r3
 800301a:	2213      	movs	r2, #19
 800301c:	18ba      	adds	r2, r7, r2
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	701a      	strb	r2, [r3, #0]
 8003022:	e005      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003024:	2312      	movs	r3, #18
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	2213      	movs	r2, #19
 800302a:	18ba      	adds	r2, r7, r2
 800302c:	7812      	ldrb	r2, [r2, #0]
 800302e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003030:	2311      	movs	r3, #17
 8003032:	18fb      	adds	r3, r7, r3
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b01      	cmp	r3, #1
 8003038:	d105      	bne.n	8003046 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800303a:	4b39      	ldr	r3, [pc, #228]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800303c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800303e:	4b38      	ldr	r3, [pc, #224]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003040:	493c      	ldr	r1, [pc, #240]	; (8003134 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003042:	400a      	ands	r2, r1
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2201      	movs	r2, #1
 800304c:	4013      	ands	r3, r2
 800304e:	d009      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003050:	4b33      	ldr	r3, [pc, #204]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003054:	2203      	movs	r2, #3
 8003056:	4393      	bics	r3, r2
 8003058:	0019      	movs	r1, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	4b30      	ldr	r3, [pc, #192]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003060:	430a      	orrs	r2, r1
 8003062:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2202      	movs	r2, #2
 800306a:	4013      	ands	r3, r2
 800306c:	d009      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800306e:	4b2c      	ldr	r3, [pc, #176]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003072:	220c      	movs	r2, #12
 8003074:	4393      	bics	r3, r2
 8003076:	0019      	movs	r1, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	4b28      	ldr	r3, [pc, #160]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800307e:	430a      	orrs	r2, r1
 8003080:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2220      	movs	r2, #32
 8003088:	4013      	ands	r3, r2
 800308a:	d009      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	4a29      	ldr	r2, [pc, #164]	; (8003138 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003092:	4013      	ands	r3, r2
 8003094:	0019      	movs	r1, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	4b21      	ldr	r3, [pc, #132]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800309c:	430a      	orrs	r2, r1
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	01db      	lsls	r3, r3, #7
 80030a8:	4013      	ands	r3, r2
 80030aa:	d015      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030ac:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	0899      	lsrs	r1, r3, #2
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	4b19      	ldr	r3, [pc, #100]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030ba:	430a      	orrs	r2, r1
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	05db      	lsls	r3, r3, #23
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d106      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80030ca:	4b15      	ldr	r3, [pc, #84]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030d0:	2180      	movs	r1, #128	; 0x80
 80030d2:	0249      	lsls	r1, r1, #9
 80030d4:	430a      	orrs	r2, r1
 80030d6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	4013      	ands	r3, r2
 80030e2:	d016      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e8:	4a14      	ldr	r2, [pc, #80]	; (800313c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030ea:	4013      	ands	r3, r2
 80030ec:	0019      	movs	r1, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	691a      	ldr	r2, [r3, #16]
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80030f4:	430a      	orrs	r2, r1
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	01db      	lsls	r3, r3, #7
 8003100:	429a      	cmp	r2, r3
 8003102:	d106      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003104:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	4b05      	ldr	r3, [pc, #20]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800310a:	2180      	movs	r1, #128	; 0x80
 800310c:	0249      	lsls	r1, r1, #9
 800310e:	430a      	orrs	r2, r1
 8003110:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003112:	2312      	movs	r3, #18
 8003114:	18fb      	adds	r3, r7, r3
 8003116:	781b      	ldrb	r3, [r3, #0]
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	b006      	add	sp, #24
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	40007000 	.word	0x40007000
 8003128:	fffffcff 	.word	0xfffffcff
 800312c:	fffeffff 	.word	0xfffeffff
 8003130:	00001388 	.word	0x00001388
 8003134:	efffffff 	.word	0xefffffff
 8003138:	ffffcfff 	.word	0xffffcfff
 800313c:	ffff3fff 	.word	0xffff3fff

08003140 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003140:	b5b0      	push	{r4, r5, r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003148:	230f      	movs	r3, #15
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	2201      	movs	r2, #1
 800314e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d100      	bne.n	8003158 <HAL_RTC_Init+0x18>
 8003156:	e080      	b.n	800325a <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2229      	movs	r2, #41	; 0x29
 800315c:	5c9b      	ldrb	r3, [r3, r2]
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10b      	bne.n	800317c <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2228      	movs	r2, #40	; 0x28
 8003168:	2100      	movs	r1, #0
 800316a:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2288      	movs	r2, #136	; 0x88
 8003170:	0212      	lsls	r2, r2, #8
 8003172:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	0018      	movs	r0, r3
 8003178:	f7fd fc02 	bl	8000980 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2229      	movs	r2, #41	; 0x29
 8003180:	2102      	movs	r1, #2
 8003182:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	22ca      	movs	r2, #202	; 0xca
 800318a:	625a      	str	r2, [r3, #36]	; 0x24
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2253      	movs	r2, #83	; 0x53
 8003192:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003194:	250f      	movs	r5, #15
 8003196:	197c      	adds	r4, r7, r5
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	0018      	movs	r0, r3
 800319c:	f000 fa71 	bl	8003682 <RTC_EnterInitMode>
 80031a0:	0003      	movs	r3, r0
 80031a2:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 80031a4:	0028      	movs	r0, r5
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d148      	bne.n	8003240 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	492b      	ldr	r1, [pc, #172]	; (8003268 <HAL_RTC_Init+0x128>)
 80031ba:	400a      	ands	r2, r1
 80031bc:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6999      	ldr	r1, [r3, #24]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689a      	ldr	r2, [r3, #8]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6912      	ldr	r2, [r2, #16]
 80031e4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6919      	ldr	r1, [r3, #16]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	041a      	lsls	r2, r3, #16
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80031fa:	0005      	movs	r5, r0
 80031fc:	183c      	adds	r4, r7, r0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	0018      	movs	r0, r3
 8003202:	f000 fa81 	bl	8003708 <RTC_ExitInitMode>
 8003206:	0003      	movs	r3, r0
 8003208:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800320a:	197b      	adds	r3, r7, r5
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d116      	bne.n	8003240 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	699a      	ldr	r2, [r3, #24]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	00d2      	lsls	r2, r2, #3
 800321e:	08d2      	lsrs	r2, r2, #3
 8003220:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6999      	ldr	r1, [r3, #24]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	22ff      	movs	r2, #255	; 0xff
 8003246:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8003248:	230f      	movs	r3, #15
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d103      	bne.n	800325a <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2229      	movs	r2, #41	; 0x29
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800325a:	230f      	movs	r3, #15
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	781b      	ldrb	r3, [r3, #0]
}
 8003260:	0018      	movs	r0, r3
 8003262:	46bd      	mov	sp, r7
 8003264:	b004      	add	sp, #16
 8003266:	bdb0      	pop	{r4, r5, r7, pc}
 8003268:	fb8fffbf 	.word	0xfb8fffbf

0800326c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800326c:	b5b0      	push	{r4, r5, r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2228      	movs	r2, #40	; 0x28
 800327c:	5c9b      	ldrb	r3, [r3, r2]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d101      	bne.n	8003286 <HAL_RTC_SetTime+0x1a>
 8003282:	2302      	movs	r3, #2
 8003284:	e092      	b.n	80033ac <HAL_RTC_SetTime+0x140>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2228      	movs	r2, #40	; 0x28
 800328a:	2101      	movs	r1, #1
 800328c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2229      	movs	r2, #41	; 0x29
 8003292:	2102      	movs	r1, #2
 8003294:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	22ca      	movs	r2, #202	; 0xca
 800329c:	625a      	str	r2, [r3, #36]	; 0x24
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2253      	movs	r2, #83	; 0x53
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032a6:	2513      	movs	r5, #19
 80032a8:	197c      	adds	r4, r7, r5
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f000 f9e8 	bl	8003682 <RTC_EnterInitMode>
 80032b2:	0003      	movs	r3, r0
 80032b4:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80032b6:	197b      	adds	r3, r7, r5
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d162      	bne.n	8003384 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d125      	bne.n	8003310 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2240      	movs	r2, #64	; 0x40
 80032cc:	4013      	ands	r3, r2
 80032ce:	d102      	bne.n	80032d6 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2200      	movs	r2, #0
 80032d4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	0018      	movs	r0, r3
 80032dc:	f000 fa58 	bl	8003790 <RTC_ByteToBcd2>
 80032e0:	0003      	movs	r3, r0
 80032e2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	785b      	ldrb	r3, [r3, #1]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f000 fa51 	bl	8003790 <RTC_ByteToBcd2>
 80032ee:	0003      	movs	r3, r0
 80032f0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80032f2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	789b      	ldrb	r3, [r3, #2]
 80032f8:	0018      	movs	r0, r3
 80032fa:	f000 fa49 	bl	8003790 <RTC_ByteToBcd2>
 80032fe:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003300:	0022      	movs	r2, r4
 8003302:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	78db      	ldrb	r3, [r3, #3]
 8003308:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800330a:	4313      	orrs	r3, r2
 800330c:	617b      	str	r3, [r7, #20]
 800330e:	e017      	b.n	8003340 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2240      	movs	r2, #64	; 0x40
 8003318:	4013      	ands	r3, r2
 800331a:	d102      	bne.n	8003322 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2200      	movs	r2, #0
 8003320:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	781b      	ldrb	r3, [r3, #0]
 8003326:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	785b      	ldrb	r3, [r3, #1]
 800332c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800332e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003334:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	78db      	ldrb	r3, [r3, #3]
 800333a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800333c:	4313      	orrs	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	491b      	ldr	r1, [pc, #108]	; (80033b4 <HAL_RTC_SetTime+0x148>)
 8003348:	400a      	ands	r2, r1
 800334a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699a      	ldr	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4918      	ldr	r1, [pc, #96]	; (80033b8 <HAL_RTC_SetTime+0x14c>)
 8003358:	400a      	ands	r2, r1
 800335a:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6999      	ldr	r1, [r3, #24]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	431a      	orrs	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003374:	2313      	movs	r3, #19
 8003376:	18fc      	adds	r4, r7, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	0018      	movs	r0, r3
 800337c:	f000 f9c4 	bl	8003708 <RTC_ExitInitMode>
 8003380:	0003      	movs	r3, r0
 8003382:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	22ff      	movs	r2, #255	; 0xff
 800338a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 800338c:	2313      	movs	r3, #19
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d103      	bne.n	800339e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2229      	movs	r2, #41	; 0x29
 800339a:	2101      	movs	r1, #1
 800339c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2228      	movs	r2, #40	; 0x28
 80033a2:	2100      	movs	r1, #0
 80033a4:	5499      	strb	r1, [r3, r2]

  return status;
 80033a6:	2313      	movs	r3, #19
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	781b      	ldrb	r3, [r3, #0]
}
 80033ac:	0018      	movs	r0, r3
 80033ae:	46bd      	mov	sp, r7
 80033b0:	b006      	add	sp, #24
 80033b2:	bdb0      	pop	{r4, r5, r7, pc}
 80033b4:	007f7f7f 	.word	0x007f7f7f
 80033b8:	fffbffff 	.word	0xfffbffff

080033bc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	045b      	lsls	r3, r3, #17
 80033da:	0c5a      	lsrs	r2, r3, #17
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a22      	ldr	r2, [pc, #136]	; (8003470 <HAL_RTC_GetTime+0xb4>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	0c1b      	lsrs	r3, r3, #16
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	223f      	movs	r2, #63	; 0x3f
 80033f4:	4013      	ands	r3, r2
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	0a1b      	lsrs	r3, r3, #8
 8003400:	b2db      	uxtb	r3, r3
 8003402:	227f      	movs	r2, #127	; 0x7f
 8003404:	4013      	ands	r3, r2
 8003406:	b2da      	uxtb	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	227f      	movs	r2, #127	; 0x7f
 8003412:	4013      	ands	r3, r2
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	0d9b      	lsrs	r3, r3, #22
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2201      	movs	r2, #1
 8003422:	4013      	ands	r3, r2
 8003424:	b2da      	uxtb	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d11a      	bne.n	8003466 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	0018      	movs	r0, r3
 8003436:	f000 f9d3 	bl	80037e0 <RTC_Bcd2ToByte>
 800343a:	0003      	movs	r3, r0
 800343c:	001a      	movs	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	785b      	ldrb	r3, [r3, #1]
 8003446:	0018      	movs	r0, r3
 8003448:	f000 f9ca 	bl	80037e0 <RTC_Bcd2ToByte>
 800344c:	0003      	movs	r3, r0
 800344e:	001a      	movs	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	789b      	ldrb	r3, [r3, #2]
 8003458:	0018      	movs	r0, r3
 800345a:	f000 f9c1 	bl	80037e0 <RTC_Bcd2ToByte>
 800345e:	0003      	movs	r3, r0
 8003460:	001a      	movs	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	0018      	movs	r0, r3
 800346a:	46bd      	mov	sp, r7
 800346c:	b006      	add	sp, #24
 800346e:	bd80      	pop	{r7, pc}
 8003470:	007f7f7f 	.word	0x007f7f7f

08003474 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003474:	b5b0      	push	{r4, r5, r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2228      	movs	r2, #40	; 0x28
 8003484:	5c9b      	ldrb	r3, [r3, r2]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d101      	bne.n	800348e <HAL_RTC_SetDate+0x1a>
 800348a:	2302      	movs	r3, #2
 800348c:	e07e      	b.n	800358c <HAL_RTC_SetDate+0x118>
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2228      	movs	r2, #40	; 0x28
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2229      	movs	r2, #41	; 0x29
 800349a:	2102      	movs	r1, #2
 800349c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10e      	bne.n	80034c2 <HAL_RTC_SetDate+0x4e>
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	785b      	ldrb	r3, [r3, #1]
 80034a8:	001a      	movs	r2, r3
 80034aa:	2310      	movs	r3, #16
 80034ac:	4013      	ands	r3, r2
 80034ae:	d008      	beq.n	80034c2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	785b      	ldrb	r3, [r3, #1]
 80034b4:	2210      	movs	r2, #16
 80034b6:	4393      	bics	r3, r2
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	330a      	adds	r3, #10
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d11c      	bne.n	8003502 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	78db      	ldrb	r3, [r3, #3]
 80034cc:	0018      	movs	r0, r3
 80034ce:	f000 f95f 	bl	8003790 <RTC_ByteToBcd2>
 80034d2:	0003      	movs	r3, r0
 80034d4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	785b      	ldrb	r3, [r3, #1]
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 f958 	bl	8003790 <RTC_ByteToBcd2>
 80034e0:	0003      	movs	r3, r0
 80034e2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034e4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	789b      	ldrb	r3, [r3, #2]
 80034ea:	0018      	movs	r0, r3
 80034ec:	f000 f950 	bl	8003790 <RTC_ByteToBcd2>
 80034f0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80034f2:	0022      	movs	r2, r4
 80034f4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	e00e      	b.n	8003520 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	78db      	ldrb	r3, [r3, #3]
 8003506:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	785b      	ldrb	r3, [r3, #1]
 800350c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800350e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003514:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800351c:	4313      	orrs	r3, r2
 800351e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	22ca      	movs	r2, #202	; 0xca
 8003526:	625a      	str	r2, [r3, #36]	; 0x24
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2253      	movs	r2, #83	; 0x53
 800352e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003530:	2513      	movs	r5, #19
 8003532:	197c      	adds	r4, r7, r5
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	0018      	movs	r0, r3
 8003538:	f000 f8a3 	bl	8003682 <RTC_EnterInitMode>
 800353c:	0003      	movs	r3, r0
 800353e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003540:	0028      	movs	r0, r5
 8003542:	183b      	adds	r3, r7, r0
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d10c      	bne.n	8003564 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	4910      	ldr	r1, [pc, #64]	; (8003594 <HAL_RTC_SetDate+0x120>)
 8003552:	400a      	ands	r2, r1
 8003554:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003556:	183c      	adds	r4, r7, r0
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	0018      	movs	r0, r3
 800355c:	f000 f8d4 	bl	8003708 <RTC_ExitInitMode>
 8003560:	0003      	movs	r3, r0
 8003562:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	22ff      	movs	r2, #255	; 0xff
 800356a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800356c:	2313      	movs	r3, #19
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d103      	bne.n	800357e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2229      	movs	r2, #41	; 0x29
 800357a:	2101      	movs	r1, #1
 800357c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2228      	movs	r2, #40	; 0x28
 8003582:	2100      	movs	r1, #0
 8003584:	5499      	strb	r1, [r3, r2]

  return status;
 8003586:	2313      	movs	r3, #19
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	781b      	ldrb	r3, [r3, #0]
}
 800358c:	0018      	movs	r0, r3
 800358e:	46bd      	mov	sp, r7
 8003590:	b006      	add	sp, #24
 8003592:	bdb0      	pop	{r4, r5, r7, pc}
 8003594:	00ffff3f 	.word	0x00ffff3f

08003598 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4a21      	ldr	r2, [pc, #132]	; (8003630 <HAL_RTC_GetDate+0x98>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	0c1b      	lsrs	r3, r3, #16
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	0a1b      	lsrs	r3, r3, #8
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	221f      	movs	r2, #31
 80035c2:	4013      	ands	r3, r2
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	223f      	movs	r2, #63	; 0x3f
 80035d0:	4013      	ands	r3, r2
 80035d2:	b2da      	uxtb	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	0b5b      	lsrs	r3, r3, #13
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2207      	movs	r2, #7
 80035e0:	4013      	ands	r3, r2
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d11a      	bne.n	8003624 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	78db      	ldrb	r3, [r3, #3]
 80035f2:	0018      	movs	r0, r3
 80035f4:	f000 f8f4 	bl	80037e0 <RTC_Bcd2ToByte>
 80035f8:	0003      	movs	r3, r0
 80035fa:	001a      	movs	r2, r3
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	785b      	ldrb	r3, [r3, #1]
 8003604:	0018      	movs	r0, r3
 8003606:	f000 f8eb 	bl	80037e0 <RTC_Bcd2ToByte>
 800360a:	0003      	movs	r3, r0
 800360c:	001a      	movs	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	789b      	ldrb	r3, [r3, #2]
 8003616:	0018      	movs	r0, r3
 8003618:	f000 f8e2 	bl	80037e0 <RTC_Bcd2ToByte>
 800361c:	0003      	movs	r3, r0
 800361e:	001a      	movs	r2, r3
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	0018      	movs	r0, r3
 8003628:	46bd      	mov	sp, r7
 800362a:	b006      	add	sp, #24
 800362c:	bd80      	pop	{r7, pc}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	00ffff3f 	.word	0x00ffff3f

08003634 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	21a0      	movs	r1, #160	; 0xa0
 8003648:	438a      	bics	r2, r1
 800364a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800364c:	f7fd ff9a 	bl	8001584 <HAL_GetTick>
 8003650:	0003      	movs	r3, r0
 8003652:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003654:	e00a      	b.n	800366c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003656:	f7fd ff95 	bl	8001584 <HAL_GetTick>
 800365a:	0002      	movs	r2, r0
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1ad2      	subs	r2, r2, r3
 8003660:	23fa      	movs	r3, #250	; 0xfa
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d901      	bls.n	800366c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e006      	b.n	800367a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	4013      	ands	r3, r2
 8003676:	d0ee      	beq.n	8003656 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	0018      	movs	r0, r3
 800367c:	46bd      	mov	sp, r7
 800367e:	b004      	add	sp, #16
 8003680:	bd80      	pop	{r7, pc}

08003682 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b084      	sub	sp, #16
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800368a:	230f      	movs	r3, #15
 800368c:	18fb      	adds	r3, r7, r3
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2240      	movs	r2, #64	; 0x40
 800369a:	4013      	ands	r3, r2
 800369c:	d12c      	bne.n	80036f8 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2180      	movs	r1, #128	; 0x80
 80036aa:	430a      	orrs	r2, r1
 80036ac:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80036ae:	f7fd ff69 	bl	8001584 <HAL_GetTick>
 80036b2:	0003      	movs	r3, r0
 80036b4:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80036b6:	e014      	b.n	80036e2 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80036b8:	f7fd ff64 	bl	8001584 <HAL_GetTick>
 80036bc:	0002      	movs	r2, r0
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	1ad2      	subs	r2, r2, r3
 80036c2:	200f      	movs	r0, #15
 80036c4:	183b      	adds	r3, r7, r0
 80036c6:	1839      	adds	r1, r7, r0
 80036c8:	7809      	ldrb	r1, [r1, #0]
 80036ca:	7019      	strb	r1, [r3, #0]
 80036cc:	23fa      	movs	r3, #250	; 0xfa
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d906      	bls.n	80036e2 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 80036d4:	183b      	adds	r3, r7, r0
 80036d6:	2203      	movs	r2, #3
 80036d8:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2229      	movs	r2, #41	; 0x29
 80036de:	2103      	movs	r1, #3
 80036e0:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2240      	movs	r2, #64	; 0x40
 80036ea:	4013      	ands	r3, r2
 80036ec:	d104      	bne.n	80036f8 <RTC_EnterInitMode+0x76>
 80036ee:	230f      	movs	r3, #15
 80036f0:	18fb      	adds	r3, r7, r3
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d1df      	bne.n	80036b8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80036f8:	230f      	movs	r3, #15
 80036fa:	18fb      	adds	r3, r7, r3
 80036fc:	781b      	ldrb	r3, [r3, #0]
}
 80036fe:	0018      	movs	r0, r3
 8003700:	46bd      	mov	sp, r7
 8003702:	b004      	add	sp, #16
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003708:	b590      	push	{r4, r7, lr}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003710:	240f      	movs	r4, #15
 8003712:	193b      	adds	r3, r7, r4
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003718:	4b1c      	ldr	r3, [pc, #112]	; (800378c <RTC_ExitInitMode+0x84>)
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4b1b      	ldr	r3, [pc, #108]	; (800378c <RTC_ExitInitMode+0x84>)
 800371e:	2180      	movs	r1, #128	; 0x80
 8003720:	438a      	bics	r2, r1
 8003722:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003724:	4b19      	ldr	r3, [pc, #100]	; (800378c <RTC_ExitInitMode+0x84>)
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2220      	movs	r2, #32
 800372a:	4013      	ands	r3, r2
 800372c:	d10d      	bne.n	800374a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	0018      	movs	r0, r3
 8003732:	f7ff ff7f 	bl	8003634 <HAL_RTC_WaitForSynchro>
 8003736:	1e03      	subs	r3, r0, #0
 8003738:	d021      	beq.n	800377e <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2229      	movs	r2, #41	; 0x29
 800373e:	2103      	movs	r1, #3
 8003740:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003742:	193b      	adds	r3, r7, r4
 8003744:	2203      	movs	r2, #3
 8003746:	701a      	strb	r2, [r3, #0]
 8003748:	e019      	b.n	800377e <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <RTC_ExitInitMode+0x84>)
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	4b0f      	ldr	r3, [pc, #60]	; (800378c <RTC_ExitInitMode+0x84>)
 8003750:	2120      	movs	r1, #32
 8003752:	438a      	bics	r2, r1
 8003754:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	0018      	movs	r0, r3
 800375a:	f7ff ff6b 	bl	8003634 <HAL_RTC_WaitForSynchro>
 800375e:	1e03      	subs	r3, r0, #0
 8003760:	d007      	beq.n	8003772 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2229      	movs	r2, #41	; 0x29
 8003766:	2103      	movs	r1, #3
 8003768:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800376a:	230f      	movs	r3, #15
 800376c:	18fb      	adds	r3, r7, r3
 800376e:	2203      	movs	r2, #3
 8003770:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <RTC_ExitInitMode+0x84>)
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	4b05      	ldr	r3, [pc, #20]	; (800378c <RTC_ExitInitMode+0x84>)
 8003778:	2120      	movs	r1, #32
 800377a:	430a      	orrs	r2, r1
 800377c:	619a      	str	r2, [r3, #24]
  }

  return status;
 800377e:	230f      	movs	r3, #15
 8003780:	18fb      	adds	r3, r7, r3
 8003782:	781b      	ldrb	r3, [r3, #0]
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b005      	add	sp, #20
 800378a:	bd90      	pop	{r4, r7, pc}
 800378c:	40002800 	.word	0x40002800

08003790 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	0002      	movs	r2, r0
 8003798:	1dfb      	adds	r3, r7, #7
 800379a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80037a0:	230b      	movs	r3, #11
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	1dfa      	adds	r2, r7, #7
 80037a6:	7812      	ldrb	r2, [r2, #0]
 80037a8:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80037aa:	e008      	b.n	80037be <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	3301      	adds	r3, #1
 80037b0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80037b2:	220b      	movs	r2, #11
 80037b4:	18bb      	adds	r3, r7, r2
 80037b6:	18ba      	adds	r2, r7, r2
 80037b8:	7812      	ldrb	r2, [r2, #0]
 80037ba:	3a0a      	subs	r2, #10
 80037bc:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 80037be:	210b      	movs	r1, #11
 80037c0:	187b      	adds	r3, r7, r1
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b09      	cmp	r3, #9
 80037c6:	d8f1      	bhi.n	80037ac <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	187b      	adds	r3, r7, r1
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	b2db      	uxtb	r3, r3
}
 80037d8:	0018      	movs	r0, r3
 80037da:	46bd      	mov	sp, r7
 80037dc:	b004      	add	sp, #16
 80037de:	bd80      	pop	{r7, pc}

080037e0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	0002      	movs	r2, r0
 80037e8:	1dfb      	adds	r3, r7, #7
 80037ea:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80037ec:	1dfb      	adds	r3, r7, #7
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	001a      	movs	r2, r3
 80037f6:	0013      	movs	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	189b      	adds	r3, r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	b2da      	uxtb	r2, r3
 8003804:	1dfb      	adds	r3, r7, #7
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	210f      	movs	r1, #15
 800380a:	400b      	ands	r3, r1
 800380c:	b2db      	uxtb	r3, r3
 800380e:	18d3      	adds	r3, r2, r3
 8003810:	b2db      	uxtb	r3, r3
}
 8003812:	0018      	movs	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	b004      	add	sp, #16
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2228      	movs	r2, #40	; 0x28
 800382c:	5c9b      	ldrb	r3, [r3, r2]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d101      	bne.n	8003836 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8003832:	2302      	movs	r3, #2
 8003834:	e082      	b.n	800393c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2228      	movs	r2, #40	; 0x28
 800383a:	2101      	movs	r1, #1
 800383c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2229      	movs	r2, #41	; 0x29
 8003842:	2102      	movs	r1, #2
 8003844:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	22ca      	movs	r2, #202	; 0xca
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2253      	movs	r2, #83	; 0x53
 8003854:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699a      	ldr	r2, [r3, #24]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4938      	ldr	r1, [pc, #224]	; (8003944 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8003862:	400a      	ands	r2, r1
 8003864:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2104      	movs	r1, #4
 8003872:	430a      	orrs	r2, r1
 8003874:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003876:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	2240      	movs	r2, #64	; 0x40
 800387c:	4013      	ands	r3, r2
 800387e:	d121      	bne.n	80038c4 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8003880:	f7fd fe80 	bl	8001584 <HAL_GetTick>
 8003884:	0003      	movs	r3, r0
 8003886:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8003888:	e016      	b.n	80038b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800388a:	f7fd fe7b 	bl	8001584 <HAL_GetTick>
 800388e:	0002      	movs	r2, r0
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	1ad2      	subs	r2, r2, r3
 8003894:	23fa      	movs	r3, #250	; 0xfa
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d90d      	bls.n	80038b8 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	22ff      	movs	r2, #255	; 0xff
 80038a2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2229      	movs	r2, #41	; 0x29
 80038a8:	2103      	movs	r1, #3
 80038aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2228      	movs	r2, #40	; 0x28
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e041      	b.n	800393c <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2204      	movs	r2, #4
 80038c0:	4013      	ands	r3, r2
 80038c2:	d0e2      	beq.n	800388a <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2107      	movs	r1, #7
 80038d8:	438a      	bics	r2, r1
 80038da:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6999      	ldr	r1, [r3, #24]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80038ec:	4a17      	ldr	r2, [pc, #92]	; (800394c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80038ee:	2380      	movs	r3, #128	; 0x80
 80038f0:	58d3      	ldr	r3, [r2, r3]
 80038f2:	4916      	ldr	r1, [pc, #88]	; (800394c <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 80038f4:	2280      	movs	r2, #128	; 0x80
 80038f6:	0312      	lsls	r2, r2, #12
 80038f8:	4313      	orrs	r3, r2
 80038fa:	2280      	movs	r2, #128	; 0x80
 80038fc:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	699a      	ldr	r2, [r3, #24]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2180      	movs	r1, #128	; 0x80
 800390a:	01c9      	lsls	r1, r1, #7
 800390c:	430a      	orrs	r2, r1
 800390e:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2180      	movs	r1, #128	; 0x80
 800391c:	00c9      	lsls	r1, r1, #3
 800391e:	430a      	orrs	r2, r1
 8003920:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	22ff      	movs	r2, #255	; 0xff
 8003928:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2229      	movs	r2, #41	; 0x29
 800392e:	2101      	movs	r1, #1
 8003930:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2228      	movs	r2, #40	; 0x28
 8003936:	2100      	movs	r1, #0
 8003938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	0018      	movs	r0, r3
 800393e:	46bd      	mov	sp, r7
 8003940:	b006      	add	sp, #24
 8003942:	bd80      	pop	{r7, pc}
 8003944:	fffffbff 	.word	0xfffffbff
 8003948:	40002800 	.word	0x40002800
 800394c:	40021800 	.word	0x40021800

08003950 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800395e:	2204      	movs	r2, #4
 8003960:	4013      	ands	r3, r2
 8003962:	d00b      	beq.n	800397c <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2104      	movs	r1, #4
 8003970:	430a      	orrs	r2, r1
 8003972:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	0018      	movs	r0, r3
 8003978:	f000 f808 	bl	800398c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2229      	movs	r2, #41	; 0x29
 8003980:	2101      	movs	r1, #1
 8003982:	5499      	strb	r1, [r3, r2]
}
 8003984:	46c0      	nop			; (mov r8, r8)
 8003986:	46bd      	mov	sp, r7
 8003988:	b002      	add	sp, #8
 800398a:	bd80      	pop	{r7, pc}

0800398c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8003994:	46c0      	nop			; (mov r8, r8)
 8003996:	46bd      	mov	sp, r7
 8003998:	b002      	add	sp, #8
 800399a:	bd80      	pop	{r7, pc}

0800399c <__libc_init_array>:
 800399c:	b570      	push	{r4, r5, r6, lr}
 800399e:	2600      	movs	r6, #0
 80039a0:	4d0c      	ldr	r5, [pc, #48]	; (80039d4 <__libc_init_array+0x38>)
 80039a2:	4c0d      	ldr	r4, [pc, #52]	; (80039d8 <__libc_init_array+0x3c>)
 80039a4:	1b64      	subs	r4, r4, r5
 80039a6:	10a4      	asrs	r4, r4, #2
 80039a8:	42a6      	cmp	r6, r4
 80039aa:	d109      	bne.n	80039c0 <__libc_init_array+0x24>
 80039ac:	2600      	movs	r6, #0
 80039ae:	f000 f821 	bl	80039f4 <_init>
 80039b2:	4d0a      	ldr	r5, [pc, #40]	; (80039dc <__libc_init_array+0x40>)
 80039b4:	4c0a      	ldr	r4, [pc, #40]	; (80039e0 <__libc_init_array+0x44>)
 80039b6:	1b64      	subs	r4, r4, r5
 80039b8:	10a4      	asrs	r4, r4, #2
 80039ba:	42a6      	cmp	r6, r4
 80039bc:	d105      	bne.n	80039ca <__libc_init_array+0x2e>
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	00b3      	lsls	r3, r6, #2
 80039c2:	58eb      	ldr	r3, [r5, r3]
 80039c4:	4798      	blx	r3
 80039c6:	3601      	adds	r6, #1
 80039c8:	e7ee      	b.n	80039a8 <__libc_init_array+0xc>
 80039ca:	00b3      	lsls	r3, r6, #2
 80039cc:	58eb      	ldr	r3, [r5, r3]
 80039ce:	4798      	blx	r3
 80039d0:	3601      	adds	r6, #1
 80039d2:	e7f2      	b.n	80039ba <__libc_init_array+0x1e>
 80039d4:	08003af4 	.word	0x08003af4
 80039d8:	08003af4 	.word	0x08003af4
 80039dc:	08003af4 	.word	0x08003af4
 80039e0:	08003af8 	.word	0x08003af8

080039e4 <memset>:
 80039e4:	0003      	movs	r3, r0
 80039e6:	1882      	adds	r2, r0, r2
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d100      	bne.n	80039ee <memset+0xa>
 80039ec:	4770      	bx	lr
 80039ee:	7019      	strb	r1, [r3, #0]
 80039f0:	3301      	adds	r3, #1
 80039f2:	e7f9      	b.n	80039e8 <memset+0x4>

080039f4 <_init>:
 80039f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039f6:	46c0      	nop			; (mov r8, r8)
 80039f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039fa:	bc08      	pop	{r3}
 80039fc:	469e      	mov	lr, r3
 80039fe:	4770      	bx	lr

08003a00 <_fini>:
 8003a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a02:	46c0      	nop			; (mov r8, r8)
 8003a04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a06:	bc08      	pop	{r3}
 8003a08:	469e      	mov	lr, r3
 8003a0a:	4770      	bx	lr
