
eclipse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002df8  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002eb0  08002eb0  00012eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f98  08002f98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f98  08002f98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f98  08002f98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  08002fac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08002fac  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008904  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b7e  00000000  00000000  00028938  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000808  00000000  00000000  0002a4b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000700  00000000  00000000  0002acc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014b7a  00000000  00000000  0002b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008844  00000000  00000000  0003ff3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f61d  00000000  00000000  0004877e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7d9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a18  00000000  00000000  000c7e18  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002e98 	.word	0x08002e98

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002e98 	.word	0x08002e98

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f001 f820 	bl	8001260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f8fa 	bl	8000418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f9e0 	bl	80005e8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000228:	f000 f964 	bl	80004f4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	mode = MODE_NORMAL;
 800022c:	4b73      	ldr	r3, [pc, #460]	; (80003fc <main+0x1e4>)
 800022e:	2200      	movs	r2, #0
 8000230:	701a      	strb	r2, [r3, #0]
	dontSleepFlag = 0;
 8000232:	4b73      	ldr	r3, [pc, #460]	; (8000400 <main+0x1e8>)
 8000234:	2200      	movs	r2, #0
 8000236:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (mode == MODE_NORMAL) {
 8000238:	4b70      	ldr	r3, [pc, #448]	; (80003fc <main+0x1e4>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	b2db      	uxtb	r3, r3
 800023e:	2b00      	cmp	r3, #0
 8000240:	d111      	bne.n	8000266 <main+0x4e>

			rtcGetTime();
 8000242:	f000 ffa9 	bl	8001198 <rtcGetTime>
			displayShowTime(hours, minutes, 50, 15);
 8000246:	4b6f      	ldr	r3, [pc, #444]	; (8000404 <main+0x1ec>)
 8000248:	781b      	ldrb	r3, [r3, #0]
 800024a:	b25b      	sxtb	r3, r3
 800024c:	b2d8      	uxtb	r0, r3
 800024e:	4b6e      	ldr	r3, [pc, #440]	; (8000408 <main+0x1f0>)
 8000250:	881b      	ldrh	r3, [r3, #0]
 8000252:	b21b      	sxth	r3, r3
 8000254:	b2d9      	uxtb	r1, r3
 8000256:	230f      	movs	r3, #15
 8000258:	2232      	movs	r2, #50	; 0x32
 800025a:	f000 fc35 	bl	8000ac8 <displayShowTime>
			dontSleepFlag = 0;
 800025e:	4b68      	ldr	r3, [pc, #416]	; (8000400 <main+0x1e8>)
 8000260:	2200      	movs	r2, #0
 8000262:	701a      	strb	r2, [r3, #0]
 8000264:	e0af      	b.n	80003c6 <main+0x1ae>

		} else if (mode == MODE_SETTINGS_H || mode == MODE_SETTINGS_M) {
 8000266:	4b65      	ldr	r3, [pc, #404]	; (80003fc <main+0x1e4>)
 8000268:	781b      	ldrb	r3, [r3, #0]
 800026a:	b2db      	uxtb	r3, r3
 800026c:	2b01      	cmp	r3, #1
 800026e:	d004      	beq.n	800027a <main+0x62>
 8000270:	4b62      	ldr	r3, [pc, #392]	; (80003fc <main+0x1e4>)
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	b2db      	uxtb	r3, r3
 8000276:	2b02      	cmp	r3, #2
 8000278:	d135      	bne.n	80002e6 <main+0xce>

			displayTurnOff();
 800027a:	f000 fbf7 	bl	8000a6c <displayTurnOff>
			displayTurnMinutesLED(minutes / 2, 1);
 800027e:	4b62      	ldr	r3, [pc, #392]	; (8000408 <main+0x1f0>)
 8000280:	881b      	ldrh	r3, [r3, #0]
 8000282:	b21b      	sxth	r3, r3
 8000284:	2b00      	cmp	r3, #0
 8000286:	da00      	bge.n	800028a <main+0x72>
 8000288:	3301      	adds	r3, #1
 800028a:	105b      	asrs	r3, r3, #1
 800028c:	b21b      	sxth	r3, r3
 800028e:	b2db      	uxtb	r3, r3
 8000290:	2101      	movs	r1, #1
 8000292:	0018      	movs	r0, r3
 8000294:	f000 fd92 	bl	8000dbc <displayTurnMinutesLED>

			if (minutes % 2 == 1) {
 8000298:	4b5b      	ldr	r3, [pc, #364]	; (8000408 <main+0x1f0>)
 800029a:	881b      	ldrh	r3, [r3, #0]
 800029c:	b21b      	sxth	r3, r3
 800029e:	4a5b      	ldr	r2, [pc, #364]	; (800040c <main+0x1f4>)
 80002a0:	4013      	ands	r3, r2
 80002a2:	d504      	bpl.n	80002ae <main+0x96>
 80002a4:	3b01      	subs	r3, #1
 80002a6:	2202      	movs	r2, #2
 80002a8:	4252      	negs	r2, r2
 80002aa:	4313      	orrs	r3, r2
 80002ac:	3301      	adds	r3, #1
 80002ae:	b21b      	sxth	r3, r3
 80002b0:	2b01      	cmp	r3, #1
 80002b2:	d106      	bne.n	80002c2 <main+0xaa>

				HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 80002b4:	4b56      	ldr	r3, [pc, #344]	; (8000410 <main+0x1f8>)
 80002b6:	2201      	movs	r2, #1
 80002b8:	2110      	movs	r1, #16
 80002ba:	0018      	movs	r0, r3
 80002bc:	f001 faed 	bl	800189a <HAL_GPIO_WritePin>
 80002c0:	e005      	b.n	80002ce <main+0xb6>

			} else {

				HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 80002c2:	4b53      	ldr	r3, [pc, #332]	; (8000410 <main+0x1f8>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	2110      	movs	r1, #16
 80002c8:	0018      	movs	r0, r3
 80002ca:	f001 fae6 	bl	800189a <HAL_GPIO_WritePin>

			}

			displayTurnHoursLED(hours, 1);
 80002ce:	4b4d      	ldr	r3, [pc, #308]	; (8000404 <main+0x1ec>)
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2101      	movs	r1, #1
 80002d8:	0018      	movs	r0, r3
 80002da:	f000 fce5 	bl	8000ca8 <displayTurnHoursLED>
			HAL_Delay(50);
 80002de:	2032      	movs	r0, #50	; 0x32
 80002e0:	f001 f844 	bl	800136c <HAL_Delay>
 80002e4:	e06f      	b.n	80003c6 <main+0x1ae>

		} else if (mode == MODE_SETTINGS_S) {
 80002e6:	4b45      	ldr	r3, [pc, #276]	; (80003fc <main+0x1e4>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	b2db      	uxtb	r3, r3
 80002ec:	2b03      	cmp	r3, #3
 80002ee:	d12f      	bne.n	8000350 <main+0x138>

			rtcGetTime();
 80002f0:	f000 ff52 	bl	8001198 <rtcGetTime>
			displayTurnOff();
 80002f4:	f000 fbba 	bl	8000a6c <displayTurnOff>
			displayTurnMinutesLED(seconds / 2, 1);
 80002f8:	4b46      	ldr	r3, [pc, #280]	; (8000414 <main+0x1fc>)
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	b25b      	sxtb	r3, r3
 80002fe:	2b00      	cmp	r3, #0
 8000300:	da00      	bge.n	8000304 <main+0xec>
 8000302:	3301      	adds	r3, #1
 8000304:	105b      	asrs	r3, r3, #1
 8000306:	b25b      	sxtb	r3, r3
 8000308:	b2db      	uxtb	r3, r3
 800030a:	2101      	movs	r1, #1
 800030c:	0018      	movs	r0, r3
 800030e:	f000 fd55 	bl	8000dbc <displayTurnMinutesLED>

			if (seconds % 2 == 1) {
 8000312:	4b40      	ldr	r3, [pc, #256]	; (8000414 <main+0x1fc>)
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	b25b      	sxtb	r3, r3
 8000318:	4a3c      	ldr	r2, [pc, #240]	; (800040c <main+0x1f4>)
 800031a:	4013      	ands	r3, r2
 800031c:	d504      	bpl.n	8000328 <main+0x110>
 800031e:	3b01      	subs	r3, #1
 8000320:	2202      	movs	r2, #2
 8000322:	4252      	negs	r2, r2
 8000324:	4313      	orrs	r3, r2
 8000326:	3301      	adds	r3, #1
 8000328:	b25b      	sxtb	r3, r3
 800032a:	2b01      	cmp	r3, #1
 800032c:	d106      	bne.n	800033c <main+0x124>

				HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 800032e:	4b38      	ldr	r3, [pc, #224]	; (8000410 <main+0x1f8>)
 8000330:	2201      	movs	r2, #1
 8000332:	2110      	movs	r1, #16
 8000334:	0018      	movs	r0, r3
 8000336:	f001 fab0 	bl	800189a <HAL_GPIO_WritePin>
 800033a:	e005      	b.n	8000348 <main+0x130>

			} else {

				HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 800033c:	4b34      	ldr	r3, [pc, #208]	; (8000410 <main+0x1f8>)
 800033e:	2200      	movs	r2, #0
 8000340:	2110      	movs	r1, #16
 8000342:	0018      	movs	r0, r3
 8000344:	f001 faa9 	bl	800189a <HAL_GPIO_WritePin>

			}

			HAL_Delay(50);
 8000348:	2032      	movs	r0, #50	; 0x32
 800034a:	f001 f80f 	bl	800136c <HAL_Delay>
 800034e:	e03a      	b.n	80003c6 <main+0x1ae>

		} else if (mode == MODE_SLEEP) {
 8000350:	4b2a      	ldr	r3, [pc, #168]	; (80003fc <main+0x1e4>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b04      	cmp	r3, #4
 8000358:	d10f      	bne.n	800037a <main+0x162>

			HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 800035a:	4b2d      	ldr	r3, [pc, #180]	; (8000410 <main+0x1f8>)
 800035c:	2201      	movs	r2, #1
 800035e:	2110      	movs	r1, #16
 8000360:	0018      	movs	r0, r3
 8000362:	f001 fa9a 	bl	800189a <HAL_GPIO_WritePin>
			HAL_Delay(50);
 8000366:	2032      	movs	r0, #50	; 0x32
 8000368:	f001 f800 	bl	800136c <HAL_Delay>
			HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 800036c:	4b28      	ldr	r3, [pc, #160]	; (8000410 <main+0x1f8>)
 800036e:	2200      	movs	r2, #0
 8000370:	2110      	movs	r1, #16
 8000372:	0018      	movs	r0, r3
 8000374:	f001 fa91 	bl	800189a <HAL_GPIO_WritePin>
 8000378:	e025      	b.n	80003c6 <main+0x1ae>

		} else if(mode == MODE_FORCE){
 800037a:	4b20      	ldr	r3, [pc, #128]	; (80003fc <main+0x1e4>)
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	b2db      	uxtb	r3, r3
 8000380:	2b05      	cmp	r3, #5
 8000382:	d120      	bne.n	80003c6 <main+0x1ae>

			rtcGetTime();//for actual seconds reading
 8000384:	f000 ff08 	bl	8001198 <rtcGetTime>

			if(HAL_GPIO_ReadPin(SET_GPIO_Port, SET_Pin) == 1){
 8000388:	2380      	movs	r3, #128	; 0x80
 800038a:	021b      	lsls	r3, r3, #8
 800038c:	4a20      	ldr	r2, [pc, #128]	; (8000410 <main+0x1f8>)
 800038e:	0019      	movs	r1, r3
 8000390:	0010      	movs	r0, r2
 8000392:	f001 fa65 	bl	8001860 <HAL_GPIO_ReadPin>
 8000396:	0003      	movs	r3, r0
 8000398:	2b01      	cmp	r3, #1
 800039a:	d10c      	bne.n	80003b6 <main+0x19e>
				displayShowTimeForce(hours, minutes);
 800039c:	4b19      	ldr	r3, [pc, #100]	; (8000404 <main+0x1ec>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	b25b      	sxtb	r3, r3
 80003a2:	b2da      	uxtb	r2, r3
 80003a4:	4b18      	ldr	r3, [pc, #96]	; (8000408 <main+0x1f0>)
 80003a6:	881b      	ldrh	r3, [r3, #0]
 80003a8:	b21b      	sxth	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	0019      	movs	r1, r3
 80003ae:	0010      	movs	r0, r2
 80003b0:	f000 faca 	bl	8000948 <displayShowTimeForce>
 80003b4:	e007      	b.n	80003c6 <main+0x1ae>
			}else{
				displayShowTimeForce(0, seconds);
 80003b6:	4b17      	ldr	r3, [pc, #92]	; (8000414 <main+0x1fc>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	b25b      	sxtb	r3, r3
 80003bc:	b2db      	uxtb	r3, r3
 80003be:	0019      	movs	r1, r3
 80003c0:	2000      	movs	r0, #0
 80003c2:	f000 fac1 	bl	8000948 <displayShowTimeForce>
			}


		}

		if ((mode == MODE_NORMAL || mode == MODE_SLEEP) && dontSleepFlag == 0) {
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <main+0x1e4>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d005      	beq.n	80003dc <main+0x1c4>
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <main+0x1e4>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b04      	cmp	r3, #4
 80003d8:	d000      	beq.n	80003dc <main+0x1c4>
 80003da:	e72d      	b.n	8000238 <main+0x20>
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <main+0x1e8>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	b2db      	uxtb	r3, r3
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d000      	beq.n	80003e8 <main+0x1d0>
 80003e6:	e727      	b.n	8000238 <main+0x20>

			mode = MODE_SLEEP;
 80003e8:	4b04      	ldr	r3, [pc, #16]	; (80003fc <main+0x1e4>)
 80003ea:	2204      	movs	r2, #4
 80003ec:	701a      	strb	r2, [r3, #0]
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80003ee:	2380      	movs	r3, #128	; 0x80
 80003f0:	01db      	lsls	r3, r3, #7
 80003f2:	2101      	movs	r1, #1
 80003f4:	0018      	movs	r0, r3
 80003f6:	f001 faa5 	bl	8001944 <HAL_PWR_EnterSTOPMode>
		if (mode == MODE_NORMAL) {
 80003fa:	e71d      	b.n	8000238 <main+0x20>
 80003fc:	2000003d 	.word	0x2000003d
 8000400:	2000003c 	.word	0x2000003c
 8000404:	20000074 	.word	0x20000074
 8000408:	20000072 	.word	0x20000072
 800040c:	80000001 	.word	0x80000001
 8000410:	50000400 	.word	0x50000400
 8000414:	20000070 	.word	0x20000070

08000418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b099      	sub	sp, #100	; 0x64
 800041c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041e:	242c      	movs	r4, #44	; 0x2c
 8000420:	193b      	adds	r3, r7, r4
 8000422:	0018      	movs	r0, r3
 8000424:	2334      	movs	r3, #52	; 0x34
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f002 fd2d 	bl	8002e88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042e:	231c      	movs	r3, #28
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	0018      	movs	r0, r3
 8000434:	2310      	movs	r3, #16
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f002 fd25 	bl	8002e88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800043e:	003b      	movs	r3, r7
 8000440:	0018      	movs	r0, r3
 8000442:	231c      	movs	r3, #28
 8000444:	001a      	movs	r2, r3
 8000446:	2100      	movs	r1, #0
 8000448:	f002 fd1e 	bl	8002e88 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	0018      	movs	r0, r3
 8000452:	f001 faaf 	bl	80019b4 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000456:	f001 fa67 	bl	8001928 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800045a:	4b25      	ldr	r3, [pc, #148]	; (80004f0 <SystemClock_Config+0xd8>)
 800045c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800045e:	4b24      	ldr	r3, [pc, #144]	; (80004f0 <SystemClock_Config+0xd8>)
 8000460:	2118      	movs	r1, #24
 8000462:	438a      	bics	r2, r1
 8000464:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000466:	193b      	adds	r3, r7, r4
 8000468:	2206      	movs	r2, #6
 800046a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800046c:	193b      	adds	r3, r7, r4
 800046e:	2201      	movs	r2, #1
 8000470:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000472:	193b      	adds	r3, r7, r4
 8000474:	2280      	movs	r2, #128	; 0x80
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800047a:	193b      	adds	r3, r7, r4
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000480:	193b      	adds	r3, r7, r4
 8000482:	2240      	movs	r2, #64	; 0x40
 8000484:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2200      	movs	r2, #0
 800048a:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048c:	193b      	adds	r3, r7, r4
 800048e:	0018      	movs	r0, r3
 8000490:	f001 fad0 	bl	8001a34 <HAL_RCC_OscConfig>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000498:	f000 f990 	bl	80007bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049c:	211c      	movs	r1, #28
 800049e:	187b      	adds	r3, r7, r1
 80004a0:	2207      	movs	r2, #7
 80004a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a4:	187b      	adds	r3, r7, r1
 80004a6:	2200      	movs	r2, #0
 80004a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004aa:	187b      	adds	r3, r7, r1
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b0:	187b      	adds	r3, r7, r1
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004b6:	187b      	adds	r3, r7, r1
 80004b8:	2100      	movs	r1, #0
 80004ba:	0018      	movs	r0, r3
 80004bc:	f001 fdd0 	bl	8002060 <HAL_RCC_ClockConfig>
 80004c0:	1e03      	subs	r3, r0, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80004c4:	f000 f97a 	bl	80007bc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80004c8:	003b      	movs	r3, r7
 80004ca:	2280      	movs	r2, #128	; 0x80
 80004cc:	0292      	lsls	r2, r2, #10
 80004ce:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80004d0:	003b      	movs	r3, r7
 80004d2:	2280      	movs	r2, #128	; 0x80
 80004d4:	0052      	lsls	r2, r2, #1
 80004d6:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d8:	003b      	movs	r3, r7
 80004da:	0018      	movs	r0, r3
 80004dc:	f001 ff4a 	bl	8002374 <HAL_RCCEx_PeriphCLKConfig>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80004e4:	f000 f96a 	bl	80007bc <Error_Handler>
  }
}
 80004e8:	46c0      	nop			; (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	b019      	add	sp, #100	; 0x64
 80004ee:	bd90      	pop	{r4, r7, pc}
 80004f0:	40021000 	.word	0x40021000

080004f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	0018      	movs	r0, r3
 80004fe:	2314      	movs	r3, #20
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f002 fcc0 	bl	8002e88 <memset>
  RTC_DateTypeDef sDate = {0};
 8000508:	003b      	movs	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800050e:	4b33      	ldr	r3, [pc, #204]	; (80005dc <MX_RTC_Init+0xe8>)
 8000510:	4a33      	ldr	r2, [pc, #204]	; (80005e0 <MX_RTC_Init+0xec>)
 8000512:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000514:	4b31      	ldr	r3, [pc, #196]	; (80005dc <MX_RTC_Init+0xe8>)
 8000516:	2240      	movs	r2, #64	; 0x40
 8000518:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800051a:	4b30      	ldr	r3, [pc, #192]	; (80005dc <MX_RTC_Init+0xe8>)
 800051c:	227f      	movs	r2, #127	; 0x7f
 800051e:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000520:	4b2e      	ldr	r3, [pc, #184]	; (80005dc <MX_RTC_Init+0xe8>)
 8000522:	22ff      	movs	r2, #255	; 0xff
 8000524:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000526:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <MX_RTC_Init+0xe8>)
 8000528:	2200      	movs	r2, #0
 800052a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800052c:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <MX_RTC_Init+0xe8>)
 800052e:	2200      	movs	r2, #0
 8000530:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000532:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <MX_RTC_Init+0xe8>)
 8000534:	2200      	movs	r2, #0
 8000536:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000538:	4b28      	ldr	r3, [pc, #160]	; (80005dc <MX_RTC_Init+0xe8>)
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	05d2      	lsls	r2, r2, #23
 800053e:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000540:	4b26      	ldr	r3, [pc, #152]	; (80005dc <MX_RTC_Init+0xe8>)
 8000542:	2200      	movs	r2, #0
 8000544:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000546:	4b25      	ldr	r3, [pc, #148]	; (80005dc <MX_RTC_Init+0xe8>)
 8000548:	0018      	movs	r0, r3
 800054a:	f002 f849 	bl	80025e0 <HAL_RTC_Init>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000552:	f000 f933 	bl	80007bc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 6;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2206      	movs	r2, #6
 800055a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 40;
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2228      	movs	r2, #40	; 0x28
 8000560:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2200      	movs	r2, #0
 8000566:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000580:	1d39      	adds	r1, r7, #4
 8000582:	4b16      	ldr	r3, [pc, #88]	; (80005dc <MX_RTC_Init+0xe8>)
 8000584:	2200      	movs	r2, #0
 8000586:	0018      	movs	r0, r3
 8000588:	f002 f8c0 	bl	800270c <HAL_RTC_SetTime>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 8000590:	f000 f914 	bl	80007bc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000594:	003b      	movs	r3, r7
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800059a:	003b      	movs	r3, r7
 800059c:	2201      	movs	r2, #1
 800059e:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 80005a0:	003b      	movs	r3, r7
 80005a2:	2201      	movs	r2, #1
 80005a4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 80005a6:	003b      	movs	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80005ac:	0039      	movs	r1, r7
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <MX_RTC_Init+0xe8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	0018      	movs	r0, r3
 80005b4:	f002 f9ae 	bl	8002914 <HAL_RTC_SetDate>
 80005b8:	1e03      	subs	r3, r0, #0
 80005ba:	d001      	beq.n	80005c0 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 80005bc:	f000 f8fe 	bl	80007bc <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 24390, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 80005c0:	4908      	ldr	r1, [pc, #32]	; (80005e4 <MX_RTC_Init+0xf0>)
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_RTC_Init+0xe8>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	0018      	movs	r0, r3
 80005c8:	f002 fb7a 	bl	8002cc0 <HAL_RTCEx_SetWakeUpTimer_IT>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d001      	beq.n	80005d4 <MX_RTC_Init+0xe0>
  {
    Error_Handler();
 80005d0:	f000 f8f4 	bl	80007bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b006      	add	sp, #24
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000044 	.word	0x20000044
 80005e0:	40002800 	.word	0x40002800
 80005e4:	00005f46 	.word	0x00005f46

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b08b      	sub	sp, #44	; 0x2c
 80005ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	2414      	movs	r4, #20
 80005f0:	193b      	adds	r3, r7, r4
 80005f2:	0018      	movs	r0, r3
 80005f4:	2314      	movs	r3, #20
 80005f6:	001a      	movs	r2, r3
 80005f8:	2100      	movs	r1, #0
 80005fa:	f002 fc45 	bl	8002e88 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b66      	ldr	r3, [pc, #408]	; (8000798 <MX_GPIO_Init+0x1b0>)
 8000600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000602:	4b65      	ldr	r3, [pc, #404]	; (8000798 <MX_GPIO_Init+0x1b0>)
 8000604:	2104      	movs	r1, #4
 8000606:	430a      	orrs	r2, r1
 8000608:	635a      	str	r2, [r3, #52]	; 0x34
 800060a:	4b63      	ldr	r3, [pc, #396]	; (8000798 <MX_GPIO_Init+0x1b0>)
 800060c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800060e:	2204      	movs	r2, #4
 8000610:	4013      	ands	r3, r2
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	4b60      	ldr	r3, [pc, #384]	; (8000798 <MX_GPIO_Init+0x1b0>)
 8000618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800061a:	4b5f      	ldr	r3, [pc, #380]	; (8000798 <MX_GPIO_Init+0x1b0>)
 800061c:	2101      	movs	r1, #1
 800061e:	430a      	orrs	r2, r1
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
 8000622:	4b5d      	ldr	r3, [pc, #372]	; (8000798 <MX_GPIO_Init+0x1b0>)
 8000624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000626:	2201      	movs	r2, #1
 8000628:	4013      	ands	r3, r2
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	4b5a      	ldr	r3, [pc, #360]	; (8000798 <MX_GPIO_Init+0x1b0>)
 8000630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000632:	4b59      	ldr	r3, [pc, #356]	; (8000798 <MX_GPIO_Init+0x1b0>)
 8000634:	2102      	movs	r1, #2
 8000636:	430a      	orrs	r2, r1
 8000638:	635a      	str	r2, [r3, #52]	; 0x34
 800063a:	4b57      	ldr	r3, [pc, #348]	; (8000798 <MX_GPIO_Init+0x1b0>)
 800063c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800063e:	2202      	movs	r2, #2
 8000640:	4013      	ands	r3, r2
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000646:	4b54      	ldr	r3, [pc, #336]	; (8000798 <MX_GPIO_Init+0x1b0>)
 8000648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800064a:	4b53      	ldr	r3, [pc, #332]	; (8000798 <MX_GPIO_Init+0x1b0>)
 800064c:	2108      	movs	r1, #8
 800064e:	430a      	orrs	r2, r1
 8000650:	635a      	str	r2, [r3, #52]	; 0x34
 8000652:	4b51      	ldr	r3, [pc, #324]	; (8000798 <MX_GPIO_Init+0x1b0>)
 8000654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000656:	2208      	movs	r2, #8
 8000658:	4013      	ands	r3, r2
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M23_Pin|H9_Pin|M22_Pin|M21_Pin
 800065e:	494f      	ldr	r1, [pc, #316]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000660:	4b4f      	ldr	r3, [pc, #316]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 8000662:	2200      	movs	r2, #0
 8000664:	0018      	movs	r0, r3
 8000666:	f001 f918 	bl	800189a <HAL_GPIO_WritePin>
                          |M15_Pin|M14_Pin|M6_Pin|H2_Pin
                          |M0_Pin|M1_Pin|M24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M20_Pin|H8_Pin|M19_Pin|M18_Pin
 800066a:	494e      	ldr	r1, [pc, #312]	; (80007a4 <MX_GPIO_Init+0x1bc>)
 800066c:	23a0      	movs	r3, #160	; 0xa0
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	2200      	movs	r2, #0
 8000672:	0018      	movs	r0, r3
 8000674:	f001 f911 	bl	800189a <HAL_GPIO_WritePin>
                          |H7_Pin|M17_Pin|M16_Pin|H6_Pin
                          |H3_Pin|M7_Pin|M4_Pin|M3_Pin
                          |H1_Pin|H0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M13_Pin|H5_Pin|M12_Pin|M11_Pin
 8000678:	494b      	ldr	r1, [pc, #300]	; (80007a8 <MX_GPIO_Init+0x1c0>)
 800067a:	4b4c      	ldr	r3, [pc, #304]	; (80007ac <MX_GPIO_Init+0x1c4>)
 800067c:	2200      	movs	r2, #0
 800067e:	0018      	movs	r0, r3
 8000680:	f001 f90b 	bl	800189a <HAL_GPIO_WritePin>
                          |M10_Pin|H4_Pin|M9_Pin|M8_Pin
                          |H10_Pin|WORK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M5_Pin|M2_Pin|M29_Pin|M28_Pin
 8000684:	2380      	movs	r3, #128	; 0x80
 8000686:	33ff      	adds	r3, #255	; 0xff
 8000688:	4849      	ldr	r0, [pc, #292]	; (80007b0 <MX_GPIO_Init+0x1c8>)
 800068a:	2200      	movs	r2, #0
 800068c:	0019      	movs	r1, r3
 800068e:	f001 f904 	bl	800189a <HAL_GPIO_WritePin>
                          |H11_Pin|M27_Pin|M26_Pin|M25_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : M23_Pin H9_Pin M22_Pin M21_Pin
                           M15_Pin M14_Pin M6_Pin H2_Pin
                           M0_Pin M1_Pin M24_Pin */
  GPIO_InitStruct.Pin = M23_Pin|H9_Pin|M22_Pin|M21_Pin
 8000692:	193b      	adds	r3, r7, r4
 8000694:	4a41      	ldr	r2, [pc, #260]	; (800079c <MX_GPIO_Init+0x1b4>)
 8000696:	601a      	str	r2, [r3, #0]
                          |M15_Pin|M14_Pin|M6_Pin|H2_Pin
                          |M0_Pin|M1_Pin|M24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2201      	movs	r2, #1
 800069c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	4a3c      	ldr	r2, [pc, #240]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 80006ae:	0019      	movs	r1, r3
 80006b0:	0010      	movs	r0, r2
 80006b2:	f000 ff71 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_Pin */
  GPIO_InitStruct.Pin = TOUCH_Pin;
 80006b6:	193b      	adds	r3, r7, r4
 80006b8:	2202      	movs	r2, #2
 80006ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006bc:	193b      	adds	r3, r7, r4
 80006be:	4a3d      	ldr	r2, [pc, #244]	; (80007b4 <MX_GPIO_Init+0x1cc>)
 80006c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	193b      	adds	r3, r7, r4
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TOUCH_GPIO_Port, &GPIO_InitStruct);
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	4a35      	ldr	r2, [pc, #212]	; (80007a0 <MX_GPIO_Init+0x1b8>)
 80006cc:	0019      	movs	r1, r3
 80006ce:	0010      	movs	r0, r2
 80006d0:	f000 ff62 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : M20_Pin H8_Pin M19_Pin M18_Pin
                           H7_Pin M17_Pin M16_Pin H6_Pin
                           H3_Pin M7_Pin M4_Pin M3_Pin
                           H1_Pin H0_Pin */
  GPIO_InitStruct.Pin = M20_Pin|H8_Pin|M19_Pin|M18_Pin
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	4a33      	ldr	r2, [pc, #204]	; (80007a4 <MX_GPIO_Init+0x1bc>)
 80006d8:	601a      	str	r2, [r3, #0]
                          |H7_Pin|M17_Pin|M16_Pin|H6_Pin
                          |H3_Pin|M7_Pin|M4_Pin|M3_Pin
                          |H1_Pin|H0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	2201      	movs	r2, #1
 80006de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	193b      	adds	r3, r7, r4
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e6:	193b      	adds	r3, r7, r4
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	193a      	adds	r2, r7, r4
 80006ee:	23a0      	movs	r3, #160	; 0xa0
 80006f0:	05db      	lsls	r3, r3, #23
 80006f2:	0011      	movs	r1, r2
 80006f4:	0018      	movs	r0, r3
 80006f6:	f000 ff4f 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : M13_Pin H5_Pin M12_Pin M11_Pin
                           M10_Pin H4_Pin M9_Pin M8_Pin
                           H10_Pin WORK_Pin */
  GPIO_InitStruct.Pin = M13_Pin|H5_Pin|M12_Pin|M11_Pin
 80006fa:	0021      	movs	r1, r4
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	4a2a      	ldr	r2, [pc, #168]	; (80007a8 <MX_GPIO_Init+0x1c0>)
 8000700:	601a      	str	r2, [r3, #0]
                          |M10_Pin|H4_Pin|M9_Pin|M8_Pin
                          |H10_Pin|WORK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2201      	movs	r2, #1
 8000706:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	000c      	movs	r4, r1
 8000716:	187b      	adds	r3, r7, r1
 8000718:	4a24      	ldr	r2, [pc, #144]	; (80007ac <MX_GPIO_Init+0x1c4>)
 800071a:	0019      	movs	r1, r3
 800071c:	0010      	movs	r0, r2
 800071e:	f000 ff3b 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_Pin */
  GPIO_InitStruct.Pin = SET_Pin;
 8000722:	0021      	movs	r1, r4
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	0212      	lsls	r2, r2, #8
 800072a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800072c:	187b      	adds	r3, r7, r1
 800072e:	4a22      	ldr	r2, [pc, #136]	; (80007b8 <MX_GPIO_Init+0x1d0>)
 8000730:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2201      	movs	r2, #1
 8000736:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SET_GPIO_Port, &GPIO_InitStruct);
 8000738:	000c      	movs	r4, r1
 800073a:	187b      	adds	r3, r7, r1
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <MX_GPIO_Init+0x1c4>)
 800073e:	0019      	movs	r1, r3
 8000740:	0010      	movs	r0, r2
 8000742:	f000 ff29 	bl	8001598 <HAL_GPIO_Init>

  /*Configure GPIO pins : M5_Pin M2_Pin M29_Pin M28_Pin
                           H11_Pin M27_Pin M26_Pin M25_Pin */
  GPIO_InitStruct.Pin = M5_Pin|M2_Pin|M29_Pin|M28_Pin
 8000746:	0021      	movs	r1, r4
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	32ff      	adds	r2, #255	; 0xff
 800074e:	601a      	str	r2, [r3, #0]
                          |H11_Pin|M27_Pin|M26_Pin|M25_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2201      	movs	r2, #1
 8000754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000762:	187b      	adds	r3, r7, r1
 8000764:	4a12      	ldr	r2, [pc, #72]	; (80007b0 <MX_GPIO_Init+0x1c8>)
 8000766:	0019      	movs	r1, r3
 8000768:	0010      	movs	r0, r2
 800076a:	f000 ff15 	bl	8001598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800076e:	2200      	movs	r2, #0
 8000770:	2100      	movs	r1, #0
 8000772:	2005      	movs	r0, #5
 8000774:	f000 fede 	bl	8001534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000778:	2005      	movs	r0, #5
 800077a:	f000 fef0 	bl	800155e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800077e:	2200      	movs	r2, #0
 8000780:	2100      	movs	r1, #0
 8000782:	2007      	movs	r0, #7
 8000784:	f000 fed6 	bl	8001534 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000788:	2007      	movs	r0, #7
 800078a:	f000 fee8 	bl	800155e <HAL_NVIC_EnableIRQ>

}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b00b      	add	sp, #44	; 0x2c
 8000794:	bd90      	pop	{r4, r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40021000 	.word	0x40021000
 800079c:	00001ffc 	.word	0x00001ffc
 80007a0:	50000800 	.word	0x50000800
 80007a4:	00009fff 	.word	0x00009fff
 80007a8:	00007c1f 	.word	0x00007c1f
 80007ac:	50000400 	.word	0x50000400
 80007b0:	50000c00 	.word	0x50000c00
 80007b4:	10310000 	.word	0x10310000
 80007b8:	10210000 	.word	0x10210000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007c2:	e7fe      	b.n	80007c2 <Error_Handler+0x6>

080007c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	4b11      	ldr	r3, [pc, #68]	; (8000810 <HAL_MspInit+0x4c>)
 80007cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007ce:	4b10      	ldr	r3, [pc, #64]	; (8000810 <HAL_MspInit+0x4c>)
 80007d0:	2101      	movs	r1, #1
 80007d2:	430a      	orrs	r2, r1
 80007d4:	641a      	str	r2, [r3, #64]	; 0x40
 80007d6:	4b0e      	ldr	r3, [pc, #56]	; (8000810 <HAL_MspInit+0x4c>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007da:	2201      	movs	r2, #1
 80007dc:	4013      	ands	r3, r2
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <HAL_MspInit+0x4c>)
 80007e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007e6:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_MspInit+0x4c>)
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	0549      	lsls	r1, r1, #21
 80007ec:	430a      	orrs	r2, r1
 80007ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <HAL_MspInit+0x4c>)
 80007f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	055b      	lsls	r3, r3, #21
 80007f8:	4013      	ands	r3, r2
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80007fe:	23c0      	movs	r3, #192	; 0xc0
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fdd4 	bl	80013b0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000808:	46c0      	nop			; (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40021000 	.word	0x40021000

08000814 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a11      	ldr	r2, [pc, #68]	; (8000868 <HAL_RTC_MspInit+0x54>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d11c      	bne.n	8000860 <HAL_RTC_MspInit+0x4c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <HAL_RTC_MspInit+0x58>)
 8000828:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_RTC_MspInit+0x58>)
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	0209      	lsls	r1, r1, #8
 8000830:	430a      	orrs	r2, r1
 8000832:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_RTC_MspInit+0x58>)
 8000836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_RTC_MspInit+0x58>)
 800083a:	2180      	movs	r1, #128	; 0x80
 800083c:	00c9      	lsls	r1, r1, #3
 800083e:	430a      	orrs	r2, r1
 8000840:	63da      	str	r2, [r3, #60]	; 0x3c
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_RTC_MspInit+0x58>)
 8000844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000846:	2380      	movs	r3, #128	; 0x80
 8000848:	00db      	lsls	r3, r3, #3
 800084a:	4013      	ands	r3, r2
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_TAMP_IRQn, 0, 0);
 8000850:	2200      	movs	r2, #0
 8000852:	2100      	movs	r1, #0
 8000854:	2002      	movs	r0, #2
 8000856:	f000 fe6d 	bl	8001534 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_TAMP_IRQn);
 800085a:	2002      	movs	r0, #2
 800085c:	f000 fe7f 	bl	800155e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b004      	add	sp, #16
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40002800 	.word	0x40002800
 800086c:	40021000 	.word	0x40021000

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000880:	46c0      	nop			; (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000894:	f000 fd4e 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000898:	46c0      	nop			; (mov r8, r8)
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <RTC_TAMP_IRQHandler>:

/**
  * @brief This function handles RTC and TAMP interrupts through EXTI lines 19 and 21.
  */
void RTC_TAMP_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_TAMP_IRQn 0 */

  /* USER CODE END RTC_TAMP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <RTC_TAMP_IRQHandler+0x14>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f002 faa4 	bl	8002df4 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_TAMP_IRQn 1 */

  /* USER CODE END RTC_TAMP_IRQn 1 */
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	20000044 	.word	0x20000044

080008b8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80008bc:	2002      	movs	r0, #2
 80008be:	f001 f809 	bl	80018d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 ffff 	bl	80018d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008d6:	46c0      	nop			; (mov r8, r8)
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008e0:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <SystemInit+0x14>)
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	0512      	lsls	r2, r2, #20
 80008e6:	609a      	str	r2, [r3, #8]
#endif
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008f8:	f7ff fff0 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	; (8000934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	; (8000940 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000922:	f002 fa8d 	bl	8002e40 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000926:	f7ff fc77 	bl	8000218 <main>

0800092a <LoopForever>:

LoopForever:
  b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   r0, =_estack
 800092c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000938:	08002fa0 	.word	0x08002fa0
  ldr r2, =_sbss
 800093c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000940:	2000007c 	.word	0x2000007c

08000944 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_IRQHandler>
	...

08000948 <displayShowTimeForce>:
 *      Author: bartosz
 */

#include "display.h"

void displayShowTimeForce(uint8_t hours, uint8_t minutes){
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	0002      	movs	r2, r0
 8000950:	1dfb      	adds	r3, r7, #7
 8000952:	701a      	strb	r2, [r3, #0]
 8000954:	1dbb      	adds	r3, r7, #6
 8000956:	1c0a      	adds	r2, r1, #0
 8000958:	701a      	strb	r2, [r3, #0]

//	displayTurnOff();


//turn on LEDs
		for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 800095a:	230f      	movs	r3, #15
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	2201      	movs	r2, #1
 8000960:	701a      	strb	r2, [r3, #0]
 8000962:	e00d      	b.n	8000980 <displayShowTimeForce+0x38>
			displayTurnMinutesLED(i, 1);
 8000964:	210f      	movs	r1, #15
 8000966:	000c      	movs	r4, r1
 8000968:	187b      	adds	r3, r7, r1
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2101      	movs	r1, #1
 800096e:	0018      	movs	r0, r3
 8000970:	f000 fa24 	bl	8000dbc <displayTurnMinutesLED>
		for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000974:	0021      	movs	r1, r4
 8000976:	187b      	adds	r3, r7, r1
 8000978:	781a      	ldrb	r2, [r3, #0]
 800097a:	187b      	adds	r3, r7, r1
 800097c:	3201      	adds	r2, #1
 800097e:	701a      	strb	r2, [r3, #0]
 8000980:	230f      	movs	r3, #15
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	1dbb      	adds	r3, r7, #6
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	085b      	lsrs	r3, r3, #1
 800098c:	b2db      	uxtb	r3, r3
 800098e:	3301      	adds	r3, #1
 8000990:	429a      	cmp	r2, r3
 8000992:	dbe7      	blt.n	8000964 <displayShowTimeForce+0x1c>
		}
//turn off unused
		for (uint8_t i = minutes/2+1; i<59; i++){
 8000994:	1dbb      	adds	r3, r7, #6
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	b2da      	uxtb	r2, r3
 800099c:	230e      	movs	r3, #14
 800099e:	18fb      	adds	r3, r7, r3
 80009a0:	3201      	adds	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
 80009a4:	e00d      	b.n	80009c2 <displayShowTimeForce+0x7a>
			displayTurnMinutesLED(i, 0);
 80009a6:	210e      	movs	r1, #14
 80009a8:	000c      	movs	r4, r1
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2100      	movs	r1, #0
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 fa03 	bl	8000dbc <displayTurnMinutesLED>
		for (uint8_t i = minutes/2+1; i<59; i++){
 80009b6:	0021      	movs	r1, r4
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	781a      	ldrb	r2, [r3, #0]
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	3201      	adds	r2, #1
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	230e      	movs	r3, #14
 80009c4:	18fb      	adds	r3, r7, r3
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b3a      	cmp	r3, #58	; 0x3a
 80009ca:	d9ec      	bls.n	80009a6 <displayShowTimeForce+0x5e>
		}
//turn off/on parity LED
		if(minutes%2 ==1){
 80009cc:	1dbb      	adds	r3, r7, #6
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	2201      	movs	r2, #1
 80009d2:	4013      	ands	r3, r2
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d006      	beq.n	80009e8 <displayShowTimeForce+0xa0>
			HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <displayShowTimeForce+0x120>)
 80009dc:	2201      	movs	r2, #1
 80009de:	2110      	movs	r1, #16
 80009e0:	0018      	movs	r0, r3
 80009e2:	f000 ff5a 	bl	800189a <HAL_GPIO_WritePin>
 80009e6:	e005      	b.n	80009f4 <displayShowTimeForce+0xac>
		} else{
			HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 80009e8:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <displayShowTimeForce+0x120>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	2110      	movs	r1, #16
 80009ee:	0018      	movs	r0, r3
 80009f0:	f000 ff53 	bl	800189a <HAL_GPIO_WritePin>
		}


		for (uint8_t i = 1; i < hours + 1; i++) {
 80009f4:	230d      	movs	r3, #13
 80009f6:	18fb      	adds	r3, r7, r3
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
 80009fc:	e00d      	b.n	8000a1a <displayShowTimeForce+0xd2>
			displayTurnHoursLED(i, 1);
 80009fe:	210d      	movs	r1, #13
 8000a00:	000c      	movs	r4, r1
 8000a02:	187b      	adds	r3, r7, r1
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2101      	movs	r1, #1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 f94d 	bl	8000ca8 <displayTurnHoursLED>
		for (uint8_t i = 1; i < hours + 1; i++) {
 8000a0e:	0021      	movs	r1, r4
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	781a      	ldrb	r2, [r3, #0]
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	3201      	adds	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	230d      	movs	r3, #13
 8000a1c:	18fb      	adds	r3, r7, r3
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	3301      	adds	r3, #1
 8000a26:	429a      	cmp	r2, r3
 8000a28:	dbe9      	blt.n	80009fe <displayShowTimeForce+0xb6>
		}
		for (uint8_t i = hours+1; i<11; i++){
 8000a2a:	230c      	movs	r3, #12
 8000a2c:	18fb      	adds	r3, r7, r3
 8000a2e:	1dfa      	adds	r2, r7, #7
 8000a30:	7812      	ldrb	r2, [r2, #0]
 8000a32:	3201      	adds	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
 8000a36:	e00d      	b.n	8000a54 <displayShowTimeForce+0x10c>
			displayTurnHoursLED(i, 0);
 8000a38:	210c      	movs	r1, #12
 8000a3a:	000c      	movs	r4, r1
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	2100      	movs	r1, #0
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 f930 	bl	8000ca8 <displayTurnHoursLED>
		for (uint8_t i = hours+1; i<11; i++){
 8000a48:	0021      	movs	r1, r4
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	3201      	adds	r2, #1
 8000a52:	701a      	strb	r2, [r3, #0]
 8000a54:	230c      	movs	r3, #12
 8000a56:	18fb      	adds	r3, r7, r3
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	2b0a      	cmp	r3, #10
 8000a5c:	d9ec      	bls.n	8000a38 <displayShowTimeForce+0xf0>
		}

}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	46bd      	mov	sp, r7
 8000a62:	b005      	add	sp, #20
 8000a64:	bd90      	pop	{r4, r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	50000400 	.word	0x50000400

08000a6c <displayTurnOff>:

void displayTurnOff(void) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 60; i++) {
 8000a72:	1dfb      	adds	r3, r7, #7
 8000a74:	2200      	movs	r2, #0
 8000a76:	701a      	strb	r2, [r3, #0]
 8000a78:	e00a      	b.n	8000a90 <displayTurnOff+0x24>
		displayTurnMinutesLED(i, 0);
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2100      	movs	r1, #0
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 f99b 	bl	8000dbc <displayTurnMinutesLED>
	for (uint8_t i = 0; i < 60; i++) {
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	3201      	adds	r2, #1
 8000a8e:	701a      	strb	r2, [r3, #0]
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b3b      	cmp	r3, #59	; 0x3b
 8000a96:	d9f0      	bls.n	8000a7a <displayTurnOff+0xe>
	}
	for (uint8_t i = 0; i < 12; i++) {
 8000a98:	1dbb      	adds	r3, r7, #6
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
 8000a9e:	e00a      	b.n	8000ab6 <displayTurnOff+0x4a>
		displayTurnHoursLED(i, 0);
 8000aa0:	1dbb      	adds	r3, r7, #6
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f000 f8fe 	bl	8000ca8 <displayTurnHoursLED>
	for (uint8_t i = 0; i < 12; i++) {
 8000aac:	1dbb      	adds	r3, r7, #6
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	1dbb      	adds	r3, r7, #6
 8000ab2:	3201      	adds	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	1dbb      	adds	r3, r7, #6
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b0b      	cmp	r3, #11
 8000abc:	d9f0      	bls.n	8000aa0 <displayTurnOff+0x34>
	}
}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	b002      	add	sp, #8
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <displayShowTime>:

void displayShowTime(uint8_t hours, uint8_t minutes, uint8_t timeH,
		uint8_t timeM) {
 8000ac8:	b5b0      	push	{r4, r5, r7, lr}
 8000aca:	b084      	sub	sp, #16
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	0005      	movs	r5, r0
 8000ad0:	000c      	movs	r4, r1
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	0019      	movs	r1, r3
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	1c2a      	adds	r2, r5, #0
 8000ada:	701a      	strb	r2, [r3, #0]
 8000adc:	1dbb      	adds	r3, r7, #6
 8000ade:	1c22      	adds	r2, r4, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
 8000ae2:	1d7b      	adds	r3, r7, #5
 8000ae4:	1c02      	adds	r2, r0, #0
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	1c0a      	adds	r2, r1, #0
 8000aec:	701a      	strb	r2, [r3, #0]

	displaySplashMinutes(4);
 8000aee:	2004      	movs	r0, #4
 8000af0:	f000 f89a 	bl	8000c28 <displaySplashMinutes>

	for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000af4:	230f      	movs	r3, #15
 8000af6:	18fb      	adds	r3, r7, r3
 8000af8:	2201      	movs	r2, #1
 8000afa:	701a      	strb	r2, [r3, #0]
 8000afc:	e010      	b.n	8000b20 <displayShowTime+0x58>
		displayTurnMinutesLED(i, 1);
 8000afe:	240f      	movs	r4, #15
 8000b00:	193b      	adds	r3, r7, r4
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2101      	movs	r1, #1
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 f958 	bl	8000dbc <displayTurnMinutesLED>
		HAL_Delay(timeM);
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	0018      	movs	r0, r3
 8000b12:	f000 fc2b 	bl	800136c <HAL_Delay>
	for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	3201      	adds	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	230f      	movs	r3, #15
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	781a      	ldrb	r2, [r3, #0]
 8000b26:	1dbb      	adds	r3, r7, #6
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	085b      	lsrs	r3, r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	3301      	adds	r3, #1
 8000b30:	429a      	cmp	r2, r3
 8000b32:	dbe4      	blt.n	8000afe <displayShowTime+0x36>
	}

	if(minutes%2 ==1){
 8000b34:	1dbb      	adds	r3, r7, #6
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d005      	beq.n	8000b4e <displayShowTime+0x86>
		HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 1);
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <displayShowTime+0x15c>)
 8000b44:	2201      	movs	r2, #1
 8000b46:	2110      	movs	r1, #16
 8000b48:	0018      	movs	r0, r3
 8000b4a:	f000 fea6 	bl	800189a <HAL_GPIO_WritePin>
	}

//	displaySplashHours(10);

	for (uint8_t i = 1; i < hours + 1; i++) {
 8000b4e:	230e      	movs	r3, #14
 8000b50:	18fb      	adds	r3, r7, r3
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e010      	b.n	8000b7a <displayShowTime+0xb2>
		displayTurnHoursLED(i, 1);
 8000b58:	240e      	movs	r4, #14
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2101      	movs	r1, #1
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 f8a1 	bl	8000ca8 <displayTurnHoursLED>
		HAL_Delay(timeH);
 8000b66:	1d7b      	adds	r3, r7, #5
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f000 fbfe 	bl	800136c <HAL_Delay>
	for (uint8_t i = 1; i < hours + 1; i++) {
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	3201      	adds	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	230e      	movs	r3, #14
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	429a      	cmp	r2, r3
 8000b88:	dbe6      	blt.n	8000b58 <displayShowTime+0x90>
	}

	HAL_Delay(1200);
 8000b8a:	2396      	movs	r3, #150	; 0x96
 8000b8c:	00db      	lsls	r3, r3, #3
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f000 fbec 	bl	800136c <HAL_Delay>

	for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000b94:	230d      	movs	r3, #13
 8000b96:	18fb      	adds	r3, r7, r3
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	e010      	b.n	8000bc0 <displayShowTime+0xf8>
		displayTurnMinutesLED(i, 0);
 8000b9e:	240d      	movs	r4, #13
 8000ba0:	193b      	adds	r3, r7, r4
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f908 	bl	8000dbc <displayTurnMinutesLED>
		HAL_Delay(timeM);
 8000bac:	1d3b      	adds	r3, r7, #4
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f000 fbdb 	bl	800136c <HAL_Delay>
	for (uint8_t i = 1; i < (minutes / 2) + 1; i++) {
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	781a      	ldrb	r2, [r3, #0]
 8000bba:	193b      	adds	r3, r7, r4
 8000bbc:	3201      	adds	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
 8000bc0:	230d      	movs	r3, #13
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	781a      	ldrb	r2, [r3, #0]
 8000bc6:	1dbb      	adds	r3, r7, #6
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	085b      	lsrs	r3, r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	3301      	adds	r3, #1
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	dbe4      	blt.n	8000b9e <displayShowTime+0xd6>
	}

	for (uint8_t i = 1; i < hours + 1; i++) {
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e010      	b.n	8000c00 <displayShowTime+0x138>
		displayTurnHoursLED(i, 0);
 8000bde:	240c      	movs	r4, #12
 8000be0:	193b      	adds	r3, r7, r4
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2100      	movs	r1, #0
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 f85e 	bl	8000ca8 <displayTurnHoursLED>
		HAL_Delay(timeH);
 8000bec:	1d7b      	adds	r3, r7, #5
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f000 fbbb 	bl	800136c <HAL_Delay>
	for (uint8_t i = 1; i < hours + 1; i++) {
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	3201      	adds	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	230c      	movs	r3, #12
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	781a      	ldrb	r2, [r3, #0]
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	dbe6      	blt.n	8000bde <displayShowTime+0x116>
	}

	HAL_GPIO_WritePin(WORK_GPIO_Port, WORK_Pin, 0);
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <displayShowTime+0x15c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	2110      	movs	r1, #16
 8000c16:	0018      	movs	r0, r3
 8000c18:	f000 fe3f 	bl	800189a <HAL_GPIO_WritePin>
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b004      	add	sp, #16
 8000c22:	bdb0      	pop	{r4, r5, r7, pc}
 8000c24:	50000400 	.word	0x50000400

08000c28 <displaySplashMinutes>:

void displaySplashMinutes(uint8_t time) {
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	0002      	movs	r2, r0
 8000c30:	1dfb      	adds	r3, r7, #7
 8000c32:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 30; i++) {
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	e010      	b.n	8000c60 <displaySplashMinutes+0x38>
		displayTurnMinutesLED(i, 1);
 8000c3e:	240f      	movs	r4, #15
 8000c40:	193b      	adds	r3, r7, r4
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f8b8 	bl	8000dbc <displayTurnMinutesLED>
		HAL_Delay(time);
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	0018      	movs	r0, r3
 8000c52:	f000 fb8b 	bl	800136c <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++) {
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	781a      	ldrb	r2, [r3, #0]
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	3201      	adds	r2, #1
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	230f      	movs	r3, #15
 8000c62:	18fb      	adds	r3, r7, r3
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b1d      	cmp	r3, #29
 8000c68:	d9e9      	bls.n	8000c3e <displaySplashMinutes+0x16>
	}

	for (uint8_t i = 0; i < 30; i++) {
 8000c6a:	230e      	movs	r3, #14
 8000c6c:	18fb      	adds	r3, r7, r3
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
 8000c72:	e010      	b.n	8000c96 <displaySplashMinutes+0x6e>
		displayTurnMinutesLED(i, 0);
 8000c74:	240e      	movs	r4, #14
 8000c76:	193b      	adds	r3, r7, r4
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	f000 f89d 	bl	8000dbc <displayTurnMinutesLED>
		HAL_Delay(time);
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 fb70 	bl	800136c <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++) {
 8000c8c:	193b      	adds	r3, r7, r4
 8000c8e:	781a      	ldrb	r2, [r3, #0]
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	3201      	adds	r2, #1
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	230e      	movs	r3, #14
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b1d      	cmp	r3, #29
 8000c9e:	d9e9      	bls.n	8000c74 <displaySplashMinutes+0x4c>
	}
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b005      	add	sp, #20
 8000ca6:	bd90      	pop	{r4, r7, pc}

08000ca8 <displayTurnHoursLED>:
		displayTurnHoursLED(i, 0);
		HAL_Delay(time);
	}
}

void displayTurnHoursLED(uint8_t led, uint8_t state) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	0002      	movs	r2, r0
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	1dbb      	adds	r3, r7, #6
 8000cb6:	1c0a      	adds	r2, r1, #0
 8000cb8:	701a      	strb	r2, [r3, #0]

	switch (led) {
 8000cba:	1dfb      	adds	r3, r7, #7
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b0b      	cmp	r3, #11
 8000cc0:	d86f      	bhi.n	8000da2 <displayTurnHoursLED+0xfa>
 8000cc2:	009a      	lsls	r2, r3, #2
 8000cc4:	4b39      	ldr	r3, [pc, #228]	; (8000dac <displayTurnHoursLED+0x104>)
 8000cc6:	18d3      	adds	r3, r2, r3
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	469f      	mov	pc, r3

	case 0:
		HAL_GPIO_WritePin(H0_GPIO_Port, H0_Pin, state);
 8000ccc:	1dbb      	adds	r3, r7, #6
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	0219      	lsls	r1, r3, #8
 8000cd4:	23a0      	movs	r3, #160	; 0xa0
 8000cd6:	05db      	lsls	r3, r3, #23
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f000 fdde 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000cde:	e060      	b.n	8000da2 <displayTurnHoursLED+0xfa>
	case 1:
		HAL_GPIO_WritePin(H1_GPIO_Port, H1_Pin, state);
 8000ce0:	1dbb      	adds	r3, r7, #6
 8000ce2:	781a      	ldrb	r2, [r3, #0]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	0159      	lsls	r1, r3, #5
 8000ce8:	23a0      	movs	r3, #160	; 0xa0
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	0018      	movs	r0, r3
 8000cee:	f000 fdd4 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000cf2:	e056      	b.n	8000da2 <displayTurnHoursLED+0xfa>
	case 2:
		HAL_GPIO_WritePin(H2_GPIO_Port, H2_Pin, state);
 8000cf4:	1dbb      	adds	r3, r7, #6
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	482d      	ldr	r0, [pc, #180]	; (8000db0 <displayTurnHoursLED+0x108>)
 8000cfa:	001a      	movs	r2, r3
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	f000 fdcc 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000d02:	e04e      	b.n	8000da2 <displayTurnHoursLED+0xfa>
	case 3:
		HAL_GPIO_WritePin(H3_GPIO_Port, H3_Pin, state);
 8000d04:	1dbb      	adds	r3, r7, #6
 8000d06:	781a      	ldrb	r2, [r3, #0]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	0059      	lsls	r1, r3, #1
 8000d0c:	23a0      	movs	r3, #160	; 0xa0
 8000d0e:	05db      	lsls	r3, r3, #23
 8000d10:	0018      	movs	r0, r3
 8000d12:	f000 fdc2 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000d16:	e044      	b.n	8000da2 <displayTurnHoursLED+0xfa>
	case 4:
		HAL_GPIO_WritePin(H4_GPIO_Port, H4_Pin, state);
 8000d18:	1dbb      	adds	r3, r7, #6
 8000d1a:	781a      	ldrb	r2, [r3, #0]
 8000d1c:	2380      	movs	r3, #128	; 0x80
 8000d1e:	015b      	lsls	r3, r3, #5
 8000d20:	4824      	ldr	r0, [pc, #144]	; (8000db4 <displayTurnHoursLED+0x10c>)
 8000d22:	0019      	movs	r1, r3
 8000d24:	f000 fdb9 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000d28:	e03b      	b.n	8000da2 <displayTurnHoursLED+0xfa>
	case 5:
		HAL_GPIO_WritePin(H5_GPIO_Port, H5_Pin, state);
 8000d2a:	1dbb      	adds	r3, r7, #6
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	4821      	ldr	r0, [pc, #132]	; (8000db4 <displayTurnHoursLED+0x10c>)
 8000d30:	001a      	movs	r2, r3
 8000d32:	2102      	movs	r1, #2
 8000d34:	f000 fdb1 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000d38:	e033      	b.n	8000da2 <displayTurnHoursLED+0xfa>
	case 6:
		HAL_GPIO_WritePin(H6_GPIO_Port, H6_Pin, state);
 8000d3a:	1dbb      	adds	r3, r7, #6
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	23a0      	movs	r3, #160	; 0xa0
 8000d40:	05db      	lsls	r3, r3, #23
 8000d42:	2180      	movs	r1, #128	; 0x80
 8000d44:	0018      	movs	r0, r3
 8000d46:	f000 fda8 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000d4a:	e02a      	b.n	8000da2 <displayTurnHoursLED+0xfa>
	case 7:
		HAL_GPIO_WritePin(H7_GPIO_Port, H7_Pin, state);
 8000d4c:	1dbb      	adds	r3, r7, #6
 8000d4e:	781a      	ldrb	r2, [r3, #0]
 8000d50:	23a0      	movs	r3, #160	; 0xa0
 8000d52:	05db      	lsls	r3, r3, #23
 8000d54:	2110      	movs	r1, #16
 8000d56:	0018      	movs	r0, r3
 8000d58:	f000 fd9f 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000d5c:	e021      	b.n	8000da2 <displayTurnHoursLED+0xfa>
	case 8:
		HAL_GPIO_WritePin(H8_GPIO_Port, H8_Pin, state);
 8000d5e:	1dbb      	adds	r3, r7, #6
 8000d60:	781a      	ldrb	r2, [r3, #0]
 8000d62:	23a0      	movs	r3, #160	; 0xa0
 8000d64:	05db      	lsls	r3, r3, #23
 8000d66:	2102      	movs	r1, #2
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f000 fd96 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000d6e:	e018      	b.n	8000da2 <displayTurnHoursLED+0xfa>
	case 9:
		HAL_GPIO_WritePin(H9_GPIO_Port, H9_Pin, state);
 8000d70:	1dbb      	adds	r3, r7, #6
 8000d72:	781a      	ldrb	r2, [r3, #0]
 8000d74:	2380      	movs	r3, #128	; 0x80
 8000d76:	015b      	lsls	r3, r3, #5
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <displayTurnHoursLED+0x108>)
 8000d7a:	0019      	movs	r1, r3
 8000d7c:	f000 fd8d 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000d80:	e00f      	b.n	8000da2 <displayTurnHoursLED+0xfa>
	case 10:
		HAL_GPIO_WritePin(H10_GPIO_Port, H10_Pin, state);
 8000d82:	1dbb      	adds	r3, r7, #6
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	480b      	ldr	r0, [pc, #44]	; (8000db4 <displayTurnHoursLED+0x10c>)
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2108      	movs	r1, #8
 8000d8c:	f000 fd85 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000d90:	e007      	b.n	8000da2 <displayTurnHoursLED+0xfa>
	case 11:
		HAL_GPIO_WritePin(H11_GPIO_Port, H11_Pin, state);
 8000d92:	1dbb      	adds	r3, r7, #6
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	4808      	ldr	r0, [pc, #32]	; (8000db8 <displayTurnHoursLED+0x110>)
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2108      	movs	r1, #8
 8000d9c:	f000 fd7d 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000da0:	46c0      	nop			; (mov r8, r8)

	}

}
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	46bd      	mov	sp, r7
 8000da6:	b002      	add	sp, #8
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			; (mov r8, r8)
 8000dac:	08002ef0 	.word	0x08002ef0
 8000db0:	50000800 	.word	0x50000800
 8000db4:	50000400 	.word	0x50000400
 8000db8:	50000c00 	.word	0x50000c00

08000dbc <displayTurnMinutesLED>:

void displayTurnMinutesLED(uint8_t led, uint8_t state) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	1dbb      	adds	r3, r7, #6
 8000dca:	1c0a      	adds	r2, r1, #0
 8000dcc:	701a      	strb	r2, [r3, #0]

	switch (led) {
 8000dce:	1dfb      	adds	r3, r7, #7
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b1d      	cmp	r3, #29
 8000dd4:	d900      	bls.n	8000dd8 <displayTurnMinutesLED+0x1c>
 8000dd6:	e108      	b.n	8000fea <displayTurnMinutesLED+0x22e>
 8000dd8:	009a      	lsls	r2, r3, #2
 8000dda:	4b86      	ldr	r3, [pc, #536]	; (8000ff4 <displayTurnMinutesLED+0x238>)
 8000ddc:	18d3      	adds	r3, r2, r3
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	469f      	mov	pc, r3

	case 0:
		HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, state);
 8000de2:	1dbb      	adds	r3, r7, #6
 8000de4:	781a      	ldrb	r2, [r3, #0]
 8000de6:	2380      	movs	r3, #128	; 0x80
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4883      	ldr	r0, [pc, #524]	; (8000ff8 <displayTurnMinutesLED+0x23c>)
 8000dec:	0019      	movs	r1, r3
 8000dee:	f000 fd54 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000df2:	e0fa      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 1:
		HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, state);
 8000df4:	1dbb      	adds	r3, r7, #6
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	487e      	ldr	r0, [pc, #504]	; (8000ff8 <displayTurnMinutesLED+0x23c>)
 8000dfe:	0019      	movs	r1, r3
 8000e00:	f000 fd4b 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000e04:	e0f1      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 2:
		HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, state);
 8000e06:	1dbb      	adds	r3, r7, #6
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	487c      	ldr	r0, [pc, #496]	; (8000ffc <displayTurnMinutesLED+0x240>)
 8000e0c:	001a      	movs	r2, r3
 8000e0e:	2101      	movs	r1, #1
 8000e10:	f000 fd43 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000e14:	e0e9      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 3:
		HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin, state);
 8000e16:	1dbb      	adds	r3, r7, #6
 8000e18:	781a      	ldrb	r2, [r3, #0]
 8000e1a:	2380      	movs	r3, #128	; 0x80
 8000e1c:	0119      	lsls	r1, r3, #4
 8000e1e:	23a0      	movs	r3, #160	; 0xa0
 8000e20:	05db      	lsls	r3, r3, #23
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 fd39 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000e28:	e0df      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 4:
		HAL_GPIO_WritePin(M4_GPIO_Port, M4_Pin, state);
 8000e2a:	1dbb      	adds	r3, r7, #6
 8000e2c:	781a      	ldrb	r2, [r3, #0]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	00d9      	lsls	r1, r3, #3
 8000e32:	23a0      	movs	r3, #160	; 0xa0
 8000e34:	05db      	lsls	r3, r3, #23
 8000e36:	0018      	movs	r0, r3
 8000e38:	f000 fd2f 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000e3c:	e0d5      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 5:
		HAL_GPIO_WritePin(M5_GPIO_Port, M5_Pin, state);
 8000e3e:	1dbb      	adds	r3, r7, #6
 8000e40:	781a      	ldrb	r2, [r3, #0]
 8000e42:	2380      	movs	r3, #128	; 0x80
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	486d      	ldr	r0, [pc, #436]	; (8000ffc <displayTurnMinutesLED+0x240>)
 8000e48:	0019      	movs	r1, r3
 8000e4a:	f000 fd26 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000e4e:	e0cc      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 6:
		HAL_GPIO_WritePin(M6_GPIO_Port, M6_Pin, state);
 8000e50:	1dbb      	adds	r3, r7, #6
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	4868      	ldr	r0, [pc, #416]	; (8000ff8 <displayTurnMinutesLED+0x23c>)
 8000e56:	001a      	movs	r2, r3
 8000e58:	2140      	movs	r1, #64	; 0x40
 8000e5a:	f000 fd1e 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000e5e:	e0c4      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 7:
		HAL_GPIO_WritePin(M7_GPIO_Port, M7_Pin, state);
 8000e60:	1dbb      	adds	r3, r7, #6
 8000e62:	781a      	ldrb	r2, [r3, #0]
 8000e64:	2380      	movs	r3, #128	; 0x80
 8000e66:	0099      	lsls	r1, r3, #2
 8000e68:	23a0      	movs	r3, #160	; 0xa0
 8000e6a:	05db      	lsls	r3, r3, #23
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f000 fd14 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000e72:	e0ba      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 8:
		HAL_GPIO_WritePin(M8_GPIO_Port, M8_Pin, state);
 8000e74:	1dbb      	adds	r3, r7, #6
 8000e76:	781a      	ldrb	r2, [r3, #0]
 8000e78:	2380      	movs	r3, #128	; 0x80
 8000e7a:	01db      	lsls	r3, r3, #7
 8000e7c:	4860      	ldr	r0, [pc, #384]	; (8001000 <displayTurnMinutesLED+0x244>)
 8000e7e:	0019      	movs	r1, r3
 8000e80:	f000 fd0b 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000e84:	e0b1      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 9:
		HAL_GPIO_WritePin(M9_GPIO_Port, M9_Pin, state);
 8000e86:	1dbb      	adds	r3, r7, #6
 8000e88:	781a      	ldrb	r2, [r3, #0]
 8000e8a:	2380      	movs	r3, #128	; 0x80
 8000e8c:	019b      	lsls	r3, r3, #6
 8000e8e:	485c      	ldr	r0, [pc, #368]	; (8001000 <displayTurnMinutesLED+0x244>)
 8000e90:	0019      	movs	r1, r3
 8000e92:	f000 fd02 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000e96:	e0a8      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 10:
		HAL_GPIO_WritePin(M10_GPIO_Port, M10_Pin, state);
 8000e98:	1dbb      	adds	r3, r7, #6
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	4857      	ldr	r0, [pc, #348]	; (8001000 <displayTurnMinutesLED+0x244>)
 8000ea2:	0019      	movs	r1, r3
 8000ea4:	f000 fcf9 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000ea8:	e09f      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 11:
		HAL_GPIO_WritePin(M11_GPIO_Port, M11_Pin, state);
 8000eaa:	1dbb      	adds	r3, r7, #6
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	2380      	movs	r3, #128	; 0x80
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	4853      	ldr	r0, [pc, #332]	; (8001000 <displayTurnMinutesLED+0x244>)
 8000eb4:	0019      	movs	r1, r3
 8000eb6:	f000 fcf0 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000eba:	e096      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 12:
		HAL_GPIO_WritePin(M12_GPIO_Port, M12_Pin, state);
 8000ebc:	1dbb      	adds	r3, r7, #6
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	484f      	ldr	r0, [pc, #316]	; (8001000 <displayTurnMinutesLED+0x244>)
 8000ec2:	001a      	movs	r2, r3
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	f000 fce8 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000eca:	e08e      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 13:
		HAL_GPIO_WritePin(M13_GPIO_Port, M13_Pin, state);
 8000ecc:	1dbb      	adds	r3, r7, #6
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	484b      	ldr	r0, [pc, #300]	; (8001000 <displayTurnMinutesLED+0x244>)
 8000ed2:	001a      	movs	r2, r3
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	f000 fce0 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000eda:	e086      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 14:
		HAL_GPIO_WritePin(M14_GPIO_Port, M14_Pin, state);
 8000edc:	1dbb      	adds	r3, r7, #6
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	4845      	ldr	r0, [pc, #276]	; (8000ff8 <displayTurnMinutesLED+0x23c>)
 8000ee2:	001a      	movs	r2, r3
 8000ee4:	2120      	movs	r1, #32
 8000ee6:	f000 fcd8 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000eea:	e07e      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 15:
		HAL_GPIO_WritePin(M15_GPIO_Port, M15_Pin, state);
 8000eec:	1dbb      	adds	r3, r7, #6
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4841      	ldr	r0, [pc, #260]	; (8000ff8 <displayTurnMinutesLED+0x23c>)
 8000ef2:	001a      	movs	r2, r3
 8000ef4:	2110      	movs	r1, #16
 8000ef6:	f000 fcd0 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000efa:	e076      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 16:
		HAL_GPIO_WritePin(M16_GPIO_Port, M16_Pin, state);
 8000efc:	1dbb      	adds	r3, r7, #6
 8000efe:	781a      	ldrb	r2, [r3, #0]
 8000f00:	23a0      	movs	r3, #160	; 0xa0
 8000f02:	05db      	lsls	r3, r3, #23
 8000f04:	2140      	movs	r1, #64	; 0x40
 8000f06:	0018      	movs	r0, r3
 8000f08:	f000 fcc7 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000f0c:	e06d      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 17:
		HAL_GPIO_WritePin(M17_GPIO_Port, M17_Pin, state);
 8000f0e:	1dbb      	adds	r3, r7, #6
 8000f10:	781a      	ldrb	r2, [r3, #0]
 8000f12:	23a0      	movs	r3, #160	; 0xa0
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	2120      	movs	r1, #32
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 fcbe 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000f1e:	e064      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 18:
		HAL_GPIO_WritePin(M18_GPIO_Port, M18_Pin, state);
 8000f20:	1dbb      	adds	r3, r7, #6
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	23a0      	movs	r3, #160	; 0xa0
 8000f26:	05db      	lsls	r3, r3, #23
 8000f28:	2108      	movs	r1, #8
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	f000 fcb5 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000f30:	e05b      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 19:
		HAL_GPIO_WritePin(M19_GPIO_Port, M19_Pin, state);
 8000f32:	1dbb      	adds	r3, r7, #6
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	23a0      	movs	r3, #160	; 0xa0
 8000f38:	05db      	lsls	r3, r3, #23
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f000 fcac 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000f42:	e052      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 20:
		HAL_GPIO_WritePin(M20_GPIO_Port, M20_Pin, state);
 8000f44:	1dbb      	adds	r3, r7, #6
 8000f46:	781a      	ldrb	r2, [r3, #0]
 8000f48:	23a0      	movs	r3, #160	; 0xa0
 8000f4a:	05db      	lsls	r3, r3, #23
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f000 fca3 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000f54:	e049      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 21:
		HAL_GPIO_WritePin(M21_GPIO_Port, M21_Pin, state);
 8000f56:	1dbb      	adds	r3, r7, #6
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	4827      	ldr	r0, [pc, #156]	; (8000ff8 <displayTurnMinutesLED+0x23c>)
 8000f5c:	001a      	movs	r2, r3
 8000f5e:	2108      	movs	r1, #8
 8000f60:	f000 fc9b 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000f64:	e041      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 22:
		HAL_GPIO_WritePin(M22_GPIO_Port, M22_Pin, state);
 8000f66:	1dbb      	adds	r3, r7, #6
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	4823      	ldr	r0, [pc, #140]	; (8000ff8 <displayTurnMinutesLED+0x23c>)
 8000f6c:	001a      	movs	r2, r3
 8000f6e:	2104      	movs	r1, #4
 8000f70:	f000 fc93 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000f74:	e039      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 23:
		HAL_GPIO_WritePin(M23_GPIO_Port, M23_Pin, state);
 8000f76:	1dbb      	adds	r3, r7, #6
 8000f78:	781a      	ldrb	r2, [r3, #0]
 8000f7a:	2380      	movs	r3, #128	; 0x80
 8000f7c:	011b      	lsls	r3, r3, #4
 8000f7e:	481e      	ldr	r0, [pc, #120]	; (8000ff8 <displayTurnMinutesLED+0x23c>)
 8000f80:	0019      	movs	r1, r3
 8000f82:	f000 fc8a 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000f86:	e030      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 24:
		HAL_GPIO_WritePin(M24_GPIO_Port, M24_Pin, state);
 8000f88:	1dbb      	adds	r3, r7, #6
 8000f8a:	781a      	ldrb	r2, [r3, #0]
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4819      	ldr	r0, [pc, #100]	; (8000ff8 <displayTurnMinutesLED+0x23c>)
 8000f92:	0019      	movs	r1, r3
 8000f94:	f000 fc81 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000f98:	e027      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 25:
		HAL_GPIO_WritePin(M25_GPIO_Port, M25_Pin, state);
 8000f9a:	1dbb      	adds	r3, r7, #6
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	4817      	ldr	r0, [pc, #92]	; (8000ffc <displayTurnMinutesLED+0x240>)
 8000fa0:	001a      	movs	r2, r3
 8000fa2:	2140      	movs	r1, #64	; 0x40
 8000fa4:	f000 fc79 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000fa8:	e01f      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 26:
		HAL_GPIO_WritePin(M26_GPIO_Port, M26_Pin, state);
 8000faa:	1dbb      	adds	r3, r7, #6
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	4813      	ldr	r0, [pc, #76]	; (8000ffc <displayTurnMinutesLED+0x240>)
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	f000 fc71 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000fb8:	e017      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 27:
		HAL_GPIO_WritePin(M27_GPIO_Port, M27_Pin, state);
 8000fba:	1dbb      	adds	r3, r7, #6
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	480f      	ldr	r0, [pc, #60]	; (8000ffc <displayTurnMinutesLED+0x240>)
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	2110      	movs	r1, #16
 8000fc4:	f000 fc69 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000fc8:	e00f      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 28:
		HAL_GPIO_WritePin(M28_GPIO_Port, M28_Pin, state);
 8000fca:	1dbb      	adds	r3, r7, #6
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	480b      	ldr	r0, [pc, #44]	; (8000ffc <displayTurnMinutesLED+0x240>)
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	2104      	movs	r1, #4
 8000fd4:	f000 fc61 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000fd8:	e007      	b.n	8000fea <displayTurnMinutesLED+0x22e>
	case 29:
		HAL_GPIO_WritePin(M29_GPIO_Port, M29_Pin, state);
 8000fda:	1dbb      	adds	r3, r7, #6
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	4807      	ldr	r0, [pc, #28]	; (8000ffc <displayTurnMinutesLED+0x240>)
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	2102      	movs	r1, #2
 8000fe4:	f000 fc59 	bl	800189a <HAL_GPIO_WritePin>
		break;
 8000fe8:	46c0      	nop			; (mov r8, r8)

	}

}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			; (mov r8, r8)
 8000ff4:	08002f20 	.word	0x08002f20
 8000ff8:	50000800 	.word	0x50000800
 8000ffc:	50000c00 	.word	0x50000c00
 8001000:	50000400 	.word	0x50000400

08001004 <extiCallback>:

#include "interrupts.h"
#include "main.h"
#include "../rtc/rtc.h"

void extiCallback(uint16_t pin) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	0002      	movs	r2, r0
 800100c:	1dbb      	adds	r3, r7, #6
 800100e:	801a      	strh	r2, [r3, #0]

//	if(pin == 0){
//		pin = SET_Pin; // dunno why- SET pin is reading as - instead of 15
//	}
	dontSleepFlag = 1;
 8001010:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <extiCallback+0x144>)
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]

	if (pin == TOUCH_Pin) {
 8001016:	1dbb      	adds	r3, r7, #6
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d154      	bne.n	80010c8 <extiCallback+0xc4>

		if (mode == MODE_SLEEP) {
 800101e:	4b4b      	ldr	r3, [pc, #300]	; (800114c <extiCallback+0x148>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b04      	cmp	r3, #4
 8001026:	d103      	bne.n	8001030 <extiCallback+0x2c>
			mode = MODE_NORMAL;
 8001028:	4b48      	ldr	r3, [pc, #288]	; (800114c <extiCallback+0x148>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
			mode = MODE_FORCE;
		}

	}

}
 800102e:	e086      	b.n	800113e <extiCallback+0x13a>
		} else if (mode == MODE_SETTINGS_H) {
 8001030:	4b46      	ldr	r3, [pc, #280]	; (800114c <extiCallback+0x148>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d116      	bne.n	8001068 <extiCallback+0x64>
			hours++;
 800103a:	4b45      	ldr	r3, [pc, #276]	; (8001150 <extiCallback+0x14c>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b25b      	sxtb	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	3301      	adds	r3, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	b25a      	sxtb	r2, r3
 8001048:	4b41      	ldr	r3, [pc, #260]	; (8001150 <extiCallback+0x14c>)
 800104a:	701a      	strb	r2, [r3, #0]
			if (hours > 11)
 800104c:	4b40      	ldr	r3, [pc, #256]	; (8001150 <extiCallback+0x14c>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	2b0b      	cmp	r3, #11
 8001054:	dd02      	ble.n	800105c <extiCallback+0x58>
				hours = 0;
 8001056:	4b3e      	ldr	r3, [pc, #248]	; (8001150 <extiCallback+0x14c>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
			seconds = 0;
 800105c:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <extiCallback+0x150>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
			rtcSetTime();
 8001062:	f000 f8cd 	bl	8001200 <rtcSetTime>
}
 8001066:	e06a      	b.n	800113e <extiCallback+0x13a>
		} else if (mode == MODE_SETTINGS_M) {
 8001068:	4b38      	ldr	r3, [pc, #224]	; (800114c <extiCallback+0x148>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d116      	bne.n	80010a0 <extiCallback+0x9c>
			minutes++;
 8001072:	4b39      	ldr	r3, [pc, #228]	; (8001158 <extiCallback+0x154>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	b21b      	sxth	r3, r3
 8001078:	b29b      	uxth	r3, r3
 800107a:	3301      	adds	r3, #1
 800107c:	b29b      	uxth	r3, r3
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b35      	ldr	r3, [pc, #212]	; (8001158 <extiCallback+0x154>)
 8001082:	801a      	strh	r2, [r3, #0]
			if (minutes > 59)
 8001084:	4b34      	ldr	r3, [pc, #208]	; (8001158 <extiCallback+0x154>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	b21b      	sxth	r3, r3
 800108a:	2b3b      	cmp	r3, #59	; 0x3b
 800108c:	dd02      	ble.n	8001094 <extiCallback+0x90>
				minutes = 0;
 800108e:	4b32      	ldr	r3, [pc, #200]	; (8001158 <extiCallback+0x154>)
 8001090:	2200      	movs	r2, #0
 8001092:	801a      	strh	r2, [r3, #0]
			seconds = 0;
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <extiCallback+0x150>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
			rtcSetTime();
 800109a:	f000 f8b1 	bl	8001200 <rtcSetTime>
}
 800109e:	e04e      	b.n	800113e <extiCallback+0x13a>
		} else if(mode == MODE_SETTINGS_S){
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <extiCallback+0x148>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d105      	bne.n	80010b6 <extiCallback+0xb2>
			seconds = 0;
 80010aa:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <extiCallback+0x150>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
			rtcSetTime();
 80010b0:	f000 f8a6 	bl	8001200 <rtcSetTime>
}
 80010b4:	e043      	b.n	800113e <extiCallback+0x13a>
		}else if(mode == MODE_FORCE){
 80010b6:	4b25      	ldr	r3, [pc, #148]	; (800114c <extiCallback+0x148>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b05      	cmp	r3, #5
 80010be:	d13e      	bne.n	800113e <extiCallback+0x13a>
			mode = MODE_NORMAL;
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <extiCallback+0x148>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
}
 80010c6:	e03a      	b.n	800113e <extiCallback+0x13a>
	else if (pin == SET_Pin) {
 80010c8:	1dbb      	adds	r3, r7, #6
 80010ca:	881a      	ldrh	r2, [r3, #0]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d134      	bne.n	800113e <extiCallback+0x13a>
		if (mode == MODE_SLEEP) {
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <extiCallback+0x148>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d108      	bne.n	80010f0 <extiCallback+0xec>
			mode = MODE_SETTINGS_H;
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <extiCallback+0x148>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	701a      	strb	r2, [r3, #0]
			seconds = 0;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <extiCallback+0x150>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
			rtcSetTime();
 80010ea:	f000 f889 	bl	8001200 <rtcSetTime>
}
 80010ee:	e026      	b.n	800113e <extiCallback+0x13a>
		} else if (mode == MODE_SETTINGS_H) {
 80010f0:	4b16      	ldr	r3, [pc, #88]	; (800114c <extiCallback+0x148>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d103      	bne.n	8001102 <extiCallback+0xfe>
			mode = MODE_SETTINGS_M;
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <extiCallback+0x148>)
 80010fc:	2202      	movs	r2, #2
 80010fe:	701a      	strb	r2, [r3, #0]
}
 8001100:	e01d      	b.n	800113e <extiCallback+0x13a>
		} else if (mode == MODE_SETTINGS_M) {
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <extiCallback+0x148>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	b2db      	uxtb	r3, r3
 8001108:	2b02      	cmp	r3, #2
 800110a:	d103      	bne.n	8001114 <extiCallback+0x110>
			mode = MODE_SETTINGS_S;
 800110c:	4b0f      	ldr	r3, [pc, #60]	; (800114c <extiCallback+0x148>)
 800110e:	2203      	movs	r2, #3
 8001110:	701a      	strb	r2, [r3, #0]
}
 8001112:	e014      	b.n	800113e <extiCallback+0x13a>
		} else if (mode == MODE_SETTINGS_S) {
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <extiCallback+0x148>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2b03      	cmp	r3, #3
 800111c:	d107      	bne.n	800112e <extiCallback+0x12a>
			rtcSetTime();
 800111e:	f000 f86f 	bl	8001200 <rtcSetTime>
			displayTurnOff();
 8001122:	f7ff fca3 	bl	8000a6c <displayTurnOff>
			mode = MODE_NORMAL;
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <extiCallback+0x148>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
}
 800112c:	e007      	b.n	800113e <extiCallback+0x13a>
		} else if(mode == MODE_NORMAL){
 800112e:	4b07      	ldr	r3, [pc, #28]	; (800114c <extiCallback+0x148>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <extiCallback+0x13a>
			mode = MODE_FORCE;
 8001138:	4b04      	ldr	r3, [pc, #16]	; (800114c <extiCallback+0x148>)
 800113a:	2205      	movs	r2, #5
 800113c:	701a      	strb	r2, [r3, #0]
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	2000003c 	.word	0x2000003c
 800114c:	2000003d 	.word	0x2000003d
 8001150:	20000074 	.word	0x20000074
 8001154:	20000070 	.word	0x20000070
 8001158:	20000072 	.word	0x20000072

0800115c <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	0002      	movs	r2, r0
 8001164:	1dbb      	adds	r3, r7, #6
 8001166:	801a      	strh	r2, [r3, #0]

	extiCallback(GPIO_Pin);
 8001168:	1dbb      	adds	r3, r7, #6
 800116a:	881b      	ldrh	r3, [r3, #0]
 800116c:	0018      	movs	r0, r3
 800116e:	f7ff ff49 	bl	8001004 <extiCallback>

}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	0002      	movs	r2, r0
 8001182:	1dbb      	adds	r3, r7, #6
 8001184:	801a      	strh	r2, [r3, #0]

	extiCallback(GPIO_Pin);
 8001186:	1dbb      	adds	r3, r7, #6
 8001188:	881b      	ldrh	r3, [r3, #0]
 800118a:	0018      	movs	r0, r3
 800118c:	f7ff ff3a 	bl	8001004 <extiCallback>

}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}

08001198 <rtcGetTime>:
 */

#include "rtc.h"


void rtcGetTime() {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800119c:	4912      	ldr	r1, [pc, #72]	; (80011e8 <rtcGetTime+0x50>)
 800119e:	4b13      	ldr	r3, [pc, #76]	; (80011ec <rtcGetTime+0x54>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	0018      	movs	r0, r3
 80011a4:	f001 fb5a 	bl	800285c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80011a8:	4911      	ldr	r1, [pc, #68]	; (80011f0 <rtcGetTime+0x58>)
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <rtcGetTime+0x54>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	0018      	movs	r0, r3
 80011b0:	f001 fc42 	bl	8002a38 <HAL_RTC_GetDate>



	if(sTime.Hours == 12){
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <rtcGetTime+0x50>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b0c      	cmp	r3, #12
 80011ba:	d103      	bne.n	80011c4 <rtcGetTime+0x2c>
		hours = 0;
 80011bc:	4b0d      	ldr	r3, [pc, #52]	; (80011f4 <rtcGetTime+0x5c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
 80011c2:	e004      	b.n	80011ce <rtcGetTime+0x36>
	}else{
		hours = sTime.Hours;
 80011c4:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <rtcGetTime+0x50>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b25a      	sxtb	r2, r3
 80011ca:	4b0a      	ldr	r3, [pc, #40]	; (80011f4 <rtcGetTime+0x5c>)
 80011cc:	701a      	strb	r2, [r3, #0]
	}
	minutes = sTime.Minutes;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <rtcGetTime+0x50>)
 80011d0:	785b      	ldrb	r3, [r3, #1]
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <rtcGetTime+0x60>)
 80011d6:	801a      	strh	r2, [r3, #0]
	seconds = sTime.Seconds;
 80011d8:	4b03      	ldr	r3, [pc, #12]	; (80011e8 <rtcGetTime+0x50>)
 80011da:	789b      	ldrb	r3, [r3, #2]
 80011dc:	b25a      	sxtb	r2, r3
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <rtcGetTime+0x64>)
 80011e0:	701a      	strb	r2, [r3, #0]

}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000028 	.word	0x20000028
 80011ec:	20000044 	.word	0x20000044
 80011f0:	20000040 	.word	0x20000040
 80011f4:	20000074 	.word	0x20000074
 80011f8:	20000072 	.word	0x20000072
 80011fc:	20000070 	.word	0x20000070

08001200 <rtcSetTime>:

void rtcSetTime() {
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

	sTime.Hours = hours;
 8001204:	4b10      	ldr	r3, [pc, #64]	; (8001248 <rtcSetTime+0x48>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	b25b      	sxtb	r3, r3
 800120a:	b2da      	uxtb	r2, r3
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <rtcSetTime+0x4c>)
 800120e:	701a      	strb	r2, [r3, #0]
	sTime.Minutes = minutes;
 8001210:	4b0f      	ldr	r3, [pc, #60]	; (8001250 <rtcSetTime+0x50>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	b21b      	sxth	r3, r3
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b0c      	ldr	r3, [pc, #48]	; (800124c <rtcSetTime+0x4c>)
 800121a:	705a      	strb	r2, [r3, #1]
	sTime.Seconds = seconds;
 800121c:	4b0d      	ldr	r3, [pc, #52]	; (8001254 <rtcSetTime+0x54>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	b25b      	sxtb	r3, r3
 8001222:	b2da      	uxtb	r2, r3
 8001224:	4b09      	ldr	r3, [pc, #36]	; (800124c <rtcSetTime+0x4c>)
 8001226:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001228:	4908      	ldr	r1, [pc, #32]	; (800124c <rtcSetTime+0x4c>)
 800122a:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <rtcSetTime+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	0018      	movs	r0, r3
 8001230:	f001 fa6c 	bl	800270c <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001234:	4909      	ldr	r1, [pc, #36]	; (800125c <rtcSetTime+0x5c>)
 8001236:	4b08      	ldr	r3, [pc, #32]	; (8001258 <rtcSetTime+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	0018      	movs	r0, r3
 800123c:	f001 fb6a 	bl	8002914 <HAL_RTC_SetDate>

//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR0);

}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	20000074 	.word	0x20000074
 800124c:	20000028 	.word	0x20000028
 8001250:	20000072 	.word	0x20000072
 8001254:	20000070 	.word	0x20000070
 8001258:	20000044 	.word	0x20000044
 800125c:	20000040 	.word	0x20000040

08001260 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_Init+0x3c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_Init+0x3c>)
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	0049      	lsls	r1, r1, #1
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800127a:	2000      	movs	r0, #0
 800127c:	f000 f810 	bl	80012a0 <HAL_InitTick>
 8001280:	1e03      	subs	r3, r0, #0
 8001282:	d003      	beq.n	800128c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
 800128a:	e001      	b.n	8001290 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 800128c:	f7ff fa9a 	bl	80007c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	781b      	ldrb	r3, [r3, #0]
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40022000 	.word	0x40022000

080012a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012a8:	230f      	movs	r3, #15
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_InitTick+0x88>)
 80012b2:	781b      	ldrb	r3, [r3, #0]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d02b      	beq.n	8001310 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_InitTick+0x8c>)
 80012ba:	681c      	ldr	r4, [r3, #0]
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_InitTick+0x88>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	0019      	movs	r1, r3
 80012c2:	23fa      	movs	r3, #250	; 0xfa
 80012c4:	0098      	lsls	r0, r3, #2
 80012c6:	f7fe ff1b 	bl	8000100 <__udivsi3>
 80012ca:	0003      	movs	r3, r0
 80012cc:	0019      	movs	r1, r3
 80012ce:	0020      	movs	r0, r4
 80012d0:	f7fe ff16 	bl	8000100 <__udivsi3>
 80012d4:	0003      	movs	r3, r0
 80012d6:	0018      	movs	r0, r3
 80012d8:	f000 f951 	bl	800157e <HAL_SYSTICK_Config>
 80012dc:	1e03      	subs	r3, r0, #0
 80012de:	d112      	bne.n	8001306 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d80a      	bhi.n	80012fc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	2301      	movs	r3, #1
 80012ea:	425b      	negs	r3, r3
 80012ec:	2200      	movs	r2, #0
 80012ee:	0018      	movs	r0, r3
 80012f0:	f000 f920 	bl	8001534 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f4:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_InitTick+0x90>)
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	e00d      	b.n	8001318 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012fc:	230f      	movs	r3, #15
 80012fe:	18fb      	adds	r3, r7, r3
 8001300:	2201      	movs	r2, #1
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	e008      	b.n	8001318 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001306:	230f      	movs	r3, #15
 8001308:	18fb      	adds	r3, r7, r3
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e003      	b.n	8001318 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001310:	230f      	movs	r3, #15
 8001312:	18fb      	adds	r3, r7, r3
 8001314:	2201      	movs	r2, #1
 8001316:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001318:	230f      	movs	r3, #15
 800131a:	18fb      	adds	r3, r7, r3
 800131c:	781b      	ldrb	r3, [r3, #0]
}
 800131e:	0018      	movs	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	b005      	add	sp, #20
 8001324:	bd90      	pop	{r4, r7, pc}
 8001326:	46c0      	nop			; (mov r8, r8)
 8001328:	20000008 	.word	0x20000008
 800132c:	20000000 	.word	0x20000000
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_IncTick+0x1c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	001a      	movs	r2, r3
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_IncTick+0x20>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	18d2      	adds	r2, r2, r3
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_IncTick+0x20>)
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	20000008 	.word	0x20000008
 8001354:	20000078 	.word	0x20000078

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <HAL_GetTick+0x10>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	20000078 	.word	0x20000078

0800136c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001374:	f7ff fff0 	bl	8001358 <HAL_GetTick>
 8001378:	0003      	movs	r3, r0
 800137a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3301      	adds	r3, #1
 8001384:	d005      	beq.n	8001392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <HAL_Delay+0x40>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	001a      	movs	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	189b      	adds	r3, r3, r2
 8001390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	f7ff ffe0 	bl	8001358 <HAL_GetTick>
 8001398:	0002      	movs	r2, r0
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	429a      	cmp	r2, r3
 80013a2:	d8f7      	bhi.n	8001394 <HAL_Delay+0x28>
  {
  }
}
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b004      	add	sp, #16
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20000008 	.word	0x20000008

080013b0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a06      	ldr	r2, [pc, #24]	; (80013d8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80013be:	4013      	ands	r3, r2
 80013c0:	0019      	movs	r1, r3
 80013c2:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b002      	add	sp, #8
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	40010000 	.word	0x40010000
 80013d8:	fffff9ff 	.word	0xfffff9ff

080013dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	0002      	movs	r2, r0
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	1dfb      	adds	r3, r7, #7
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b7f      	cmp	r3, #127	; 0x7f
 80013ee:	d809      	bhi.n	8001404 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	001a      	movs	r2, r3
 80013f6:	231f      	movs	r3, #31
 80013f8:	401a      	ands	r2, r3
 80013fa:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_EnableIRQ+0x30>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	4091      	lsls	r1, r2
 8001400:	000a      	movs	r2, r1
 8001402:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b002      	add	sp, #8
 800140a:	bd80      	pop	{r7, pc}
 800140c:	e000e100 	.word	0xe000e100

08001410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	0002      	movs	r2, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	1dfb      	adds	r3, r7, #7
 800141c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	2b7f      	cmp	r3, #127	; 0x7f
 8001424:	d828      	bhi.n	8001478 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001426:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <__NVIC_SetPriority+0xd4>)
 8001428:	1dfb      	adds	r3, r7, #7
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b25b      	sxtb	r3, r3
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	33c0      	adds	r3, #192	; 0xc0
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	589b      	ldr	r3, [r3, r2]
 8001436:	1dfa      	adds	r2, r7, #7
 8001438:	7812      	ldrb	r2, [r2, #0]
 800143a:	0011      	movs	r1, r2
 800143c:	2203      	movs	r2, #3
 800143e:	400a      	ands	r2, r1
 8001440:	00d2      	lsls	r2, r2, #3
 8001442:	21ff      	movs	r1, #255	; 0xff
 8001444:	4091      	lsls	r1, r2
 8001446:	000a      	movs	r2, r1
 8001448:	43d2      	mvns	r2, r2
 800144a:	401a      	ands	r2, r3
 800144c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	019b      	lsls	r3, r3, #6
 8001452:	22ff      	movs	r2, #255	; 0xff
 8001454:	401a      	ands	r2, r3
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	0018      	movs	r0, r3
 800145c:	2303      	movs	r3, #3
 800145e:	4003      	ands	r3, r0
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001464:	481f      	ldr	r0, [pc, #124]	; (80014e4 <__NVIC_SetPriority+0xd4>)
 8001466:	1dfb      	adds	r3, r7, #7
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	b25b      	sxtb	r3, r3
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	430a      	orrs	r2, r1
 8001470:	33c0      	adds	r3, #192	; 0xc0
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001476:	e031      	b.n	80014dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001478:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <__NVIC_SetPriority+0xd8>)
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	0019      	movs	r1, r3
 8001480:	230f      	movs	r3, #15
 8001482:	400b      	ands	r3, r1
 8001484:	3b08      	subs	r3, #8
 8001486:	089b      	lsrs	r3, r3, #2
 8001488:	3306      	adds	r3, #6
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	18d3      	adds	r3, r2, r3
 800148e:	3304      	adds	r3, #4
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	1dfa      	adds	r2, r7, #7
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	0011      	movs	r1, r2
 8001498:	2203      	movs	r2, #3
 800149a:	400a      	ands	r2, r1
 800149c:	00d2      	lsls	r2, r2, #3
 800149e:	21ff      	movs	r1, #255	; 0xff
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	401a      	ands	r2, r3
 80014a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	22ff      	movs	r2, #255	; 0xff
 80014b0:	401a      	ands	r2, r3
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	0018      	movs	r0, r3
 80014b8:	2303      	movs	r3, #3
 80014ba:	4003      	ands	r3, r0
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <__NVIC_SetPriority+0xd8>)
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	001c      	movs	r4, r3
 80014c8:	230f      	movs	r3, #15
 80014ca:	4023      	ands	r3, r4
 80014cc:	3b08      	subs	r3, #8
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	430a      	orrs	r2, r1
 80014d2:	3306      	adds	r3, #6
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	18c3      	adds	r3, r0, r3
 80014d8:	3304      	adds	r3, #4
 80014da:	601a      	str	r2, [r3, #0]
}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b003      	add	sp, #12
 80014e2:	bd90      	pop	{r4, r7, pc}
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	3b01      	subs	r3, #1
 80014f8:	4a0c      	ldr	r2, [pc, #48]	; (800152c <SysTick_Config+0x40>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d901      	bls.n	8001502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fe:	2301      	movs	r3, #1
 8001500:	e010      	b.n	8001524 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <SysTick_Config+0x44>)
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	3a01      	subs	r2, #1
 8001508:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800150a:	2301      	movs	r3, #1
 800150c:	425b      	negs	r3, r3
 800150e:	2103      	movs	r1, #3
 8001510:	0018      	movs	r0, r3
 8001512:	f7ff ff7d 	bl	8001410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <SysTick_Config+0x44>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <SysTick_Config+0x44>)
 800151e:	2207      	movs	r2, #7
 8001520:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001522:	2300      	movs	r3, #0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b002      	add	sp, #8
 800152a:	bd80      	pop	{r7, pc}
 800152c:	00ffffff 	.word	0x00ffffff
 8001530:	e000e010 	.word	0xe000e010

08001534 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	210f      	movs	r1, #15
 8001540:	187b      	adds	r3, r7, r1
 8001542:	1c02      	adds	r2, r0, #0
 8001544:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001546:	68ba      	ldr	r2, [r7, #8]
 8001548:	187b      	adds	r3, r7, r1
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	b25b      	sxtb	r3, r3
 800154e:	0011      	movs	r1, r2
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff ff5d 	bl	8001410 <__NVIC_SetPriority>
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b004      	add	sp, #16
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	0002      	movs	r2, r0
 8001566:	1dfb      	adds	r3, r7, #7
 8001568:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800156a:	1dfb      	adds	r3, r7, #7
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	b25b      	sxtb	r3, r3
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff ff33 	bl	80013dc <__NVIC_EnableIRQ>
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b002      	add	sp, #8
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff ffaf 	bl	80014ec <SysTick_Config>
 800158e:	0003      	movs	r3, r0
}
 8001590:	0018      	movs	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	b002      	add	sp, #8
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a6:	e147      	b.n	8001838 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4091      	lsls	r1, r2
 80015b2:	000a      	movs	r2, r1
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d100      	bne.n	80015c0 <HAL_GPIO_Init+0x28>
 80015be:	e138      	b.n	8001832 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d00b      	beq.n	80015e0 <HAL_GPIO_Init+0x48>
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d007      	beq.n	80015e0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015d4:	2b11      	cmp	r3, #17
 80015d6:	d003      	beq.n	80015e0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b12      	cmp	r3, #18
 80015de:	d130      	bne.n	8001642 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	409a      	lsls	r2, r3
 80015ee:	0013      	movs	r3, r2
 80015f0:	43da      	mvns	r2, r3
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68da      	ldr	r2, [r3, #12]
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	409a      	lsls	r2, r3
 8001602:	0013      	movs	r3, r2
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	4313      	orrs	r3, r2
 8001608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001616:	2201      	movs	r2, #1
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	2201      	movs	r2, #1
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	409a      	lsls	r2, r3
 8001634:	0013      	movs	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	409a      	lsls	r2, r3
 8001650:	0013      	movs	r3, r2
 8001652:	43da      	mvns	r2, r3
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689a      	ldr	r2, [r3, #8]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	409a      	lsls	r2, r3
 8001664:	0013      	movs	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0xea>
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b12      	cmp	r3, #18
 8001680:	d123      	bne.n	80016ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	58d3      	ldr	r3, [r2, r3]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2207      	movs	r2, #7
 8001694:	4013      	ands	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2107      	movs	r1, #7
 80016ae:	400b      	ands	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	6939      	ldr	r1, [r7, #16]
 80016c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	409a      	lsls	r2, r3
 80016d8:	0013      	movs	r3, r2
 80016da:	43da      	mvns	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	401a      	ands	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	055b      	lsls	r3, r3, #21
 8001706:	4013      	ands	r3, r2
 8001708:	d100      	bne.n	800170c <HAL_GPIO_Init+0x174>
 800170a:	e092      	b.n	8001832 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800170c:	4a50      	ldr	r2, [pc, #320]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3318      	adds	r3, #24
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	589b      	ldr	r3, [r3, r2]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2203      	movs	r2, #3
 800171e:	4013      	ands	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	220f      	movs	r2, #15
 8001724:	409a      	lsls	r2, r3
 8001726:	0013      	movs	r3, r2
 8001728:	43da      	mvns	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	23a0      	movs	r3, #160	; 0xa0
 8001734:	05db      	lsls	r3, r3, #23
 8001736:	429a      	cmp	r2, r3
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x1ca>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a45      	ldr	r2, [pc, #276]	; (8001854 <HAL_GPIO_Init+0x2bc>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x1c6>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a44      	ldr	r2, [pc, #272]	; (8001858 <HAL_GPIO_Init+0x2c0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x1c2>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a43      	ldr	r2, [pc, #268]	; (800185c <HAL_GPIO_Init+0x2c4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x1be>
 8001752:	2303      	movs	r3, #3
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x1cc>
 8001756:	2305      	movs	r3, #5
 8001758:	e004      	b.n	8001764 <HAL_GPIO_Init+0x1cc>
 800175a:	2302      	movs	r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x1cc>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_GPIO_Init+0x1cc>
 8001762:	2300      	movs	r3, #0
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	2103      	movs	r1, #3
 8001768:	400a      	ands	r2, r1
 800176a:	00d2      	lsls	r2, r2, #3
 800176c:	4093      	lsls	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001774:	4936      	ldr	r1, [pc, #216]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3318      	adds	r3, #24
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001782:	4a33      	ldr	r2, [pc, #204]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	58d3      	ldr	r3, [r2, r3]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	43da      	mvns	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	025b      	lsls	r3, r3, #9
 800179c:	4013      	ands	r3, r2
 800179e:	d003      	beq.n	80017a8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80017a0:	693a      	ldr	r2, [r7, #16]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80017a8:	4929      	ldr	r1, [pc, #164]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 80017aa:	2280      	movs	r2, #128	; 0x80
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80017b0:	4a27      	ldr	r2, [pc, #156]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 80017b2:	2384      	movs	r3, #132	; 0x84
 80017b4:	58d3      	ldr	r3, [r2, r3]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	43da      	mvns	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4013      	ands	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	2380      	movs	r3, #128	; 0x80
 80017c8:	029b      	lsls	r3, r3, #10
 80017ca:	4013      	ands	r3, r2
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017d6:	491e      	ldr	r1, [pc, #120]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 80017d8:	2284      	movs	r2, #132	; 0x84
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017de:	4b1c      	ldr	r3, [pc, #112]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	035b      	lsls	r3, r3, #13
 80017f6:	4013      	ands	r3, r2
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001802:	4b13      	ldr	r3, [pc, #76]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43da      	mvns	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	039b      	lsls	r3, r3, #14
 8001820:	4013      	ands	r3, r2
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	40da      	lsrs	r2, r3
 8001840:	1e13      	subs	r3, r2, #0
 8001842:	d000      	beq.n	8001846 <HAL_GPIO_Init+0x2ae>
 8001844:	e6b0      	b.n	80015a8 <HAL_GPIO_Init+0x10>
  }
}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46bd      	mov	sp, r7
 800184a:	b006      	add	sp, #24
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	40021800 	.word	0x40021800
 8001854:	50000400 	.word	0x50000400
 8001858:	50000800 	.word	0x50000800
 800185c:	50000c00 	.word	0x50000c00

08001860 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	000a      	movs	r2, r1
 800186a:	1cbb      	adds	r3, r7, #2
 800186c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	1cba      	adds	r2, r7, #2
 8001874:	8812      	ldrh	r2, [r2, #0]
 8001876:	4013      	ands	r3, r2
 8001878:	d004      	beq.n	8001884 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800187a:	230f      	movs	r3, #15
 800187c:	18fb      	adds	r3, r7, r3
 800187e:	2201      	movs	r2, #1
 8001880:	701a      	strb	r2, [r3, #0]
 8001882:	e003      	b.n	800188c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001884:	230f      	movs	r3, #15
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800188c:	230f      	movs	r3, #15
 800188e:	18fb      	adds	r3, r7, r3
 8001890:	781b      	ldrb	r3, [r3, #0]
}
 8001892:	0018      	movs	r0, r3
 8001894:	46bd      	mov	sp, r7
 8001896:	b004      	add	sp, #16
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b082      	sub	sp, #8
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	0008      	movs	r0, r1
 80018a4:	0011      	movs	r1, r2
 80018a6:	1cbb      	adds	r3, r7, #2
 80018a8:	1c02      	adds	r2, r0, #0
 80018aa:	801a      	strh	r2, [r3, #0]
 80018ac:	1c7b      	adds	r3, r7, #1
 80018ae:	1c0a      	adds	r2, r1, #0
 80018b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018b2:	1c7b      	adds	r3, r7, #1
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d004      	beq.n	80018c4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ba:	1cbb      	adds	r3, r7, #2
 80018bc:	881a      	ldrh	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018c2:	e003      	b.n	80018cc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018c4:	1cbb      	adds	r3, r7, #2
 80018c6:	881a      	ldrh	r2, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b002      	add	sp, #8
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	0002      	movs	r2, r0
 80018dc:	1dbb      	adds	r3, r7, #6
 80018de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	1dba      	adds	r2, r7, #6
 80018e6:	8812      	ldrh	r2, [r2, #0]
 80018e8:	4013      	ands	r3, r2
 80018ea:	d008      	beq.n	80018fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80018ee:	1dba      	adds	r2, r7, #6
 80018f0:	8812      	ldrh	r2, [r2, #0]
 80018f2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80018f4:	1dbb      	adds	r3, r7, #6
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff fc2f 	bl	800115c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	1dba      	adds	r2, r7, #6
 8001904:	8812      	ldrh	r2, [r2, #0]
 8001906:	4013      	ands	r3, r2
 8001908:	d008      	beq.n	800191c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800190c:	1dba      	adds	r2, r7, #6
 800190e:	8812      	ldrh	r2, [r2, #0]
 8001910:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001912:	1dbb      	adds	r3, r7, #6
 8001914:	881b      	ldrh	r3, [r3, #0]
 8001916:	0018      	movs	r0, r3
 8001918:	f7ff fc2f 	bl	800117a <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b002      	add	sp, #8
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021800 	.word	0x40021800

08001928 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <HAL_PWR_EnableBkUpAccess+0x18>)
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	0049      	lsls	r1, r1, #1
 8001936:	430a      	orrs	r2, r1
 8001938:	601a      	str	r2, [r3, #0]
}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40007000 	.word	0x40007000

08001944 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	000a      	movs	r2, r1
 800194e:	1cfb      	adds	r3, r7, #3
 8001950:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d009      	beq.n	800196c <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <HAL_PWR_EnterSTOPMode+0x68>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2207      	movs	r2, #7
 800195e:	4393      	bics	r3, r2
 8001960:	001a      	movs	r2, r3
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <HAL_PWR_EnterSTOPMode+0x68>)
 8001964:	2101      	movs	r1, #1
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	e005      	b.n	8001978 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <HAL_PWR_EnterSTOPMode+0x68>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_PWR_EnterSTOPMode+0x68>)
 8001972:	2107      	movs	r1, #7
 8001974:	438a      	bics	r2, r1
 8001976:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001978:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_PWR_EnterSTOPMode+0x6c>)
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_PWR_EnterSTOPMode+0x6c>)
 800197e:	2104      	movs	r1, #4
 8001980:	430a      	orrs	r2, r1
 8001982:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001984:	1cfb      	adds	r3, r7, #3
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d101      	bne.n	8001990 <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800198c:	bf30      	wfi
 800198e:	e002      	b.n	8001996 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8001990:	bf40      	sev
    __WFE();
 8001992:	bf20      	wfe
    __WFE();
 8001994:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_PWR_EnterSTOPMode+0x6c>)
 8001998:	691a      	ldr	r2, [r3, #16]
 800199a:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <HAL_PWR_EnterSTOPMode+0x6c>)
 800199c:	2104      	movs	r1, #4
 800199e:	438a      	bics	r2, r1
 80019a0:	611a      	str	r2, [r3, #16]
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b002      	add	sp, #8
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	46c0      	nop			; (mov r8, r8)
 80019ac:	40007000 	.word	0x40007000
 80019b0:	e000ed00 	.word	0xe000ed00

080019b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d11f      	bne.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	0013      	movs	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	189b      	adds	r3, r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4912      	ldr	r1, [pc, #72]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7fe fb8a 	bl	8000100 <__udivsi3>
 80019ec:	0003      	movs	r3, r0
 80019ee:	3301      	adds	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019f2:	e008      	b.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e001      	b.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e009      	b.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	401a      	ands	r2, r3
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d0ed      	beq.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b004      	add	sp, #16
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	40007000 	.word	0x40007000
 8001a28:	fffff9ff 	.word	0xfffff9ff
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	000f4240 	.word	0x000f4240

08001a34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e2f9      	b.n	800203a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d100      	bne.n	8001a52 <HAL_RCC_OscConfig+0x1e>
 8001a50:	e07c      	b.n	8001b4c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a52:	4bc3      	ldr	r3, [pc, #780]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2238      	movs	r2, #56	; 0x38
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a5c:	4bc0      	ldr	r3, [pc, #768]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2203      	movs	r2, #3
 8001a62:	4013      	ands	r3, r2
 8001a64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	2b10      	cmp	r3, #16
 8001a6a:	d102      	bne.n	8001a72 <HAL_RCC_OscConfig+0x3e>
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_OscConfig+0x44>
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	2b08      	cmp	r3, #8
 8001a76:	d10b      	bne.n	8001a90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	4bb9      	ldr	r3, [pc, #740]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	; 0x80
 8001a7e:	029b      	lsls	r3, r3, #10
 8001a80:	4013      	ands	r3, r2
 8001a82:	d062      	beq.n	8001b4a <HAL_RCC_OscConfig+0x116>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d15e      	bne.n	8001b4a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e2d4      	b.n	800203a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	025b      	lsls	r3, r3, #9
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_OscConfig+0x78>
 8001a9c:	4bb0      	ldr	r3, [pc, #704]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4baf      	ldr	r3, [pc, #700]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001aa2:	2180      	movs	r1, #128	; 0x80
 8001aa4:	0249      	lsls	r1, r1, #9
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	e020      	b.n	8001aee <HAL_RCC_OscConfig+0xba>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	23a0      	movs	r3, #160	; 0xa0
 8001ab2:	02db      	lsls	r3, r3, #11
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d10e      	bne.n	8001ad6 <HAL_RCC_OscConfig+0xa2>
 8001ab8:	4ba9      	ldr	r3, [pc, #676]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4ba8      	ldr	r3, [pc, #672]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001abe:	2180      	movs	r1, #128	; 0x80
 8001ac0:	02c9      	lsls	r1, r1, #11
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	4ba6      	ldr	r3, [pc, #664]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4ba5      	ldr	r3, [pc, #660]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001acc:	2180      	movs	r1, #128	; 0x80
 8001ace:	0249      	lsls	r1, r1, #9
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e00b      	b.n	8001aee <HAL_RCC_OscConfig+0xba>
 8001ad6:	4ba2      	ldr	r3, [pc, #648]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	4ba1      	ldr	r3, [pc, #644]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001adc:	49a1      	ldr	r1, [pc, #644]	; (8001d64 <HAL_RCC_OscConfig+0x330>)
 8001ade:	400a      	ands	r2, r1
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	4b9f      	ldr	r3, [pc, #636]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	4b9e      	ldr	r3, [pc, #632]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ae8:	499f      	ldr	r1, [pc, #636]	; (8001d68 <HAL_RCC_OscConfig+0x334>)
 8001aea:	400a      	ands	r2, r1
 8001aec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d014      	beq.n	8001b20 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af6:	f7ff fc2f 	bl	8001358 <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b00:	f7ff fc2a 	bl	8001358 <HAL_GetTick>
 8001b04:	0002      	movs	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b64      	cmp	r3, #100	; 0x64
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e293      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b12:	4b93      	ldr	r3, [pc, #588]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	029b      	lsls	r3, r3, #10
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0xcc>
 8001b1e:	e015      	b.n	8001b4c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc1a 	bl	8001358 <HAL_GetTick>
 8001b24:	0003      	movs	r3, r0
 8001b26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b2a:	f7ff fc15 	bl	8001358 <HAL_GetTick>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b64      	cmp	r3, #100	; 0x64
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e27e      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b3c:	4b88      	ldr	r3, [pc, #544]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	029b      	lsls	r3, r3, #10
 8001b44:	4013      	ands	r3, r2
 8001b46:	d1f0      	bne.n	8001b2a <HAL_RCC_OscConfig+0xf6>
 8001b48:	e000      	b.n	8001b4c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2202      	movs	r2, #2
 8001b52:	4013      	ands	r3, r2
 8001b54:	d100      	bne.n	8001b58 <HAL_RCC_OscConfig+0x124>
 8001b56:	e099      	b.n	8001c8c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b58:	4b81      	ldr	r3, [pc, #516]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2238      	movs	r2, #56	; 0x38
 8001b5e:	4013      	ands	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b62:	4b7f      	ldr	r3, [pc, #508]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2203      	movs	r2, #3
 8001b68:	4013      	ands	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	2b10      	cmp	r3, #16
 8001b70:	d102      	bne.n	8001b78 <HAL_RCC_OscConfig+0x144>
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2b02      	cmp	r3, #2
 8001b76:	d002      	beq.n	8001b7e <HAL_RCC_OscConfig+0x14a>
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d135      	bne.n	8001bea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b7e:	4b78      	ldr	r3, [pc, #480]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	00db      	lsls	r3, r3, #3
 8001b86:	4013      	ands	r3, r2
 8001b88:	d005      	beq.n	8001b96 <HAL_RCC_OscConfig+0x162>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e251      	b.n	800203a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b96:	4b72      	ldr	r3, [pc, #456]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	4a74      	ldr	r2, [pc, #464]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	021a      	lsls	r2, r3, #8
 8001ba6:	4b6e      	ldr	r3, [pc, #440]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d112      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bb2:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a6e      	ldr	r2, [pc, #440]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	4b67      	ldr	r3, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001bc6:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	0adb      	lsrs	r3, r3, #11
 8001bcc:	2207      	movs	r2, #7
 8001bce:	4013      	ands	r3, r2
 8001bd0:	4a68      	ldr	r2, [pc, #416]	; (8001d74 <HAL_RCC_OscConfig+0x340>)
 8001bd2:	40da      	lsrs	r2, r3
 8001bd4:	4b68      	ldr	r3, [pc, #416]	; (8001d78 <HAL_RCC_OscConfig+0x344>)
 8001bd6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bd8:	4b68      	ldr	r3, [pc, #416]	; (8001d7c <HAL_RCC_OscConfig+0x348>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7ff fb5f 	bl	80012a0 <HAL_InitTick>
 8001be2:	1e03      	subs	r3, r0, #0
 8001be4:	d051      	beq.n	8001c8a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e227      	b.n	800203a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d030      	beq.n	8001c54 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bf2:	4b5b      	ldr	r3, [pc, #364]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5e      	ldr	r2, [pc, #376]	; (8001d70 <HAL_RCC_OscConfig+0x33c>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	4b57      	ldr	r3, [pc, #348]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c02:	430a      	orrs	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001c06:	4b56      	ldr	r3, [pc, #344]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b55      	ldr	r3, [pc, #340]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c0c:	2180      	movs	r1, #128	; 0x80
 8001c0e:	0049      	lsls	r1, r1, #1
 8001c10:	430a      	orrs	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fba0 	bl	8001358 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff fb9b 	bl	8001358 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e204      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c30:	4b4b      	ldr	r3, [pc, #300]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	; 0x80
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b48      	ldr	r3, [pc, #288]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4a4a      	ldr	r2, [pc, #296]	; (8001d6c <HAL_RCC_OscConfig+0x338>)
 8001c42:	4013      	ands	r3, r2
 8001c44:	0019      	movs	r1, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695b      	ldr	r3, [r3, #20]
 8001c4a:	021a      	lsls	r2, r3, #8
 8001c4c:	4b44      	ldr	r3, [pc, #272]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	e01b      	b.n	8001c8c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c54:	4b42      	ldr	r3, [pc, #264]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	4949      	ldr	r1, [pc, #292]	; (8001d80 <HAL_RCC_OscConfig+0x34c>)
 8001c5c:	400a      	ands	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff fb7a 	bl	8001358 <HAL_GetTick>
 8001c64:	0003      	movs	r3, r0
 8001c66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c6a:	f7ff fb75 	bl	8001358 <HAL_GetTick>
 8001c6e:	0002      	movs	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e1de      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c7c:	4b38      	ldr	r3, [pc, #224]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4013      	ands	r3, r2
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x236>
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2208      	movs	r2, #8
 8001c92:	4013      	ands	r3, r2
 8001c94:	d047      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c96:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2238      	movs	r2, #56	; 0x38
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	2b18      	cmp	r3, #24
 8001ca0:	d10a      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ca2:	4b2f      	ldr	r3, [pc, #188]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca6:	2202      	movs	r2, #2
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d03c      	beq.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d138      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e1c0      	b.n	800203a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d019      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001cc0:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cc4:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fb44 	bl	8001358 <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff fb3f 	bl	8001358 <HAL_GetTick>
 8001cda:	0002      	movs	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e1a8      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce8:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cec:	2202      	movs	r2, #2
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d0f1      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x2a2>
 8001cf2:	e018      	b.n	8001d26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	438a      	bics	r2, r1
 8001cfe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d00:	f7ff fb2a 	bl	8001358 <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fb25 	bl	8001358 <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e18e      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d1c:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d20:	2202      	movs	r2, #2
 8001d22:	4013      	ands	r3, r2
 8001d24:	d1f1      	bne.n	8001d0a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2204      	movs	r2, #4
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d100      	bne.n	8001d32 <HAL_RCC_OscConfig+0x2fe>
 8001d30:	e0c6      	b.n	8001ec0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d32:	231f      	movs	r3, #31
 8001d34:	18fb      	adds	r3, r7, r3
 8001d36:	2200      	movs	r2, #0
 8001d38:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2238      	movs	r2, #56	; 0x38
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b20      	cmp	r3, #32
 8001d44:	d11e      	bne.n	8001d84 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_RCC_OscConfig+0x32c>)
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	d100      	bne.n	8001d52 <HAL_RCC_OscConfig+0x31e>
 8001d50:	e0b6      	b.n	8001ec0 <HAL_RCC_OscConfig+0x48c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d000      	beq.n	8001d5c <HAL_RCC_OscConfig+0x328>
 8001d5a:	e0b1      	b.n	8001ec0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e16c      	b.n	800203a <HAL_RCC_OscConfig+0x606>
 8001d60:	40021000 	.word	0x40021000
 8001d64:	fffeffff 	.word	0xfffeffff
 8001d68:	fffbffff 	.word	0xfffbffff
 8001d6c:	ffff80ff 	.word	0xffff80ff
 8001d70:	ffffc7ff 	.word	0xffffc7ff
 8001d74:	00f42400 	.word	0x00f42400
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004
 8001d80:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d84:	4baf      	ldr	r3, [pc, #700]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	055b      	lsls	r3, r3, #21
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_OscConfig+0x360>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <HAL_RCC_OscConfig+0x362>
 8001d94:	2300      	movs	r3, #0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d011      	beq.n	8001dbe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d9a:	4baa      	ldr	r3, [pc, #680]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001d9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001d9e:	4ba9      	ldr	r3, [pc, #676]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001da0:	2180      	movs	r1, #128	; 0x80
 8001da2:	0549      	lsls	r1, r1, #21
 8001da4:	430a      	orrs	r2, r1
 8001da6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001da8:	4ba6      	ldr	r3, [pc, #664]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001daa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	055b      	lsls	r3, r3, #21
 8001db0:	4013      	ands	r3, r2
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001db6:	231f      	movs	r3, #31
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbe:	4ba2      	ldr	r3, [pc, #648]	; (8002048 <HAL_RCC_OscConfig+0x614>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d11a      	bne.n	8001e00 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dca:	4b9f      	ldr	r3, [pc, #636]	; (8002048 <HAL_RCC_OscConfig+0x614>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	4b9e      	ldr	r3, [pc, #632]	; (8002048 <HAL_RCC_OscConfig+0x614>)
 8001dd0:	2180      	movs	r1, #128	; 0x80
 8001dd2:	0049      	lsls	r1, r1, #1
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff fabe 	bl	8001358 <HAL_GetTick>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de2:	f7ff fab9 	bl	8001358 <HAL_GetTick>
 8001de6:	0002      	movs	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e122      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df4:	4b94      	ldr	r3, [pc, #592]	; (8002048 <HAL_RCC_OscConfig+0x614>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d106      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3e2>
 8001e08:	4b8e      	ldr	r3, [pc, #568]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001e0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e0c:	4b8d      	ldr	r3, [pc, #564]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001e0e:	2101      	movs	r1, #1
 8001e10:	430a      	orrs	r2, r1
 8001e12:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e14:	e01c      	b.n	8001e50 <HAL_RCC_OscConfig+0x41c>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b05      	cmp	r3, #5
 8001e1c:	d10c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x404>
 8001e1e:	4b89      	ldr	r3, [pc, #548]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001e20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e22:	4b88      	ldr	r3, [pc, #544]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001e24:	2104      	movs	r1, #4
 8001e26:	430a      	orrs	r2, r1
 8001e28:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e2a:	4b86      	ldr	r3, [pc, #536]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001e2c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e2e:	4b85      	ldr	r3, [pc, #532]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001e30:	2101      	movs	r1, #1
 8001e32:	430a      	orrs	r2, r1
 8001e34:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e36:	e00b      	b.n	8001e50 <HAL_RCC_OscConfig+0x41c>
 8001e38:	4b82      	ldr	r3, [pc, #520]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001e3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e3c:	4b81      	ldr	r3, [pc, #516]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001e3e:	2101      	movs	r1, #1
 8001e40:	438a      	bics	r2, r1
 8001e42:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e44:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001e46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e48:	4b7e      	ldr	r3, [pc, #504]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001e4a:	2104      	movs	r1, #4
 8001e4c:	438a      	bics	r2, r1
 8001e4e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d014      	beq.n	8001e82 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7ff fa7e 	bl	8001358 <HAL_GetTick>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e60:	e009      	b.n	8001e76 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7ff fa79 	bl	8001358 <HAL_GetTick>
 8001e66:	0002      	movs	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	4a77      	ldr	r2, [pc, #476]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e0e1      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e76:	4b73      	ldr	r3, [pc, #460]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x42e>
 8001e80:	e013      	b.n	8001eaa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e82:	f7ff fa69 	bl	8001358 <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e8a:	e009      	b.n	8001ea0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8c:	f7ff fa64 	bl	8001358 <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	4a6d      	ldr	r2, [pc, #436]	; (800204c <HAL_RCC_OscConfig+0x618>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e0cc      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea0:	4b68      	ldr	r3, [pc, #416]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	2202      	movs	r2, #2
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001eaa:	231f      	movs	r3, #31
 8001eac:	18fb      	adds	r3, r7, r3
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b63      	ldr	r3, [pc, #396]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001eb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eb8:	4b62      	ldr	r3, [pc, #392]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001eba:	4965      	ldr	r1, [pc, #404]	; (8002050 <HAL_RCC_OscConfig+0x61c>)
 8001ebc:	400a      	ands	r2, r1
 8001ebe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69db      	ldr	r3, [r3, #28]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d100      	bne.n	8001eca <HAL_RCC_OscConfig+0x496>
 8001ec8:	e0b6      	b.n	8002038 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001eca:	4b5e      	ldr	r3, [pc, #376]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2238      	movs	r2, #56	; 0x38
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2b10      	cmp	r3, #16
 8001ed4:	d100      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4a4>
 8001ed6:	e07e      	b.n	8001fd6 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d153      	bne.n	8001f88 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee0:	4b58      	ldr	r3, [pc, #352]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b57      	ldr	r3, [pc, #348]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001ee6:	495b      	ldr	r1, [pc, #364]	; (8002054 <HAL_RCC_OscConfig+0x620>)
 8001ee8:	400a      	ands	r2, r1
 8001eea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7ff fa34 	bl	8001358 <HAL_GetTick>
 8001ef0:	0003      	movs	r3, r0
 8001ef2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef6:	f7ff fa2f 	bl	8001358 <HAL_GetTick>
 8001efa:	0002      	movs	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e098      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f08:	4b4e      	ldr	r3, [pc, #312]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	049b      	lsls	r3, r3, #18
 8001f10:	4013      	ands	r3, r2
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f14:	4b4b      	ldr	r3, [pc, #300]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a4f      	ldr	r2, [pc, #316]	; (8002058 <HAL_RCC_OscConfig+0x624>)
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	0019      	movs	r1, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1a      	ldr	r2, [r3, #32]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	431a      	orrs	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	021b      	lsls	r3, r3, #8
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	4b41      	ldr	r3, [pc, #260]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f42:	4b40      	ldr	r3, [pc, #256]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4b3f      	ldr	r3, [pc, #252]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	0449      	lsls	r1, r1, #17
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f50:	4b3c      	ldr	r3, [pc, #240]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4b3b      	ldr	r3, [pc, #236]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	0549      	lsls	r1, r1, #21
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5e:	f7ff f9fb 	bl	8001358 <HAL_GetTick>
 8001f62:	0003      	movs	r3, r0
 8001f64:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f68:	f7ff f9f6 	bl	8001358 <HAL_GetTick>
 8001f6c:	0002      	movs	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e05f      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7a:	4b32      	ldr	r3, [pc, #200]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	049b      	lsls	r3, r3, #18
 8001f82:	4013      	ands	r3, r2
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0x534>
 8001f86:	e057      	b.n	8002038 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f88:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b2d      	ldr	r3, [pc, #180]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001f8e:	4931      	ldr	r1, [pc, #196]	; (8002054 <HAL_RCC_OscConfig+0x620>)
 8001f90:	400a      	ands	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	4b2a      	ldr	r3, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001f9a:	2103      	movs	r1, #3
 8001f9c:	438a      	bics	r2, r1
 8001f9e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001fa6:	492d      	ldr	r1, [pc, #180]	; (800205c <HAL_RCC_OscConfig+0x628>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7ff f9d4 	bl	8001358 <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb6:	f7ff f9cf 	bl	8001358 <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e038      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	049b      	lsls	r3, r3, #18
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d1f0      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x582>
 8001fd4:	e030      	b.n	8002038 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d101      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e02b      	b.n	800203a <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001fe2:	4b18      	ldr	r3, [pc, #96]	; (8002044 <HAL_RCC_OscConfig+0x610>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2203      	movs	r2, #3
 8001fec:	401a      	ands	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d11e      	bne.n	8002034 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2270      	movs	r2, #112	; 0x70
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002000:	429a      	cmp	r2, r3
 8002002:	d117      	bne.n	8002034 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002004:	697a      	ldr	r2, [r7, #20]
 8002006:	23fe      	movs	r3, #254	; 0xfe
 8002008:	01db      	lsls	r3, r3, #7
 800200a:	401a      	ands	r2, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002010:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d10e      	bne.n	8002034 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	23f8      	movs	r3, #248	; 0xf8
 800201a:	039b      	lsls	r3, r3, #14
 800201c:	401a      	ands	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d106      	bne.n	8002034 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	0f5b      	lsrs	r3, r3, #29
 800202a:	075a      	lsls	r2, r3, #29
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d001      	beq.n	8002038 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	0018      	movs	r0, r3
 800203c:	46bd      	mov	sp, r7
 800203e:	b008      	add	sp, #32
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	40021000 	.word	0x40021000
 8002048:	40007000 	.word	0x40007000
 800204c:	00001388 	.word	0x00001388
 8002050:	efffffff 	.word	0xefffffff
 8002054:	feffffff 	.word	0xfeffffff
 8002058:	1fc1808c 	.word	0x1fc1808c
 800205c:	effeffff 	.word	0xeffeffff

08002060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0e9      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b76      	ldr	r3, [pc, #472]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2207      	movs	r2, #7
 800207a:	4013      	ands	r3, r2
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d91e      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b73      	ldr	r3, [pc, #460]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2207      	movs	r2, #7
 8002088:	4393      	bics	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	4b70      	ldr	r3, [pc, #448]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002094:	f7ff f960 	bl	8001358 <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800209c:	e009      	b.n	80020b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209e:	f7ff f95b 	bl	8001358 <HAL_GetTick>
 80020a2:	0002      	movs	r2, r0
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	4a6a      	ldr	r2, [pc, #424]	; (8002254 <HAL_RCC_ClockConfig+0x1f4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e0ca      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020b2:	4b67      	ldr	r3, [pc, #412]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2207      	movs	r2, #7
 80020b8:	4013      	ands	r3, r2
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d1ee      	bne.n	800209e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d015      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2204      	movs	r2, #4
 80020d0:	4013      	ands	r3, r2
 80020d2:	d006      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020d4:	4b60      	ldr	r3, [pc, #384]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	4b5f      	ldr	r3, [pc, #380]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 80020da:	21e0      	movs	r1, #224	; 0xe0
 80020dc:	01c9      	lsls	r1, r1, #7
 80020de:	430a      	orrs	r2, r1
 80020e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e2:	4b5d      	ldr	r3, [pc, #372]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	4a5d      	ldr	r2, [pc, #372]	; (800225c <HAL_RCC_ClockConfig+0x1fc>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	0019      	movs	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4b59      	ldr	r3, [pc, #356]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 80020f2:	430a      	orrs	r2, r1
 80020f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2201      	movs	r2, #1
 80020fc:	4013      	ands	r3, r2
 80020fe:	d057      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002108:	4b53      	ldr	r3, [pc, #332]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	029b      	lsls	r3, r3, #10
 8002110:	4013      	ands	r3, r2
 8002112:	d12b      	bne.n	800216c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e097      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d107      	bne.n	8002130 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002120:	4b4d      	ldr	r3, [pc, #308]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	049b      	lsls	r3, r3, #18
 8002128:	4013      	ands	r3, r2
 800212a:	d11f      	bne.n	800216c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e08b      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d107      	bne.n	8002148 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002138:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4013      	ands	r3, r2
 8002142:	d113      	bne.n	800216c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e07f      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b03      	cmp	r3, #3
 800214e:	d106      	bne.n	800215e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002150:	4b41      	ldr	r3, [pc, #260]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 8002152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002154:	2202      	movs	r2, #2
 8002156:	4013      	ands	r3, r2
 8002158:	d108      	bne.n	800216c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e074      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215e:	4b3e      	ldr	r3, [pc, #248]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	2202      	movs	r2, #2
 8002164:	4013      	ands	r3, r2
 8002166:	d101      	bne.n	800216c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e06d      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800216c:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2207      	movs	r2, #7
 8002172:	4393      	bics	r3, r2
 8002174:	0019      	movs	r1, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	4b37      	ldr	r3, [pc, #220]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002180:	f7ff f8ea 	bl	8001358 <HAL_GetTick>
 8002184:	0003      	movs	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002188:	e009      	b.n	800219e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800218a:	f7ff f8e5 	bl	8001358 <HAL_GetTick>
 800218e:	0002      	movs	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	4a2f      	ldr	r2, [pc, #188]	; (8002254 <HAL_RCC_ClockConfig+0x1f4>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d901      	bls.n	800219e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e054      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2238      	movs	r2, #56	; 0x38
 80021a4:	401a      	ands	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d1ec      	bne.n	800218a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021b0:	4b27      	ldr	r3, [pc, #156]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2207      	movs	r2, #7
 80021b6:	4013      	ands	r3, r2
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d21e      	bcs.n	80021fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2207      	movs	r2, #7
 80021c4:	4393      	bics	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	4b21      	ldr	r3, [pc, #132]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	430a      	orrs	r2, r1
 80021ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021d0:	f7ff f8c2 	bl	8001358 <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021d8:	e009      	b.n	80021ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021da:	f7ff f8bd 	bl	8001358 <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	4a1b      	ldr	r2, [pc, #108]	; (8002254 <HAL_RCC_ClockConfig+0x1f4>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d901      	bls.n	80021ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e02c      	b.n	8002248 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021ee:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2207      	movs	r2, #7
 80021f4:	4013      	ands	r3, r2
 80021f6:	683a      	ldr	r2, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d1ee      	bne.n	80021da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2204      	movs	r2, #4
 8002202:	4013      	ands	r3, r2
 8002204:	d009      	beq.n	800221a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002206:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	4a15      	ldr	r2, [pc, #84]	; (8002260 <HAL_RCC_ClockConfig+0x200>)
 800220c:	4013      	ands	r3, r2
 800220e:	0019      	movs	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68da      	ldr	r2, [r3, #12]
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 8002216:	430a      	orrs	r2, r1
 8002218:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800221a:	f000 f829 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 800221e:	0001      	movs	r1, r0
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	0a1b      	lsrs	r3, r3, #8
 8002226:	220f      	movs	r2, #15
 8002228:	401a      	ands	r2, r3
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_RCC_ClockConfig+0x204>)
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	58d3      	ldr	r3, [r2, r3]
 8002230:	221f      	movs	r2, #31
 8002232:	4013      	ands	r3, r2
 8002234:	000a      	movs	r2, r1
 8002236:	40da      	lsrs	r2, r3
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <HAL_RCC_ClockConfig+0x208>)
 800223a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <HAL_RCC_ClockConfig+0x20c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	0018      	movs	r0, r3
 8002242:	f7ff f82d 	bl	80012a0 <HAL_InitTick>
 8002246:	0003      	movs	r3, r0
}
 8002248:	0018      	movs	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	b004      	add	sp, #16
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40022000 	.word	0x40022000
 8002254:	00001388 	.word	0x00001388
 8002258:	40021000 	.word	0x40021000
 800225c:	fffff0ff 	.word	0xfffff0ff
 8002260:	ffff8fff 	.word	0xffff8fff
 8002264:	08002eb0 	.word	0x08002eb0
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002276:	4b3c      	ldr	r3, [pc, #240]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2238      	movs	r2, #56	; 0x38
 800227c:	4013      	ands	r3, r2
 800227e:	d10f      	bne.n	80022a0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002280:	4b39      	ldr	r3, [pc, #228]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	0adb      	lsrs	r3, r3, #11
 8002286:	2207      	movs	r2, #7
 8002288:	4013      	ands	r3, r2
 800228a:	2201      	movs	r2, #1
 800228c:	409a      	lsls	r2, r3
 800228e:	0013      	movs	r3, r2
 8002290:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002292:	6839      	ldr	r1, [r7, #0]
 8002294:	4835      	ldr	r0, [pc, #212]	; (800236c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002296:	f7fd ff33 	bl	8000100 <__udivsi3>
 800229a:	0003      	movs	r3, r0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	e05d      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a0:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2238      	movs	r2, #56	; 0x38
 80022a6:	4013      	ands	r3, r2
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d102      	bne.n	80022b2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022ac:	4b30      	ldr	r3, [pc, #192]	; (8002370 <HAL_RCC_GetSysClockFreq+0x100>)
 80022ae:	613b      	str	r3, [r7, #16]
 80022b0:	e054      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	2238      	movs	r2, #56	; 0x38
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b10      	cmp	r3, #16
 80022bc:	d138      	bne.n	8002330 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022be:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	2203      	movs	r2, #3
 80022c4:	4013      	ands	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	2207      	movs	r2, #7
 80022d0:	4013      	ands	r3, r2
 80022d2:	3301      	adds	r3, #1
 80022d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d10d      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022dc:	68b9      	ldr	r1, [r7, #8]
 80022de:	4824      	ldr	r0, [pc, #144]	; (8002370 <HAL_RCC_GetSysClockFreq+0x100>)
 80022e0:	f7fd ff0e 	bl	8000100 <__udivsi3>
 80022e4:	0003      	movs	r3, r0
 80022e6:	0019      	movs	r1, r3
 80022e8:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	227f      	movs	r2, #127	; 0x7f
 80022f0:	4013      	ands	r3, r2
 80022f2:	434b      	muls	r3, r1
 80022f4:	617b      	str	r3, [r7, #20]
        break;
 80022f6:	e00d      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	481c      	ldr	r0, [pc, #112]	; (800236c <HAL_RCC_GetSysClockFreq+0xfc>)
 80022fc:	f7fd ff00 	bl	8000100 <__udivsi3>
 8002300:	0003      	movs	r3, r0
 8002302:	0019      	movs	r1, r3
 8002304:	4b18      	ldr	r3, [pc, #96]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0a1b      	lsrs	r3, r3, #8
 800230a:	227f      	movs	r2, #127	; 0x7f
 800230c:	4013      	ands	r3, r2
 800230e:	434b      	muls	r3, r1
 8002310:	617b      	str	r3, [r7, #20]
        break;
 8002312:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002314:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	0f5b      	lsrs	r3, r3, #29
 800231a:	2207      	movs	r2, #7
 800231c:	4013      	ands	r3, r2
 800231e:	3301      	adds	r3, #1
 8002320:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	6978      	ldr	r0, [r7, #20]
 8002326:	f7fd feeb 	bl	8000100 <__udivsi3>
 800232a:	0003      	movs	r3, r0
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	e015      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2238      	movs	r2, #56	; 0x38
 8002336:	4013      	ands	r3, r2
 8002338:	2b20      	cmp	r3, #32
 800233a:	d103      	bne.n	8002344 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800233c:	2380      	movs	r3, #128	; 0x80
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	e00b      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	2238      	movs	r2, #56	; 0x38
 800234a:	4013      	ands	r3, r2
 800234c:	2b18      	cmp	r3, #24
 800234e:	d103      	bne.n	8002358 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002350:	23fa      	movs	r3, #250	; 0xfa
 8002352:	01db      	lsls	r3, r3, #7
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	e001      	b.n	800235c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800235c:	693b      	ldr	r3, [r7, #16]
}
 800235e:	0018      	movs	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	b006      	add	sp, #24
 8002364:	bd80      	pop	{r7, pc}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	40021000 	.word	0x40021000
 800236c:	00f42400 	.word	0x00f42400
 8002370:	007a1200 	.word	0x007a1200

08002374 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800237c:	2313      	movs	r3, #19
 800237e:	18fb      	adds	r3, r7, r3
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002384:	2312      	movs	r3, #18
 8002386:	18fb      	adds	r3, r7, r3
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	2380      	movs	r3, #128	; 0x80
 8002392:	029b      	lsls	r3, r3, #10
 8002394:	4013      	ands	r3, r2
 8002396:	d100      	bne.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002398:	e0a4      	b.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 800239a:	2311      	movs	r3, #17
 800239c:	18fb      	adds	r3, r7, r3
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023a2:	4b87      	ldr	r3, [pc, #540]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80023a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023a6:	2380      	movs	r3, #128	; 0x80
 80023a8:	055b      	lsls	r3, r3, #21
 80023aa:	4013      	ands	r3, r2
 80023ac:	d111      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ae:	4b84      	ldr	r3, [pc, #528]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80023b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023b2:	4b83      	ldr	r3, [pc, #524]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80023b4:	2180      	movs	r1, #128	; 0x80
 80023b6:	0549      	lsls	r1, r1, #21
 80023b8:	430a      	orrs	r2, r1
 80023ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80023bc:	4b80      	ldr	r3, [pc, #512]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80023be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023c0:	2380      	movs	r3, #128	; 0x80
 80023c2:	055b      	lsls	r3, r3, #21
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
 80023c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023ca:	2311      	movs	r3, #17
 80023cc:	18fb      	adds	r3, r7, r3
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023d2:	4b7c      	ldr	r3, [pc, #496]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b7b      	ldr	r3, [pc, #492]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	0049      	lsls	r1, r1, #1
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023e0:	f7fe ffba 	bl	8001358 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80023e8:	e00b      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ea:	f7fe ffb5 	bl	8001358 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d904      	bls.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 80023f8:	2313      	movs	r3, #19
 80023fa:	18fb      	adds	r3, r7, r3
 80023fc:	2203      	movs	r2, #3
 80023fe:	701a      	strb	r2, [r3, #0]
        break;
 8002400:	e005      	b.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002402:	4b70      	ldr	r3, [pc, #448]	; (80025c4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4013      	ands	r3, r2
 800240c:	d0ed      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800240e:	2313      	movs	r3, #19
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d154      	bne.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002418:	4b69      	ldr	r3, [pc, #420]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800241a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800241c:	23c0      	movs	r3, #192	; 0xc0
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	4013      	ands	r3, r2
 8002422:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d019      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0xea>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	429a      	cmp	r2, r3
 8002432:	d014      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002434:	4b62      	ldr	r3, [pc, #392]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	4a63      	ldr	r2, [pc, #396]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800243a:	4013      	ands	r3, r2
 800243c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800243e:	4b60      	ldr	r3, [pc, #384]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002440:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002442:	4b5f      	ldr	r3, [pc, #380]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	0249      	lsls	r1, r1, #9
 8002448:	430a      	orrs	r2, r1
 800244a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800244c:	4b5c      	ldr	r3, [pc, #368]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800244e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002450:	4b5b      	ldr	r3, [pc, #364]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002452:	495e      	ldr	r1, [pc, #376]	; (80025cc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002454:	400a      	ands	r2, r1
 8002456:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002458:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	2201      	movs	r2, #1
 8002462:	4013      	ands	r3, r2
 8002464:	d016      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002466:	f7fe ff77 	bl	8001358 <HAL_GetTick>
 800246a:	0003      	movs	r3, r0
 800246c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246e:	e00c      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002470:	f7fe ff72 	bl	8001358 <HAL_GetTick>
 8002474:	0002      	movs	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	4a55      	ldr	r2, [pc, #340]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d904      	bls.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002480:	2313      	movs	r3, #19
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	2203      	movs	r2, #3
 8002486:	701a      	strb	r2, [r3, #0]
            break;
 8002488:	e004      	b.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800248a:	4b4d      	ldr	r3, [pc, #308]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800248c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248e:	2202      	movs	r2, #2
 8002490:	4013      	ands	r3, r2
 8002492:	d0ed      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8002494:	2313      	movs	r3, #19
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10a      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800249e:	4b48      	ldr	r3, [pc, #288]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a2:	4a49      	ldr	r2, [pc, #292]	; (80025c8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024a4:	4013      	ands	r3, r2
 80024a6:	0019      	movs	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	699a      	ldr	r2, [r3, #24]
 80024ac:	4b44      	ldr	r3, [pc, #272]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024ae:	430a      	orrs	r2, r1
 80024b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80024b2:	e00c      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024b4:	2312      	movs	r3, #18
 80024b6:	18fb      	adds	r3, r7, r3
 80024b8:	2213      	movs	r2, #19
 80024ba:	18ba      	adds	r2, r7, r2
 80024bc:	7812      	ldrb	r2, [r2, #0]
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e005      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c2:	2312      	movs	r3, #18
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	2213      	movs	r2, #19
 80024c8:	18ba      	adds	r2, r7, r2
 80024ca:	7812      	ldrb	r2, [r2, #0]
 80024cc:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ce:	2311      	movs	r3, #17
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d105      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d8:	4b39      	ldr	r3, [pc, #228]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024dc:	4b38      	ldr	r3, [pc, #224]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024de:	493d      	ldr	r1, [pc, #244]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e0:	400a      	ands	r2, r1
 80024e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2201      	movs	r2, #1
 80024ea:	4013      	ands	r3, r2
 80024ec:	d009      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ee:	4b34      	ldr	r3, [pc, #208]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f2:	2203      	movs	r2, #3
 80024f4:	4393      	bics	r3, r2
 80024f6:	0019      	movs	r1, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4b30      	ldr	r3, [pc, #192]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024fe:	430a      	orrs	r2, r1
 8002500:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2202      	movs	r2, #2
 8002508:	4013      	ands	r3, r2
 800250a:	d009      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800250c:	4b2c      	ldr	r3, [pc, #176]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	220c      	movs	r2, #12
 8002512:	4393      	bics	r3, r2
 8002514:	0019      	movs	r1, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	689a      	ldr	r2, [r3, #8]
 800251a:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800251c:	430a      	orrs	r2, r1
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2220      	movs	r2, #32
 8002526:	4013      	ands	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800252a:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800252c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800252e:	4a2a      	ldr	r2, [pc, #168]	; (80025d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002530:	4013      	ands	r3, r2
 8002532:	0019      	movs	r1, r3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800253a:	430a      	orrs	r2, r1
 800253c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	01db      	lsls	r3, r3, #7
 8002546:	4013      	ands	r3, r2
 8002548:	d015      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800254a:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800254c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	0899      	lsrs	r1, r3, #2
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	695a      	ldr	r2, [r3, #20]
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002558:	430a      	orrs	r2, r1
 800255a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	05db      	lsls	r3, r3, #23
 8002564:	429a      	cmp	r2, r3
 8002566:	d106      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800256a:	68da      	ldr	r2, [r3, #12]
 800256c:	4b14      	ldr	r3, [pc, #80]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800256e:	2180      	movs	r1, #128	; 0x80
 8002570:	0249      	lsls	r1, r1, #9
 8002572:	430a      	orrs	r2, r1
 8002574:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	4013      	ands	r3, r2
 8002580:	d016      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	4a15      	ldr	r2, [pc, #84]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002588:	4013      	ands	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002592:	430a      	orrs	r2, r1
 8002594:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691a      	ldr	r2, [r3, #16]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	01db      	lsls	r3, r3, #7
 800259e:	429a      	cmp	r2, r3
 80025a0:	d106      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025a2:	4b07      	ldr	r3, [pc, #28]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025a4:	68da      	ldr	r2, [r3, #12]
 80025a6:	4b06      	ldr	r3, [pc, #24]	; (80025c0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025a8:	2180      	movs	r1, #128	; 0x80
 80025aa:	0249      	lsls	r1, r1, #9
 80025ac:	430a      	orrs	r2, r1
 80025ae:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80025b0:	2312      	movs	r3, #18
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	781b      	ldrb	r3, [r3, #0]
}
 80025b6:	0018      	movs	r0, r3
 80025b8:	46bd      	mov	sp, r7
 80025ba:	b006      	add	sp, #24
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	46c0      	nop			; (mov r8, r8)
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40007000 	.word	0x40007000
 80025c8:	fffffcff 	.word	0xfffffcff
 80025cc:	fffeffff 	.word	0xfffeffff
 80025d0:	00001388 	.word	0x00001388
 80025d4:	efffffff 	.word	0xefffffff
 80025d8:	ffffcfff 	.word	0xffffcfff
 80025dc:	ffff3fff 	.word	0xffff3fff

080025e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80025e0:	b5b0      	push	{r4, r5, r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025e8:	230f      	movs	r3, #15
 80025ea:	18fb      	adds	r3, r7, r3
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d100      	bne.n	80025f8 <HAL_RTC_Init+0x18>
 80025f6:	e07f      	b.n	80026f8 <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2229      	movs	r2, #41	; 0x29
 80025fc:	5c9b      	ldrb	r3, [r3, r2]
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10b      	bne.n	800261c <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2228      	movs	r2, #40	; 0x28
 8002608:	2100      	movs	r1, #0
 800260a:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2288      	movs	r2, #136	; 0x88
 8002610:	0212      	lsls	r2, r2, #8
 8002612:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	0018      	movs	r0, r3
 8002618:	f7fe f8fc 	bl	8000814 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2229      	movs	r2, #41	; 0x29
 8002620:	2102      	movs	r1, #2
 8002622:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	22ca      	movs	r2, #202	; 0xca
 800262a:	625a      	str	r2, [r3, #36]	; 0x24
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2253      	movs	r2, #83	; 0x53
 8002632:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002634:	250f      	movs	r5, #15
 8002636:	197c      	adds	r4, r7, r5
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	0018      	movs	r0, r3
 800263c:	f000 fa71 	bl	8002b22 <RTC_EnterInitMode>
 8002640:	0003      	movs	r3, r0
 8002642:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8002644:	197b      	adds	r3, r7, r5
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d148      	bne.n	80026de <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	492c      	ldr	r1, [pc, #176]	; (8002708 <HAL_RTC_Init+0x128>)
 8002658:	400a      	ands	r2, r1
 800265a:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6999      	ldr	r1, [r3, #24]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6912      	ldr	r2, [r2, #16]
 8002682:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6919      	ldr	r1, [r3, #16]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	041a      	lsls	r2, r3, #16
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002698:	250f      	movs	r5, #15
 800269a:	197c      	adds	r4, r7, r5
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	0018      	movs	r0, r3
 80026a0:	f000 fa82 	bl	8002ba8 <RTC_ExitInitMode>
 80026a4:	0003      	movs	r3, r0
 80026a6:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80026a8:	197b      	adds	r3, r7, r5
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d116      	bne.n	80026de <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699a      	ldr	r2, [r3, #24]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	00d2      	lsls	r2, r2, #3
 80026bc:	08d2      	lsrs	r2, r2, #3
 80026be:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6999      	ldr	r1, [r3, #24]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	22ff      	movs	r2, #255	; 0xff
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80026e6:	230f      	movs	r3, #15
 80026e8:	18fb      	adds	r3, r7, r3
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2229      	movs	r2, #41	; 0x29
 80026f4:	2101      	movs	r1, #1
 80026f6:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80026f8:	230f      	movs	r3, #15
 80026fa:	18fb      	adds	r3, r7, r3
 80026fc:	781b      	ldrb	r3, [r3, #0]
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b004      	add	sp, #16
 8002704:	bdb0      	pop	{r4, r5, r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	fb8fffbf 	.word	0xfb8fffbf

0800270c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800270c:	b5b0      	push	{r4, r5, r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2228      	movs	r2, #40	; 0x28
 800271c:	5c9b      	ldrb	r3, [r3, r2]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d101      	bne.n	8002726 <HAL_RTC_SetTime+0x1a>
 8002722:	2302      	movs	r3, #2
 8002724:	e092      	b.n	800284c <HAL_RTC_SetTime+0x140>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2228      	movs	r2, #40	; 0x28
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2229      	movs	r2, #41	; 0x29
 8002732:	2102      	movs	r1, #2
 8002734:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	22ca      	movs	r2, #202	; 0xca
 800273c:	625a      	str	r2, [r3, #36]	; 0x24
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2253      	movs	r2, #83	; 0x53
 8002744:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002746:	2513      	movs	r5, #19
 8002748:	197c      	adds	r4, r7, r5
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	0018      	movs	r0, r3
 800274e:	f000 f9e8 	bl	8002b22 <RTC_EnterInitMode>
 8002752:	0003      	movs	r3, r0
 8002754:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002756:	197b      	adds	r3, r7, r5
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d162      	bne.n	8002824 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d125      	bne.n	80027b0 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2240      	movs	r2, #64	; 0x40
 800276c:	4013      	ands	r3, r2
 800276e:	d102      	bne.n	8002776 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2200      	movs	r2, #0
 8002774:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	0018      	movs	r0, r3
 800277c:	f000 fa5a 	bl	8002c34 <RTC_ByteToBcd2>
 8002780:	0003      	movs	r3, r0
 8002782:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	785b      	ldrb	r3, [r3, #1]
 8002788:	0018      	movs	r0, r3
 800278a:	f000 fa53 	bl	8002c34 <RTC_ByteToBcd2>
 800278e:	0003      	movs	r3, r0
 8002790:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002792:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	789b      	ldrb	r3, [r3, #2]
 8002798:	0018      	movs	r0, r3
 800279a:	f000 fa4b 	bl	8002c34 <RTC_ByteToBcd2>
 800279e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80027a0:	0022      	movs	r2, r4
 80027a2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	78db      	ldrb	r3, [r3, #3]
 80027a8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e017      	b.n	80027e0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	2240      	movs	r2, #64	; 0x40
 80027b8:	4013      	ands	r3, r2
 80027ba:	d102      	bne.n	80027c2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2200      	movs	r2, #0
 80027c0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80027ce:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80027d0:	68ba      	ldr	r2, [r7, #8]
 80027d2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80027d4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	78db      	ldrb	r3, [r3, #3]
 80027da:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80027dc:	4313      	orrs	r3, r2
 80027de:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	491b      	ldr	r1, [pc, #108]	; (8002854 <HAL_RTC_SetTime+0x148>)
 80027e8:	400a      	ands	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4918      	ldr	r1, [pc, #96]	; (8002858 <HAL_RTC_SetTime+0x14c>)
 80027f8:	400a      	ands	r2, r1
 80027fa:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6999      	ldr	r1, [r3, #24]
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	431a      	orrs	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002814:	2313      	movs	r3, #19
 8002816:	18fc      	adds	r4, r7, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	0018      	movs	r0, r3
 800281c:	f000 f9c4 	bl	8002ba8 <RTC_ExitInitMode>
 8002820:	0003      	movs	r3, r0
 8002822:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	22ff      	movs	r2, #255	; 0xff
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 800282c:	2313      	movs	r3, #19
 800282e:	18fb      	adds	r3, r7, r3
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d103      	bne.n	800283e <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2229      	movs	r2, #41	; 0x29
 800283a:	2101      	movs	r1, #1
 800283c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2228      	movs	r2, #40	; 0x28
 8002842:	2100      	movs	r1, #0
 8002844:	5499      	strb	r1, [r3, r2]

  return status;
 8002846:	2313      	movs	r3, #19
 8002848:	18fb      	adds	r3, r7, r3
 800284a:	781b      	ldrb	r3, [r3, #0]
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b006      	add	sp, #24
 8002852:	bdb0      	pop	{r4, r5, r7, pc}
 8002854:	007f7f7f 	.word	0x007f7f7f
 8002858:	fffbffff 	.word	0xfffbffff

0800285c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	045b      	lsls	r3, r3, #17
 800287a:	0c5a      	lsrs	r2, r3, #17
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a22      	ldr	r2, [pc, #136]	; (8002910 <HAL_RTC_GetTime+0xb4>)
 8002888:	4013      	ands	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	0c1b      	lsrs	r3, r3, #16
 8002890:	b2db      	uxtb	r3, r3
 8002892:	223f      	movs	r2, #63	; 0x3f
 8002894:	4013      	ands	r3, r2
 8002896:	b2da      	uxtb	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	227f      	movs	r2, #127	; 0x7f
 80028a4:	4013      	ands	r3, r2
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	227f      	movs	r2, #127	; 0x7f
 80028b2:	4013      	ands	r3, r2
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	0d9b      	lsrs	r3, r3, #22
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	2201      	movs	r2, #1
 80028c2:	4013      	ands	r3, r2
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d11a      	bne.n	8002906 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f000 f9d6 	bl	8002c86 <RTC_Bcd2ToByte>
 80028da:	0003      	movs	r3, r0
 80028dc:	001a      	movs	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	785b      	ldrb	r3, [r3, #1]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 f9cd 	bl	8002c86 <RTC_Bcd2ToByte>
 80028ec:	0003      	movs	r3, r0
 80028ee:	001a      	movs	r2, r3
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	789b      	ldrb	r3, [r3, #2]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f000 f9c4 	bl	8002c86 <RTC_Bcd2ToByte>
 80028fe:	0003      	movs	r3, r0
 8002900:	001a      	movs	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b006      	add	sp, #24
 800290e:	bd80      	pop	{r7, pc}
 8002910:	007f7f7f 	.word	0x007f7f7f

08002914 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002914:	b5b0      	push	{r4, r5, r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2228      	movs	r2, #40	; 0x28
 8002924:	5c9b      	ldrb	r3, [r3, r2]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_RTC_SetDate+0x1a>
 800292a:	2302      	movs	r3, #2
 800292c:	e07e      	b.n	8002a2c <HAL_RTC_SetDate+0x118>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2228      	movs	r2, #40	; 0x28
 8002932:	2101      	movs	r1, #1
 8002934:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2229      	movs	r2, #41	; 0x29
 800293a:	2102      	movs	r1, #2
 800293c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10e      	bne.n	8002962 <HAL_RTC_SetDate+0x4e>
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	785b      	ldrb	r3, [r3, #1]
 8002948:	001a      	movs	r2, r3
 800294a:	2310      	movs	r3, #16
 800294c:	4013      	ands	r3, r2
 800294e:	d008      	beq.n	8002962 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	785b      	ldrb	r3, [r3, #1]
 8002954:	2210      	movs	r2, #16
 8002956:	4393      	bics	r3, r2
 8002958:	b2db      	uxtb	r3, r3
 800295a:	330a      	adds	r3, #10
 800295c:	b2da      	uxtb	r2, r3
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d11c      	bne.n	80029a2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	78db      	ldrb	r3, [r3, #3]
 800296c:	0018      	movs	r0, r3
 800296e:	f000 f961 	bl	8002c34 <RTC_ByteToBcd2>
 8002972:	0003      	movs	r3, r0
 8002974:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	785b      	ldrb	r3, [r3, #1]
 800297a:	0018      	movs	r0, r3
 800297c:	f000 f95a 	bl	8002c34 <RTC_ByteToBcd2>
 8002980:	0003      	movs	r3, r0
 8002982:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002984:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	789b      	ldrb	r3, [r3, #2]
 800298a:	0018      	movs	r0, r3
 800298c:	f000 f952 	bl	8002c34 <RTC_ByteToBcd2>
 8002990:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002992:	0022      	movs	r2, r4
 8002994:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800299c:	4313      	orrs	r3, r2
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	e00e      	b.n	80029c0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	78db      	ldrb	r3, [r3, #3]
 80029a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	785b      	ldrb	r3, [r3, #1]
 80029ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80029ae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80029b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	22ca      	movs	r2, #202	; 0xca
 80029c6:	625a      	str	r2, [r3, #36]	; 0x24
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2253      	movs	r2, #83	; 0x53
 80029ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80029d0:	2513      	movs	r5, #19
 80029d2:	197c      	adds	r4, r7, r5
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	0018      	movs	r0, r3
 80029d8:	f000 f8a3 	bl	8002b22 <RTC_EnterInitMode>
 80029dc:	0003      	movs	r3, r0
 80029de:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80029e0:	197b      	adds	r3, r7, r5
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10d      	bne.n	8002a04 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	4911      	ldr	r1, [pc, #68]	; (8002a34 <HAL_RTC_SetDate+0x120>)
 80029f0:	400a      	ands	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80029f4:	2313      	movs	r3, #19
 80029f6:	18fc      	adds	r4, r7, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f8d4 	bl	8002ba8 <RTC_ExitInitMode>
 8002a00:	0003      	movs	r3, r0
 8002a02:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	22ff      	movs	r2, #255	; 0xff
 8002a0a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002a0c:	2313      	movs	r3, #19
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2229      	movs	r2, #41	; 0x29
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2228      	movs	r2, #40	; 0x28
 8002a22:	2100      	movs	r1, #0
 8002a24:	5499      	strb	r1, [r3, r2]

  return status;
 8002a26:	2313      	movs	r3, #19
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	781b      	ldrb	r3, [r3, #0]
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b006      	add	sp, #24
 8002a32:	bdb0      	pop	{r4, r5, r7, pc}
 8002a34:	00ffff3f 	.word	0x00ffff3f

08002a38 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b086      	sub	sp, #24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	4a21      	ldr	r2, [pc, #132]	; (8002ad0 <HAL_RTC_GetDate+0x98>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	0c1b      	lsrs	r3, r3, #16
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	0a1b      	lsrs	r3, r3, #8
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	221f      	movs	r2, #31
 8002a62:	4013      	ands	r3, r2
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	223f      	movs	r2, #63	; 0x3f
 8002a70:	4013      	ands	r3, r2
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	0b5b      	lsrs	r3, r3, #13
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2207      	movs	r2, #7
 8002a80:	4013      	ands	r3, r2
 8002a82:	b2da      	uxtb	r2, r3
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d11a      	bne.n	8002ac4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	78db      	ldrb	r3, [r3, #3]
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 f8f7 	bl	8002c86 <RTC_Bcd2ToByte>
 8002a98:	0003      	movs	r3, r0
 8002a9a:	001a      	movs	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	785b      	ldrb	r3, [r3, #1]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 f8ee 	bl	8002c86 <RTC_Bcd2ToByte>
 8002aaa:	0003      	movs	r3, r0
 8002aac:	001a      	movs	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	789b      	ldrb	r3, [r3, #2]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f000 f8e5 	bl	8002c86 <RTC_Bcd2ToByte>
 8002abc:	0003      	movs	r3, r0
 8002abe:	001a      	movs	r2, r3
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b006      	add	sp, #24
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	00ffff3f 	.word	0x00ffff3f

08002ad4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	21a0      	movs	r1, #160	; 0xa0
 8002ae8:	438a      	bics	r2, r1
 8002aea:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002aec:	f7fe fc34 	bl	8001358 <HAL_GetTick>
 8002af0:	0003      	movs	r3, r0
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002af4:	e00a      	b.n	8002b0c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002af6:	f7fe fc2f 	bl	8001358 <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	1ad2      	subs	r2, r2, r3
 8002b00:	23fa      	movs	r3, #250	; 0xfa
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d901      	bls.n	8002b0c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002b08:	2303      	movs	r3, #3
 8002b0a:	e006      	b.n	8002b1a <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2220      	movs	r2, #32
 8002b14:	4013      	ands	r3, r2
 8002b16:	d0ee      	beq.n	8002af6 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b004      	add	sp, #16
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b084      	sub	sp, #16
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8002b2a:	230f      	movs	r3, #15
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	2200      	movs	r2, #0
 8002b30:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2240      	movs	r2, #64	; 0x40
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d12d      	bne.n	8002b9a <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2180      	movs	r1, #128	; 0x80
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b4e:	f7fe fc03 	bl	8001358 <HAL_GetTick>
 8002b52:	0003      	movs	r3, r0
 8002b54:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002b56:	e015      	b.n	8002b84 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002b58:	f7fe fbfe 	bl	8001358 <HAL_GetTick>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	1ad2      	subs	r2, r2, r3
 8002b62:	210f      	movs	r1, #15
 8002b64:	187b      	adds	r3, r7, r1
 8002b66:	1879      	adds	r1, r7, r1
 8002b68:	7809      	ldrb	r1, [r1, #0]
 8002b6a:	7019      	strb	r1, [r3, #0]
 8002b6c:	23fa      	movs	r3, #250	; 0xfa
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d907      	bls.n	8002b84 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8002b74:	230f      	movs	r3, #15
 8002b76:	18fb      	adds	r3, r7, r3
 8002b78:	2203      	movs	r2, #3
 8002b7a:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2229      	movs	r2, #41	; 0x29
 8002b80:	2103      	movs	r1, #3
 8002b82:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	d104      	bne.n	8002b9a <RTC_EnterInitMode+0x78>
 8002b90:	230f      	movs	r3, #15
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b03      	cmp	r3, #3
 8002b98:	d1de      	bne.n	8002b58 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002b9a:	230f      	movs	r3, #15
 8002b9c:	18fb      	adds	r3, r7, r3
 8002b9e:	781b      	ldrb	r3, [r3, #0]
}
 8002ba0:	0018      	movs	r0, r3
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b004      	add	sp, #16
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bb0:	230f      	movs	r3, #15
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002bb8:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <RTC_ExitInitMode+0x88>)
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	4b1c      	ldr	r3, [pc, #112]	; (8002c30 <RTC_ExitInitMode+0x88>)
 8002bbe:	2180      	movs	r1, #128	; 0x80
 8002bc0:	438a      	bics	r2, r1
 8002bc2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002bc4:	4b1a      	ldr	r3, [pc, #104]	; (8002c30 <RTC_ExitInitMode+0x88>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	2220      	movs	r2, #32
 8002bca:	4013      	ands	r3, r2
 8002bcc:	d10e      	bne.n	8002bec <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	f7ff ff7f 	bl	8002ad4 <HAL_RTC_WaitForSynchro>
 8002bd6:	1e03      	subs	r3, r0, #0
 8002bd8:	d022      	beq.n	8002c20 <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2229      	movs	r2, #41	; 0x29
 8002bde:	2103      	movs	r1, #3
 8002be0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002be2:	230f      	movs	r3, #15
 8002be4:	18fb      	adds	r3, r7, r3
 8002be6:	2203      	movs	r2, #3
 8002be8:	701a      	strb	r2, [r3, #0]
 8002bea:	e019      	b.n	8002c20 <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002bec:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <RTC_ExitInitMode+0x88>)
 8002bee:	699a      	ldr	r2, [r3, #24]
 8002bf0:	4b0f      	ldr	r3, [pc, #60]	; (8002c30 <RTC_ExitInitMode+0x88>)
 8002bf2:	2120      	movs	r1, #32
 8002bf4:	438a      	bics	r2, r1
 8002bf6:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	0018      	movs	r0, r3
 8002bfc:	f7ff ff6a 	bl	8002ad4 <HAL_RTC_WaitForSynchro>
 8002c00:	1e03      	subs	r3, r0, #0
 8002c02:	d007      	beq.n	8002c14 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2229      	movs	r2, #41	; 0x29
 8002c08:	2103      	movs	r1, #3
 8002c0a:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002c0c:	230f      	movs	r3, #15
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2203      	movs	r2, #3
 8002c12:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c14:	4b06      	ldr	r3, [pc, #24]	; (8002c30 <RTC_ExitInitMode+0x88>)
 8002c16:	699a      	ldr	r2, [r3, #24]
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <RTC_ExitInitMode+0x88>)
 8002c1a:	2120      	movs	r1, #32
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002c20:	230f      	movs	r3, #15
 8002c22:	18fb      	adds	r3, r7, r3
 8002c24:	781b      	ldrb	r3, [r3, #0]
}
 8002c26:	0018      	movs	r0, r3
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	b004      	add	sp, #16
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	40002800 	.word	0x40002800

08002c34 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	1dfb      	adds	r3, r7, #7
 8002c3e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002c44:	230b      	movs	r3, #11
 8002c46:	18fb      	adds	r3, r7, r3
 8002c48:	1dfa      	adds	r2, r7, #7
 8002c4a:	7812      	ldrb	r2, [r2, #0]
 8002c4c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8002c4e:	e008      	b.n	8002c62 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	3301      	adds	r3, #1
 8002c54:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002c56:	220b      	movs	r2, #11
 8002c58:	18bb      	adds	r3, r7, r2
 8002c5a:	18ba      	adds	r2, r7, r2
 8002c5c:	7812      	ldrb	r2, [r2, #0]
 8002c5e:	3a0a      	subs	r2, #10
 8002c60:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8002c62:	230b      	movs	r3, #11
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b09      	cmp	r3, #9
 8002c6a:	d8f1      	bhi.n	8002c50 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	b2da      	uxtb	r2, r3
 8002c74:	230b      	movs	r3, #11
 8002c76:	18fb      	adds	r3, r7, r3
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	b2db      	uxtb	r3, r3
}
 8002c7e:	0018      	movs	r0, r3
 8002c80:	46bd      	mov	sp, r7
 8002c82:	b004      	add	sp, #16
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	1dfb      	adds	r3, r7, #7
 8002c90:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002c92:	1dfb      	adds	r3, r7, #7
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	091b      	lsrs	r3, r3, #4
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	001a      	movs	r2, r3
 8002c9c:	0013      	movs	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	189b      	adds	r3, r3, r2
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	b2da      	uxtb	r2, r3
 8002caa:	1dfb      	adds	r3, r7, #7
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	210f      	movs	r1, #15
 8002cb0:	400b      	ands	r3, r1
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	18d3      	adds	r3, r2, r3
 8002cb6:	b2db      	uxtb	r3, r3
}
 8002cb8:	0018      	movs	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b004      	add	sp, #16
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2228      	movs	r2, #40	; 0x28
 8002cd0:	5c9b      	ldrb	r3, [r3, r2]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e082      	b.n	8002de0 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2228      	movs	r2, #40	; 0x28
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2229      	movs	r2, #41	; 0x29
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	22ca      	movs	r2, #202	; 0xca
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2253      	movs	r2, #83	; 0x53
 8002cf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699a      	ldr	r2, [r3, #24]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4938      	ldr	r1, [pc, #224]	; (8002de8 <HAL_RTCEx_SetWakeUpTimer_IT+0x128>)
 8002d06:	400a      	ands	r2, r1
 8002d08:	619a      	str	r2, [r3, #24]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2104      	movs	r1, #4
 8002d16:	430a      	orrs	r2, r1
 8002d18:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Poll WUTWF until it is set in RTC_ICSR to make sure the access to wakeup autoreload
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002d1a:	4b34      	ldr	r3, [pc, #208]	; (8002dec <HAL_RTCEx_SetWakeUpTimer_IT+0x12c>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2240      	movs	r2, #64	; 0x40
 8002d20:	4013      	ands	r3, r2
 8002d22:	d121      	bne.n	8002d68 <HAL_RTCEx_SetWakeUpTimer_IT+0xa8>
  {
    tickstart = HAL_GetTick();
 8002d24:	f7fe fb18 	bl	8001358 <HAL_GetTick>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	617b      	str	r3, [r7, #20]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d2c:	e016      	b.n	8002d5c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8002d2e:	f7fe fb13 	bl	8001358 <HAL_GetTick>
 8002d32:	0002      	movs	r2, r0
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	1ad2      	subs	r2, r2, r3
 8002d38:	23fa      	movs	r3, #250	; 0xfa
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d90d      	bls.n	8002d5c <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	22ff      	movs	r2, #255	; 0xff
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2229      	movs	r2, #41	; 0x29
 8002d4c:	2103      	movs	r1, #3
 8002d4e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2228      	movs	r2, #40	; 0x28
 8002d54:	2100      	movs	r1, #0
 8002d56:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e041      	b.n	8002de0 <HAL_RTCEx_SetWakeUpTimer_IT+0x120>
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	2204      	movs	r2, #4
 8002d64:	4013      	ands	r3, r2
 8002d66:	d0e2      	beq.n	8002d2e <HAL_RTCEx_SetWakeUpTimer_IT+0x6e>
      }
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	68ba      	ldr	r2, [r7, #8]
 8002d6e:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2107      	movs	r1, #7
 8002d7c:	438a      	bics	r2, r1
 8002d7e:	619a      	str	r2, [r3, #24]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6999      	ldr	r1, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	619a      	str	r2, [r3, #24]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002d90:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	58d3      	ldr	r3, [r2, r3]
 8002d96:	4916      	ldr	r1, [pc, #88]	; (8002df0 <HAL_RTCEx_SetWakeUpTimer_IT+0x130>)
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	0312      	lsls	r2, r2, #12
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	2280      	movs	r2, #128	; 0x80
 8002da0:	508b      	str	r3, [r1, r2]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc,RTC_IT_WUT);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	01c9      	lsls	r1, r1, #7
 8002db0:	430a      	orrs	r2, r1
 8002db2:	619a      	str	r2, [r3, #24]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2180      	movs	r1, #128	; 0x80
 8002dc0:	00c9      	lsls	r1, r1, #3
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	22ff      	movs	r2, #255	; 0xff
 8002dcc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2229      	movs	r2, #41	; 0x29
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2228      	movs	r2, #40	; 0x28
 8002dda:	2100      	movs	r1, #0
 8002ddc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b006      	add	sp, #24
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	fffffbff 	.word	0xfffffbff
 8002dec:	40002800 	.word	0x40002800
 8002df0:	40021800 	.word	0x40021800

08002df4 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
    /* Get the pending status of the WAKEUPTIMER Interrupt */
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e02:	2204      	movs	r2, #4
 8002e04:	4013      	ands	r3, r2
 8002e06:	d00b      	beq.n	8002e20 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>
    {
      /* Clear the WAKEUPTIMER interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2104      	movs	r1, #4
 8002e14:	430a      	orrs	r2, r1
 8002e16:	65da      	str	r2, [r3, #92]	; 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call WakeUpTimerEvent registered Callback */
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      /* WAKEUPTIMER callback */
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	f000 f808 	bl	8002e30 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2229      	movs	r2, #41	; 0x29
 8002e24:	2101      	movs	r1, #1
 8002e26:	5499      	strb	r1, [r3, r2]
}
 8002e28:	46c0      	nop			; (mov r8, r8)
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b002      	add	sp, #8
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @brief  Wake Up Timer callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002e38:	46c0      	nop			; (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <__libc_init_array>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	2600      	movs	r6, #0
 8002e44:	4d0c      	ldr	r5, [pc, #48]	; (8002e78 <__libc_init_array+0x38>)
 8002e46:	4c0d      	ldr	r4, [pc, #52]	; (8002e7c <__libc_init_array+0x3c>)
 8002e48:	1b64      	subs	r4, r4, r5
 8002e4a:	10a4      	asrs	r4, r4, #2
 8002e4c:	42a6      	cmp	r6, r4
 8002e4e:	d109      	bne.n	8002e64 <__libc_init_array+0x24>
 8002e50:	2600      	movs	r6, #0
 8002e52:	f000 f821 	bl	8002e98 <_init>
 8002e56:	4d0a      	ldr	r5, [pc, #40]	; (8002e80 <__libc_init_array+0x40>)
 8002e58:	4c0a      	ldr	r4, [pc, #40]	; (8002e84 <__libc_init_array+0x44>)
 8002e5a:	1b64      	subs	r4, r4, r5
 8002e5c:	10a4      	asrs	r4, r4, #2
 8002e5e:	42a6      	cmp	r6, r4
 8002e60:	d105      	bne.n	8002e6e <__libc_init_array+0x2e>
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
 8002e64:	00b3      	lsls	r3, r6, #2
 8002e66:	58eb      	ldr	r3, [r5, r3]
 8002e68:	4798      	blx	r3
 8002e6a:	3601      	adds	r6, #1
 8002e6c:	e7ee      	b.n	8002e4c <__libc_init_array+0xc>
 8002e6e:	00b3      	lsls	r3, r6, #2
 8002e70:	58eb      	ldr	r3, [r5, r3]
 8002e72:	4798      	blx	r3
 8002e74:	3601      	adds	r6, #1
 8002e76:	e7f2      	b.n	8002e5e <__libc_init_array+0x1e>
 8002e78:	08002f98 	.word	0x08002f98
 8002e7c:	08002f98 	.word	0x08002f98
 8002e80:	08002f98 	.word	0x08002f98
 8002e84:	08002f9c 	.word	0x08002f9c

08002e88 <memset>:
 8002e88:	0003      	movs	r3, r0
 8002e8a:	1812      	adds	r2, r2, r0
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <memset+0xa>
 8002e90:	4770      	bx	lr
 8002e92:	7019      	strb	r1, [r3, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	e7f9      	b.n	8002e8c <memset+0x4>

08002e98 <_init>:
 8002e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9a:	46c0      	nop			; (mov r8, r8)
 8002e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9e:	bc08      	pop	{r3}
 8002ea0:	469e      	mov	lr, r3
 8002ea2:	4770      	bx	lr

08002ea4 <_fini>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr
