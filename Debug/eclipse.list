
eclipse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002744  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080027fc  080027fc  000127fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028e4  080028e4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080028e4  080028e4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028e4  080028e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028e4  080028e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028e8  080028e8  000128e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080028ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  2000000c  080028f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  080028f8  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000717b  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000192e  00000000  00000000  000271af  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000688  00000000  00000000  00028ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000590  00000000  00000000  00029168  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000149a4  00000000  00000000  000296f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000796c  00000000  00000000  0003e09c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007eed7  00000000  00000000  00045a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c48df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001460  00000000  00000000  000c495c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080027e4 	.word	0x080027e4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	080027e4 	.word	0x080027e4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fda2 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f830 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f90a 	bl	800043c <MX_GPIO_Init>
  MX_RTC_Init();
 8000228:	f000 f89a 	bl	8000360 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
	rtcInit();
 800022c:	f000 fd64 	bl	8000cf8 <rtcInit>
//		for (uint8_t i = 0; i < 12; i++) {
//						displayTurnHoursLED(i, 1);
//						HAL_Delay(20);
//					}

		rtcGetTime();
 8000230:	f000 fd6c 	bl	8000d0c <rtcGetTime>

		if (displayFlag == 1) {
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <main+0x5c>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	b2db      	uxtb	r3, r3
 800023a:	2b01      	cmp	r3, #1
 800023c:	d10e      	bne.n	800025c <main+0x44>

			displayShowTime(hours, minutes, 50, 15);
 800023e:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <main+0x60>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	b25b      	sxtb	r3, r3
 8000244:	b2d8      	uxtb	r0, r3
 8000246:	4b0d      	ldr	r3, [pc, #52]	; (800027c <main+0x64>)
 8000248:	881b      	ldrh	r3, [r3, #0]
 800024a:	b21b      	sxth	r3, r3
 800024c:	b2d9      	uxtb	r1, r3
 800024e:	230f      	movs	r3, #15
 8000250:	2232      	movs	r2, #50	; 0x32
 8000252:	f000 fa8e 	bl	8000772 <displayShowTime>
			displayFlag = 0;
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <main+0x5c>)
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
		}

		if(mode == MODE_NORMAL){
 800025c:	4b08      	ldr	r3, [pc, #32]	; (8000280 <main+0x68>)
 800025e:	781b      	ldrb	r3, [r3, #0]
 8000260:	b2db      	uxtb	r3, r3
 8000262:	2b01      	cmp	r3, #1
 8000264:	d1e4      	bne.n	8000230 <main+0x18>
			HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8000266:	2380      	movs	r3, #128	; 0x80
 8000268:	01db      	lsls	r3, r3, #7
 800026a:	2101      	movs	r1, #1
 800026c:	0018      	movs	r0, r3
 800026e:	f001 f8cf 	bl	8001410 <HAL_PWR_EnterSTOPMode>
		rtcGetTime();
 8000272:	e7dd      	b.n	8000230 <main+0x18>
 8000274:	2000003c 	.word	0x2000003c
 8000278:	20000074 	.word	0x20000074
 800027c:	20000072 	.word	0x20000072
 8000280:	2000003d 	.word	0x2000003d

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b099      	sub	sp, #100	; 0x64
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	242c      	movs	r4, #44	; 0x2c
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	2334      	movs	r3, #52	; 0x34
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f002 fa9d 	bl	80027d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	231c      	movs	r3, #28
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	0018      	movs	r0, r3
 80002a0:	2310      	movs	r3, #16
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f002 fa95 	bl	80027d4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002aa:	003b      	movs	r3, r7
 80002ac:	0018      	movs	r0, r3
 80002ae:	231c      	movs	r3, #28
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f002 fa8e 	bl	80027d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	009b      	lsls	r3, r3, #2
 80002bc:	0018      	movs	r0, r3
 80002be:	f001 f8df 	bl	8001480 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80002c2:	f001 f897 	bl	80013f4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80002c6:	4b25      	ldr	r3, [pc, #148]	; (800035c <SystemClock_Config+0xd8>)
 80002c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80002ca:	4b24      	ldr	r3, [pc, #144]	; (800035c <SystemClock_Config+0xd8>)
 80002cc:	2118      	movs	r1, #24
 80002ce:	438a      	bics	r2, r1
 80002d0:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2206      	movs	r2, #6
 80002d6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002d8:	193b      	adds	r3, r7, r4
 80002da:	2201      	movs	r2, #1
 80002dc:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002de:	193b      	adds	r3, r7, r4
 80002e0:	2280      	movs	r2, #128	; 0x80
 80002e2:	0052      	lsls	r2, r2, #1
 80002e4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	2240      	movs	r2, #64	; 0x40
 80002f0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	2200      	movs	r2, #0
 80002f6:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f8:	193b      	adds	r3, r7, r4
 80002fa:	0018      	movs	r0, r3
 80002fc:	f001 f900 	bl	8001500 <HAL_RCC_OscConfig>
 8000300:	1e03      	subs	r3, r0, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000304:	f000 f984 	bl	8000610 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	211c      	movs	r1, #28
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2207      	movs	r2, #7
 800030e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000310:	187b      	adds	r3, r7, r1
 8000312:	2200      	movs	r2, #0
 8000314:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000316:	187b      	adds	r3, r7, r1
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800031c:	187b      	adds	r3, r7, r1
 800031e:	2200      	movs	r2, #0
 8000320:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2100      	movs	r1, #0
 8000326:	0018      	movs	r0, r3
 8000328:	f001 fc00 	bl	8001b2c <HAL_RCC_ClockConfig>
 800032c:	1e03      	subs	r3, r0, #0
 800032e:	d001      	beq.n	8000334 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000330:	f000 f96e 	bl	8000610 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000334:	003b      	movs	r3, r7
 8000336:	2280      	movs	r2, #128	; 0x80
 8000338:	0292      	lsls	r2, r2, #10
 800033a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800033c:	003b      	movs	r3, r7
 800033e:	2280      	movs	r2, #128	; 0x80
 8000340:	0052      	lsls	r2, r2, #1
 8000342:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000344:	003b      	movs	r3, r7
 8000346:	0018      	movs	r0, r3
 8000348:	f001 fd7a 	bl	8001e40 <HAL_RCCEx_PeriphCLKConfig>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000350:	f000 f95e 	bl	8000610 <Error_Handler>
  }
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b019      	add	sp, #100	; 0x64
 800035a:	bd90      	pop	{r4, r7, pc}
 800035c:	40021000 	.word	0x40021000

08000360 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b086      	sub	sp, #24
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000366:	1d3b      	adds	r3, r7, #4
 8000368:	0018      	movs	r0, r3
 800036a:	2314      	movs	r3, #20
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f002 fa30 	bl	80027d4 <memset>
  RTC_DateTypeDef sDate = {0};
 8000374:	003b      	movs	r3, r7
 8000376:	2200      	movs	r2, #0
 8000378:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800037a:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <MX_RTC_Init+0xd4>)
 800037c:	4a2e      	ldr	r2, [pc, #184]	; (8000438 <MX_RTC_Init+0xd8>)
 800037e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000380:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <MX_RTC_Init+0xd4>)
 8000382:	2240      	movs	r2, #64	; 0x40
 8000384:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8000386:	4b2b      	ldr	r3, [pc, #172]	; (8000434 <MX_RTC_Init+0xd4>)
 8000388:	227f      	movs	r2, #127	; 0x7f
 800038a:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 800038c:	4b29      	ldr	r3, [pc, #164]	; (8000434 <MX_RTC_Init+0xd4>)
 800038e:	22ff      	movs	r2, #255	; 0xff
 8000390:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000392:	4b28      	ldr	r3, [pc, #160]	; (8000434 <MX_RTC_Init+0xd4>)
 8000394:	2200      	movs	r2, #0
 8000396:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000398:	4b26      	ldr	r3, [pc, #152]	; (8000434 <MX_RTC_Init+0xd4>)
 800039a:	2200      	movs	r2, #0
 800039c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800039e:	4b25      	ldr	r3, [pc, #148]	; (8000434 <MX_RTC_Init+0xd4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80003a4:	4b23      	ldr	r3, [pc, #140]	; (8000434 <MX_RTC_Init+0xd4>)
 80003a6:	2280      	movs	r2, #128	; 0x80
 80003a8:	05d2      	lsls	r2, r2, #23
 80003aa:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <MX_RTC_Init+0xd4>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003b2:	4b20      	ldr	r3, [pc, #128]	; (8000434 <MX_RTC_Init+0xd4>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 fe79 	bl	80020ac <HAL_RTC_Init>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80003be:	f000 f927 	bl	8000610 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 5;
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2205      	movs	r2, #5
 80003c6:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 40;
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2228      	movs	r2, #40	; 0x28
 80003cc:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2200      	movs	r2, #0
 80003d2:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0;
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	605a      	str	r2, [r3, #4]
  sTime.TimeFormat = RTC_HOURFORMAT12_AM;
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2200      	movs	r2, #0
 80003de:	70da      	strb	r2, [r3, #3]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003e0:	1d3b      	adds	r3, r7, #4
 80003e2:	2200      	movs	r2, #0
 80003e4:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003e6:	1d3b      	adds	r3, r7, #4
 80003e8:	2200      	movs	r2, #0
 80003ea:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80003ec:	1d39      	adds	r1, r7, #4
 80003ee:	4b11      	ldr	r3, [pc, #68]	; (8000434 <MX_RTC_Init+0xd4>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	0018      	movs	r0, r3
 80003f4:	f001 fef0 	bl	80021d8 <HAL_RTC_SetTime>
 80003f8:	1e03      	subs	r3, r0, #0
 80003fa:	d001      	beq.n	8000400 <MX_RTC_Init+0xa0>
  {
    Error_Handler();
 80003fc:	f000 f908 	bl	8000610 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000400:	003b      	movs	r3, r7
 8000402:	2201      	movs	r2, #1
 8000404:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000406:	003b      	movs	r3, r7
 8000408:	2201      	movs	r2, #1
 800040a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 1;
 800040c:	003b      	movs	r3, r7
 800040e:	2201      	movs	r2, #1
 8000410:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0;
 8000412:	003b      	movs	r3, r7
 8000414:	2200      	movs	r2, #0
 8000416:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000418:	0039      	movs	r1, r7
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <MX_RTC_Init+0xd4>)
 800041c:	2200      	movs	r2, #0
 800041e:	0018      	movs	r0, r3
 8000420:	f001 ffde 	bl	80023e0 <HAL_RTC_SetDate>
 8000424:	1e03      	subs	r3, r0, #0
 8000426:	d001      	beq.n	800042c <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 8000428:	f000 f8f2 	bl	8000610 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800042c:	46c0      	nop			; (mov r8, r8)
 800042e:	46bd      	mov	sp, r7
 8000430:	b006      	add	sp, #24
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000044 	.word	0x20000044
 8000438:	40002800 	.word	0x40002800

0800043c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800043c:	b590      	push	{r4, r7, lr}
 800043e:	b08b      	sub	sp, #44	; 0x2c
 8000440:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000442:	2414      	movs	r4, #20
 8000444:	193b      	adds	r3, r7, r4
 8000446:	0018      	movs	r0, r3
 8000448:	2314      	movs	r3, #20
 800044a:	001a      	movs	r2, r3
 800044c:	2100      	movs	r1, #0
 800044e:	f002 f9c1 	bl	80027d4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000452:	4b66      	ldr	r3, [pc, #408]	; (80005ec <MX_GPIO_Init+0x1b0>)
 8000454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000456:	4b65      	ldr	r3, [pc, #404]	; (80005ec <MX_GPIO_Init+0x1b0>)
 8000458:	2104      	movs	r1, #4
 800045a:	430a      	orrs	r2, r1
 800045c:	635a      	str	r2, [r3, #52]	; 0x34
 800045e:	4b63      	ldr	r3, [pc, #396]	; (80005ec <MX_GPIO_Init+0x1b0>)
 8000460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000462:	2204      	movs	r2, #4
 8000464:	4013      	ands	r3, r2
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800046a:	4b60      	ldr	r3, [pc, #384]	; (80005ec <MX_GPIO_Init+0x1b0>)
 800046c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800046e:	4b5f      	ldr	r3, [pc, #380]	; (80005ec <MX_GPIO_Init+0x1b0>)
 8000470:	2101      	movs	r1, #1
 8000472:	430a      	orrs	r2, r1
 8000474:	635a      	str	r2, [r3, #52]	; 0x34
 8000476:	4b5d      	ldr	r3, [pc, #372]	; (80005ec <MX_GPIO_Init+0x1b0>)
 8000478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047a:	2201      	movs	r2, #1
 800047c:	4013      	ands	r3, r2
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000482:	4b5a      	ldr	r3, [pc, #360]	; (80005ec <MX_GPIO_Init+0x1b0>)
 8000484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000486:	4b59      	ldr	r3, [pc, #356]	; (80005ec <MX_GPIO_Init+0x1b0>)
 8000488:	2102      	movs	r1, #2
 800048a:	430a      	orrs	r2, r1
 800048c:	635a      	str	r2, [r3, #52]	; 0x34
 800048e:	4b57      	ldr	r3, [pc, #348]	; (80005ec <MX_GPIO_Init+0x1b0>)
 8000490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000492:	2202      	movs	r2, #2
 8000494:	4013      	ands	r3, r2
 8000496:	60bb      	str	r3, [r7, #8]
 8000498:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800049a:	4b54      	ldr	r3, [pc, #336]	; (80005ec <MX_GPIO_Init+0x1b0>)
 800049c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800049e:	4b53      	ldr	r3, [pc, #332]	; (80005ec <MX_GPIO_Init+0x1b0>)
 80004a0:	2108      	movs	r1, #8
 80004a2:	430a      	orrs	r2, r1
 80004a4:	635a      	str	r2, [r3, #52]	; 0x34
 80004a6:	4b51      	ldr	r3, [pc, #324]	; (80005ec <MX_GPIO_Init+0x1b0>)
 80004a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004aa:	2208      	movs	r2, #8
 80004ac:	4013      	ands	r3, r2
 80004ae:	607b      	str	r3, [r7, #4]
 80004b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, M23_Pin|H9_Pin|M22_Pin|M21_Pin
 80004b2:	494f      	ldr	r1, [pc, #316]	; (80005f0 <MX_GPIO_Init+0x1b4>)
 80004b4:	4b4f      	ldr	r3, [pc, #316]	; (80005f4 <MX_GPIO_Init+0x1b8>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	0018      	movs	r0, r3
 80004ba:	f000 ff53 	bl	8001364 <HAL_GPIO_WritePin>
                          |M15_Pin|M14_Pin|M6_Pin|H2_Pin
                          |M0_Pin|M1_Pin|M24_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M20_Pin|H8_Pin|M19_Pin|M18_Pin
 80004be:	494e      	ldr	r1, [pc, #312]	; (80005f8 <MX_GPIO_Init+0x1bc>)
 80004c0:	23a0      	movs	r3, #160	; 0xa0
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	2200      	movs	r2, #0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 ff4c 	bl	8001364 <HAL_GPIO_WritePin>
                          |H7_Pin|M17_Pin|M16_Pin|H6_Pin
                          |H3_Pin|M7_Pin|M4_Pin|M3_Pin
                          |H1_Pin|H0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M13_Pin|H5_Pin|M12_Pin|M11_Pin
 80004cc:	494b      	ldr	r1, [pc, #300]	; (80005fc <MX_GPIO_Init+0x1c0>)
 80004ce:	4b4c      	ldr	r3, [pc, #304]	; (8000600 <MX_GPIO_Init+0x1c4>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 ff46 	bl	8001364 <HAL_GPIO_WritePin>
                          |M10_Pin|H4_Pin|M9_Pin|M8_Pin
                          |H10_Pin|WORK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, M5_Pin|M2_Pin|M29_Pin|M28_Pin
 80004d8:	2380      	movs	r3, #128	; 0x80
 80004da:	33ff      	adds	r3, #255	; 0xff
 80004dc:	4849      	ldr	r0, [pc, #292]	; (8000604 <MX_GPIO_Init+0x1c8>)
 80004de:	2200      	movs	r2, #0
 80004e0:	0019      	movs	r1, r3
 80004e2:	f000 ff3f 	bl	8001364 <HAL_GPIO_WritePin>
                          |H11_Pin|M27_Pin|M26_Pin|M25_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : M23_Pin H9_Pin M22_Pin M21_Pin
                           M15_Pin M14_Pin M6_Pin H2_Pin
                           M0_Pin M1_Pin M24_Pin */
  GPIO_InitStruct.Pin = M23_Pin|H9_Pin|M22_Pin|M21_Pin
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	4a41      	ldr	r2, [pc, #260]	; (80005f0 <MX_GPIO_Init+0x1b4>)
 80004ea:	601a      	str	r2, [r3, #0]
                          |M15_Pin|M14_Pin|M6_Pin|H2_Pin
                          |M0_Pin|M1_Pin|M24_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	2201      	movs	r2, #1
 80004f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	4a3c      	ldr	r2, [pc, #240]	; (80005f4 <MX_GPIO_Init+0x1b8>)
 8000502:	0019      	movs	r1, r3
 8000504:	0010      	movs	r0, r2
 8000506:	f000 fdc9 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_Pin */
  GPIO_InitStruct.Pin = TOUCH_Pin;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2202      	movs	r2, #2
 800050e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000510:	193b      	adds	r3, r7, r4
 8000512:	4a3d      	ldr	r2, [pc, #244]	; (8000608 <MX_GPIO_Init+0x1cc>)
 8000514:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000516:	193b      	adds	r3, r7, r4
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TOUCH_GPIO_Port, &GPIO_InitStruct);
 800051c:	193b      	adds	r3, r7, r4
 800051e:	4a35      	ldr	r2, [pc, #212]	; (80005f4 <MX_GPIO_Init+0x1b8>)
 8000520:	0019      	movs	r1, r3
 8000522:	0010      	movs	r0, r2
 8000524:	f000 fdba 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : M20_Pin H8_Pin M19_Pin M18_Pin
                           H7_Pin M17_Pin M16_Pin H6_Pin
                           H3_Pin M7_Pin M4_Pin M3_Pin
                           H1_Pin H0_Pin */
  GPIO_InitStruct.Pin = M20_Pin|H8_Pin|M19_Pin|M18_Pin
 8000528:	193b      	adds	r3, r7, r4
 800052a:	4a33      	ldr	r2, [pc, #204]	; (80005f8 <MX_GPIO_Init+0x1bc>)
 800052c:	601a      	str	r2, [r3, #0]
                          |H7_Pin|M17_Pin|M16_Pin|H6_Pin
                          |H3_Pin|M7_Pin|M4_Pin|M3_Pin
                          |H1_Pin|H0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052e:	193b      	adds	r3, r7, r4
 8000530:	2201      	movs	r2, #1
 8000532:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	193b      	adds	r3, r7, r4
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	193b      	adds	r3, r7, r4
 800053c:	2200      	movs	r2, #0
 800053e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000540:	193a      	adds	r2, r7, r4
 8000542:	23a0      	movs	r3, #160	; 0xa0
 8000544:	05db      	lsls	r3, r3, #23
 8000546:	0011      	movs	r1, r2
 8000548:	0018      	movs	r0, r3
 800054a:	f000 fda7 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : M13_Pin H5_Pin M12_Pin M11_Pin
                           M10_Pin H4_Pin M9_Pin M8_Pin
                           H10_Pin WORK_Pin */
  GPIO_InitStruct.Pin = M13_Pin|H5_Pin|M12_Pin|M11_Pin
 800054e:	0021      	movs	r1, r4
 8000550:	187b      	adds	r3, r7, r1
 8000552:	4a2a      	ldr	r2, [pc, #168]	; (80005fc <MX_GPIO_Init+0x1c0>)
 8000554:	601a      	str	r2, [r3, #0]
                          |M10_Pin|H4_Pin|M9_Pin|M8_Pin
                          |H10_Pin|WORK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000556:	187b      	adds	r3, r7, r1
 8000558:	2201      	movs	r2, #1
 800055a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000568:	000c      	movs	r4, r1
 800056a:	187b      	adds	r3, r7, r1
 800056c:	4a24      	ldr	r2, [pc, #144]	; (8000600 <MX_GPIO_Init+0x1c4>)
 800056e:	0019      	movs	r1, r3
 8000570:	0010      	movs	r0, r2
 8000572:	f000 fd93 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pin : SET_Pin */
  GPIO_InitStruct.Pin = SET_Pin;
 8000576:	0021      	movs	r1, r4
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2280      	movs	r2, #128	; 0x80
 800057c:	0212      	lsls	r2, r2, #8
 800057e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	4a22      	ldr	r2, [pc, #136]	; (800060c <MX_GPIO_Init+0x1d0>)
 8000584:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SET_GPIO_Port, &GPIO_InitStruct);
 800058c:	000c      	movs	r4, r1
 800058e:	187b      	adds	r3, r7, r1
 8000590:	4a1b      	ldr	r2, [pc, #108]	; (8000600 <MX_GPIO_Init+0x1c4>)
 8000592:	0019      	movs	r1, r3
 8000594:	0010      	movs	r0, r2
 8000596:	f000 fd81 	bl	800109c <HAL_GPIO_Init>

  /*Configure GPIO pins : M5_Pin M2_Pin M29_Pin M28_Pin
                           H11_Pin M27_Pin M26_Pin M25_Pin */
  GPIO_InitStruct.Pin = M5_Pin|M2_Pin|M29_Pin|M28_Pin
 800059a:	0021      	movs	r1, r4
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	32ff      	adds	r2, #255	; 0xff
 80005a2:	601a      	str	r2, [r3, #0]
                          |H11_Pin|M27_Pin|M26_Pin|M25_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2201      	movs	r2, #1
 80005a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	4a12      	ldr	r2, [pc, #72]	; (8000604 <MX_GPIO_Init+0x1c8>)
 80005ba:	0019      	movs	r1, r3
 80005bc:	0010      	movs	r0, r2
 80005be:	f000 fd6d 	bl	800109c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	2005      	movs	r0, #5
 80005c8:	f000 fd36 	bl	8001038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80005cc:	2005      	movs	r0, #5
 80005ce:	f000 fd48 	bl	8001062 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2007      	movs	r0, #7
 80005d8:	f000 fd2e 	bl	8001038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005dc:	2007      	movs	r0, #7
 80005de:	f000 fd40 	bl	8001062 <HAL_NVIC_EnableIRQ>

}
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b00b      	add	sp, #44	; 0x2c
 80005e8:	bd90      	pop	{r4, r7, pc}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40021000 	.word	0x40021000
 80005f0:	00001ffc 	.word	0x00001ffc
 80005f4:	50000800 	.word	0x50000800
 80005f8:	00009fff 	.word	0x00009fff
 80005fc:	00007c1f 	.word	0x00007c1f
 8000600:	50000400 	.word	0x50000400
 8000604:	50000c00 	.word	0x50000c00
 8000608:	10310000 	.word	0x10310000
 800060c:	10110000 	.word	0x10110000

08000610 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000614:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000616:	e7fe      	b.n	8000616 <Error_Handler+0x6>

08000618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <HAL_MspInit+0x4c>)
 8000620:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <HAL_MspInit+0x4c>)
 8000624:	2101      	movs	r1, #1
 8000626:	430a      	orrs	r2, r1
 8000628:	641a      	str	r2, [r3, #64]	; 0x40
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <HAL_MspInit+0x4c>)
 800062c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062e:	2201      	movs	r2, #1
 8000630:	4013      	ands	r3, r2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <HAL_MspInit+0x4c>)
 8000638:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <HAL_MspInit+0x4c>)
 800063c:	2180      	movs	r1, #128	; 0x80
 800063e:	0549      	lsls	r1, r1, #21
 8000640:	430a      	orrs	r2, r1
 8000642:	63da      	str	r2, [r3, #60]	; 0x3c
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <HAL_MspInit+0x4c>)
 8000646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	055b      	lsls	r3, r3, #21
 800064c:	4013      	ands	r3, r2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000652:	23c0      	movs	r3, #192	; 0xc0
 8000654:	00db      	lsls	r3, r3, #3
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fc2c 	bl	8000eb4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	b002      	add	sp, #8
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40021000 	.word	0x40021000

08000668 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a0d      	ldr	r2, [pc, #52]	; (80006ac <HAL_RTC_MspInit+0x44>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d114      	bne.n	80006a4 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800067a:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <HAL_RTC_MspInit+0x48>)
 800067c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <HAL_RTC_MspInit+0x48>)
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	0209      	lsls	r1, r1, #8
 8000684:	430a      	orrs	r2, r1
 8000686:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <HAL_RTC_MspInit+0x48>)
 800068a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <HAL_RTC_MspInit+0x48>)
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	00c9      	lsls	r1, r1, #3
 8000692:	430a      	orrs	r2, r1
 8000694:	63da      	str	r2, [r3, #60]	; 0x3c
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_RTC_MspInit+0x48>)
 8000698:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	4013      	ands	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80006a4:	46c0      	nop			; (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	b004      	add	sp, #16
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40002800 	.word	0x40002800
 80006b0:	40021000 	.word	0x40021000

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <NMI_Handler+0x4>

080006ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006be:	e7fe      	b.n	80006be <HardFault_Handler+0x4>

080006c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 fbae 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	46c0      	nop			; (mov r8, r8)
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80006e6:	2002      	movs	r0, #2
 80006e8:	f000 fe5a 	bl	80013a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80006f6:	2380      	movs	r3, #128	; 0x80
 80006f8:	021b      	lsls	r3, r3, #8
 80006fa:	0018      	movs	r0, r3
 80006fc:	f000 fe50 	bl	80013a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
	...

08000708 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <SystemInit+0x14>)
 800070e:	2280      	movs	r2, #128	; 0x80
 8000710:	0512      	lsls	r2, r2, #20
 8000712:	609a      	str	r2, [r3, #8]
#endif
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000722:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000724:	f7ff fff0 	bl	8000708 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000728:	480c      	ldr	r0, [pc, #48]	; (800075c <LoopForever+0x6>)
  ldr r1, =_edata
 800072a:	490d      	ldr	r1, [pc, #52]	; (8000760 <LoopForever+0xa>)
  ldr r2, =_sidata
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <LoopForever+0xe>)
  movs r3, #0
 800072e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000730:	e002      	b.n	8000738 <LoopCopyDataInit>

08000732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000736:	3304      	adds	r3, #4

08000738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800073a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800073c:	d3f9      	bcc.n	8000732 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000740:	4c0a      	ldr	r4, [pc, #40]	; (800076c <LoopForever+0x16>)
  movs r3, #0
 8000742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000744:	e001      	b.n	800074a <LoopFillZerobss>

08000746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000748:	3204      	adds	r2, #4

0800074a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800074a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800074c:	d3fb      	bcc.n	8000746 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800074e:	f002 f81d 	bl	800278c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000752:	f7ff fd61 	bl	8000218 <main>

08000756 <LoopForever>:

LoopForever:
  b LoopForever
 8000756:	e7fe      	b.n	8000756 <LoopForever>
  ldr   r0, =_estack
 8000758:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800075c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000760:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000764:	080028ec 	.word	0x080028ec
  ldr r2, =_sbss
 8000768:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800076c:	2000007c 	.word	0x2000007c

08000770 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000770:	e7fe      	b.n	8000770 <ADC1_IRQHandler>

08000772 <displayShowTime>:
 *      Author: bartosz
 */

#include "display.h"

void displayShowTime(uint8_t hours, uint8_t minutes, uint8_t timeH, uint8_t timeM){
 8000772:	b5b0      	push	{r4, r5, r7, lr}
 8000774:	b084      	sub	sp, #16
 8000776:	af00      	add	r7, sp, #0
 8000778:	0005      	movs	r5, r0
 800077a:	000c      	movs	r4, r1
 800077c:	0010      	movs	r0, r2
 800077e:	0019      	movs	r1, r3
 8000780:	1dfb      	adds	r3, r7, #7
 8000782:	1c2a      	adds	r2, r5, #0
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	1dbb      	adds	r3, r7, #6
 8000788:	1c22      	adds	r2, r4, #0
 800078a:	701a      	strb	r2, [r3, #0]
 800078c:	1d7b      	adds	r3, r7, #5
 800078e:	1c02      	adds	r2, r0, #0
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	1d3b      	adds	r3, r7, #4
 8000794:	1c0a      	adds	r2, r1, #0
 8000796:	701a      	strb	r2, [r3, #0]

	displaySplashMinutes(4);
 8000798:	2004      	movs	r0, #4
 800079a:	f000 f885 	bl	80008a8 <displaySplashMinutes>

	for (uint8_t i = 0; i < (minutes/2)+1; i++) {
 800079e:	230f      	movs	r3, #15
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
 80007a6:	e010      	b.n	80007ca <displayShowTime+0x58>
			displayTurnMinutesLED(i, 1);
 80007a8:	240f      	movs	r4, #15
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2101      	movs	r1, #1
 80007b0:	0018      	movs	r0, r3
 80007b2:	f000 f943 	bl	8000a3c <displayTurnMinutesLED>
			HAL_Delay(timeM);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	0018      	movs	r0, r3
 80007bc:	f000 fb58 	bl	8000e70 <HAL_Delay>
	for (uint8_t i = 0; i < (minutes/2)+1; i++) {
 80007c0:	193b      	adds	r3, r7, r4
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	3201      	adds	r2, #1
 80007c8:	701a      	strb	r2, [r3, #0]
 80007ca:	230f      	movs	r3, #15
 80007cc:	18fb      	adds	r3, r7, r3
 80007ce:	781a      	ldrb	r2, [r3, #0]
 80007d0:	1dbb      	adds	r3, r7, #6
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	3301      	adds	r3, #1
 80007da:	429a      	cmp	r2, r3
 80007dc:	dbe4      	blt.n	80007a8 <displayShowTime+0x36>
		}

//	displaySplashHours(10);

	for (uint8_t i = 0; i < hours+1; i++) {
 80007de:	230e      	movs	r3, #14
 80007e0:	18fb      	adds	r3, r7, r3
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
 80007e6:	e010      	b.n	800080a <displayShowTime+0x98>
				displayTurnHoursLED(i, 1);
 80007e8:	240e      	movs	r4, #14
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2101      	movs	r1, #1
 80007f0:	0018      	movs	r0, r3
 80007f2:	f000 f899 	bl	8000928 <displayTurnHoursLED>
				HAL_Delay(timeH);
 80007f6:	1d7b      	adds	r3, r7, #5
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 fb38 	bl	8000e70 <HAL_Delay>
	for (uint8_t i = 0; i < hours+1; i++) {
 8000800:	193b      	adds	r3, r7, r4
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	193b      	adds	r3, r7, r4
 8000806:	3201      	adds	r2, #1
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	230e      	movs	r3, #14
 800080c:	18fb      	adds	r3, r7, r3
 800080e:	781a      	ldrb	r2, [r3, #0]
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	429a      	cmp	r2, r3
 8000818:	dbe6      	blt.n	80007e8 <displayShowTime+0x76>
			}

	HAL_Delay(1200);
 800081a:	2396      	movs	r3, #150	; 0x96
 800081c:	00db      	lsls	r3, r3, #3
 800081e:	0018      	movs	r0, r3
 8000820:	f000 fb26 	bl	8000e70 <HAL_Delay>

	for (uint8_t i = 0; i < (minutes/2)+1; i++) {
 8000824:	230d      	movs	r3, #13
 8000826:	18fb      	adds	r3, r7, r3
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	e010      	b.n	8000850 <displayShowTime+0xde>
			displayTurnMinutesLED(i, 0);
 800082e:	240d      	movs	r4, #13
 8000830:	193b      	adds	r3, r7, r4
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	2100      	movs	r1, #0
 8000836:	0018      	movs	r0, r3
 8000838:	f000 f900 	bl	8000a3c <displayTurnMinutesLED>
			HAL_Delay(timeM);
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	0018      	movs	r0, r3
 8000842:	f000 fb15 	bl	8000e70 <HAL_Delay>
	for (uint8_t i = 0; i < (minutes/2)+1; i++) {
 8000846:	193b      	adds	r3, r7, r4
 8000848:	781a      	ldrb	r2, [r3, #0]
 800084a:	193b      	adds	r3, r7, r4
 800084c:	3201      	adds	r2, #1
 800084e:	701a      	strb	r2, [r3, #0]
 8000850:	230d      	movs	r3, #13
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	781a      	ldrb	r2, [r3, #0]
 8000856:	1dbb      	adds	r3, r7, #6
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	085b      	lsrs	r3, r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	3301      	adds	r3, #1
 8000860:	429a      	cmp	r2, r3
 8000862:	dbe4      	blt.n	800082e <displayShowTime+0xbc>
		}

	for (uint8_t i = 0; i < hours+1; i++) {
 8000864:	230c      	movs	r3, #12
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
 800086c:	e010      	b.n	8000890 <displayShowTime+0x11e>
				displayTurnHoursLED(i, 0);
 800086e:	240c      	movs	r4, #12
 8000870:	193b      	adds	r3, r7, r4
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2100      	movs	r1, #0
 8000876:	0018      	movs	r0, r3
 8000878:	f000 f856 	bl	8000928 <displayTurnHoursLED>
				HAL_Delay(timeH);
 800087c:	1d7b      	adds	r3, r7, #5
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	0018      	movs	r0, r3
 8000882:	f000 faf5 	bl	8000e70 <HAL_Delay>
	for (uint8_t i = 0; i < hours+1; i++) {
 8000886:	193b      	adds	r3, r7, r4
 8000888:	781a      	ldrb	r2, [r3, #0]
 800088a:	193b      	adds	r3, r7, r4
 800088c:	3201      	adds	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
 8000890:	230c      	movs	r3, #12
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	3301      	adds	r3, #1
 800089c:	429a      	cmp	r2, r3
 800089e:	dbe6      	blt.n	800086e <displayShowTime+0xfc>
			}
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b004      	add	sp, #16
 80008a6:	bdb0      	pop	{r4, r5, r7, pc}

080008a8 <displaySplashMinutes>:


void displaySplashMinutes(uint8_t time) {
 80008a8:	b590      	push	{r4, r7, lr}
 80008aa:	b085      	sub	sp, #20
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	0002      	movs	r2, r0
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 30; i++) {
 80008b4:	230f      	movs	r3, #15
 80008b6:	18fb      	adds	r3, r7, r3
 80008b8:	2200      	movs	r2, #0
 80008ba:	701a      	strb	r2, [r3, #0]
 80008bc:	e010      	b.n	80008e0 <displaySplashMinutes+0x38>
		displayTurnMinutesLED(i, 1);
 80008be:	240f      	movs	r4, #15
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	2101      	movs	r1, #1
 80008c6:	0018      	movs	r0, r3
 80008c8:	f000 f8b8 	bl	8000a3c <displayTurnMinutesLED>
		HAL_Delay(time);
 80008cc:	1dfb      	adds	r3, r7, #7
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	0018      	movs	r0, r3
 80008d2:	f000 facd 	bl	8000e70 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++) {
 80008d6:	193b      	adds	r3, r7, r4
 80008d8:	781a      	ldrb	r2, [r3, #0]
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	3201      	adds	r2, #1
 80008de:	701a      	strb	r2, [r3, #0]
 80008e0:	230f      	movs	r3, #15
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b1d      	cmp	r3, #29
 80008e8:	d9e9      	bls.n	80008be <displaySplashMinutes+0x16>
	}

	for (uint8_t i = 0; i < 30; i++) {
 80008ea:	230e      	movs	r3, #14
 80008ec:	18fb      	adds	r3, r7, r3
 80008ee:	2200      	movs	r2, #0
 80008f0:	701a      	strb	r2, [r3, #0]
 80008f2:	e010      	b.n	8000916 <displaySplashMinutes+0x6e>
		displayTurnMinutesLED(i, 0);
 80008f4:	240e      	movs	r4, #14
 80008f6:	193b      	adds	r3, r7, r4
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2100      	movs	r1, #0
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 f89d 	bl	8000a3c <displayTurnMinutesLED>
		HAL_Delay(time);
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fab2 	bl	8000e70 <HAL_Delay>
	for (uint8_t i = 0; i < 30; i++) {
 800090c:	193b      	adds	r3, r7, r4
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	193b      	adds	r3, r7, r4
 8000912:	3201      	adds	r2, #1
 8000914:	701a      	strb	r2, [r3, #0]
 8000916:	230e      	movs	r3, #14
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b1d      	cmp	r3, #29
 800091e:	d9e9      	bls.n	80008f4 <displaySplashMinutes+0x4c>
	}
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b005      	add	sp, #20
 8000926:	bd90      	pop	{r4, r7, pc}

08000928 <displayTurnHoursLED>:
	}
}



void displayTurnHoursLED(uint8_t led, uint8_t state) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	0002      	movs	r2, r0
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	1dbb      	adds	r3, r7, #6
 8000936:	1c0a      	adds	r2, r1, #0
 8000938:	701a      	strb	r2, [r3, #0]

	switch (led) {
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b0b      	cmp	r3, #11
 8000940:	d86f      	bhi.n	8000a22 <displayTurnHoursLED+0xfa>
 8000942:	009a      	lsls	r2, r3, #2
 8000944:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <displayTurnHoursLED+0x104>)
 8000946:	18d3      	adds	r3, r2, r3
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	469f      	mov	pc, r3

	case 0:
		HAL_GPIO_WritePin(H0_GPIO_Port, H0_Pin, state);
 800094c:	1dbb      	adds	r3, r7, #6
 800094e:	781a      	ldrb	r2, [r3, #0]
 8000950:	2380      	movs	r3, #128	; 0x80
 8000952:	0219      	lsls	r1, r3, #8
 8000954:	23a0      	movs	r3, #160	; 0xa0
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	0018      	movs	r0, r3
 800095a:	f000 fd03 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 800095e:	e060      	b.n	8000a22 <displayTurnHoursLED+0xfa>
	case 1:
		HAL_GPIO_WritePin(H1_GPIO_Port, H1_Pin, state);
 8000960:	1dbb      	adds	r3, r7, #6
 8000962:	781a      	ldrb	r2, [r3, #0]
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	0159      	lsls	r1, r3, #5
 8000968:	23a0      	movs	r3, #160	; 0xa0
 800096a:	05db      	lsls	r3, r3, #23
 800096c:	0018      	movs	r0, r3
 800096e:	f000 fcf9 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000972:	e056      	b.n	8000a22 <displayTurnHoursLED+0xfa>
	case 2:
		HAL_GPIO_WritePin(H2_GPIO_Port, H2_Pin, state);
 8000974:	1dbb      	adds	r3, r7, #6
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	482d      	ldr	r0, [pc, #180]	; (8000a30 <displayTurnHoursLED+0x108>)
 800097a:	001a      	movs	r2, r3
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	f000 fcf1 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000982:	e04e      	b.n	8000a22 <displayTurnHoursLED+0xfa>
	case 3:
		HAL_GPIO_WritePin(H3_GPIO_Port, H3_Pin, state);
 8000984:	1dbb      	adds	r3, r7, #6
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	0059      	lsls	r1, r3, #1
 800098c:	23a0      	movs	r3, #160	; 0xa0
 800098e:	05db      	lsls	r3, r3, #23
 8000990:	0018      	movs	r0, r3
 8000992:	f000 fce7 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000996:	e044      	b.n	8000a22 <displayTurnHoursLED+0xfa>
	case 4:
		HAL_GPIO_WritePin(H4_GPIO_Port, H4_Pin, state);
 8000998:	1dbb      	adds	r3, r7, #6
 800099a:	781a      	ldrb	r2, [r3, #0]
 800099c:	2380      	movs	r3, #128	; 0x80
 800099e:	015b      	lsls	r3, r3, #5
 80009a0:	4824      	ldr	r0, [pc, #144]	; (8000a34 <displayTurnHoursLED+0x10c>)
 80009a2:	0019      	movs	r1, r3
 80009a4:	f000 fcde 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 80009a8:	e03b      	b.n	8000a22 <displayTurnHoursLED+0xfa>
	case 5:
		HAL_GPIO_WritePin(H5_GPIO_Port, H5_Pin, state);
 80009aa:	1dbb      	adds	r3, r7, #6
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4821      	ldr	r0, [pc, #132]	; (8000a34 <displayTurnHoursLED+0x10c>)
 80009b0:	001a      	movs	r2, r3
 80009b2:	2102      	movs	r1, #2
 80009b4:	f000 fcd6 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 80009b8:	e033      	b.n	8000a22 <displayTurnHoursLED+0xfa>
	case 6:
		HAL_GPIO_WritePin(H6_GPIO_Port, H6_Pin, state);
 80009ba:	1dbb      	adds	r3, r7, #6
 80009bc:	781a      	ldrb	r2, [r3, #0]
 80009be:	23a0      	movs	r3, #160	; 0xa0
 80009c0:	05db      	lsls	r3, r3, #23
 80009c2:	2180      	movs	r1, #128	; 0x80
 80009c4:	0018      	movs	r0, r3
 80009c6:	f000 fccd 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 80009ca:	e02a      	b.n	8000a22 <displayTurnHoursLED+0xfa>
	case 7:
		HAL_GPIO_WritePin(H7_GPIO_Port, H7_Pin, state);
 80009cc:	1dbb      	adds	r3, r7, #6
 80009ce:	781a      	ldrb	r2, [r3, #0]
 80009d0:	23a0      	movs	r3, #160	; 0xa0
 80009d2:	05db      	lsls	r3, r3, #23
 80009d4:	2110      	movs	r1, #16
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fcc4 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 80009dc:	e021      	b.n	8000a22 <displayTurnHoursLED+0xfa>
	case 8:
		HAL_GPIO_WritePin(H8_GPIO_Port, H8_Pin, state);
 80009de:	1dbb      	adds	r3, r7, #6
 80009e0:	781a      	ldrb	r2, [r3, #0]
 80009e2:	23a0      	movs	r3, #160	; 0xa0
 80009e4:	05db      	lsls	r3, r3, #23
 80009e6:	2102      	movs	r1, #2
 80009e8:	0018      	movs	r0, r3
 80009ea:	f000 fcbb 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 80009ee:	e018      	b.n	8000a22 <displayTurnHoursLED+0xfa>
	case 9:
		HAL_GPIO_WritePin(H9_GPIO_Port, H9_Pin, state);
 80009f0:	1dbb      	adds	r3, r7, #6
 80009f2:	781a      	ldrb	r2, [r3, #0]
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	015b      	lsls	r3, r3, #5
 80009f8:	480d      	ldr	r0, [pc, #52]	; (8000a30 <displayTurnHoursLED+0x108>)
 80009fa:	0019      	movs	r1, r3
 80009fc:	f000 fcb2 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000a00:	e00f      	b.n	8000a22 <displayTurnHoursLED+0xfa>
	case 10:
		HAL_GPIO_WritePin(H10_GPIO_Port, H10_Pin, state);
 8000a02:	1dbb      	adds	r3, r7, #6
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	480b      	ldr	r0, [pc, #44]	; (8000a34 <displayTurnHoursLED+0x10c>)
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	f000 fcaa 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000a10:	e007      	b.n	8000a22 <displayTurnHoursLED+0xfa>
	case 11:
		HAL_GPIO_WritePin(H11_GPIO_Port, H11_Pin, state);
 8000a12:	1dbb      	adds	r3, r7, #6
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	4808      	ldr	r0, [pc, #32]	; (8000a38 <displayTurnHoursLED+0x110>)
 8000a18:	001a      	movs	r2, r3
 8000a1a:	2108      	movs	r1, #8
 8000a1c:	f000 fca2 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000a20:	46c0      	nop			; (mov r8, r8)

	}

}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	0800283c 	.word	0x0800283c
 8000a30:	50000800 	.word	0x50000800
 8000a34:	50000400 	.word	0x50000400
 8000a38:	50000c00 	.word	0x50000c00

08000a3c <displayTurnMinutesLED>:

void displayTurnMinutesLED(uint8_t led, uint8_t state) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	0002      	movs	r2, r0
 8000a44:	1dfb      	adds	r3, r7, #7
 8000a46:	701a      	strb	r2, [r3, #0]
 8000a48:	1dbb      	adds	r3, r7, #6
 8000a4a:	1c0a      	adds	r2, r1, #0
 8000a4c:	701a      	strb	r2, [r3, #0]

	switch (led) {
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b1d      	cmp	r3, #29
 8000a54:	d900      	bls.n	8000a58 <displayTurnMinutesLED+0x1c>
 8000a56:	e108      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
 8000a58:	009a      	lsls	r2, r3, #2
 8000a5a:	4b86      	ldr	r3, [pc, #536]	; (8000c74 <displayTurnMinutesLED+0x238>)
 8000a5c:	18d3      	adds	r3, r2, r3
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	469f      	mov	pc, r3

	case 0:
		HAL_GPIO_WritePin(M0_GPIO_Port, M0_Pin, state);
 8000a62:	1dbb      	adds	r3, r7, #6
 8000a64:	781a      	ldrb	r2, [r3, #0]
 8000a66:	2380      	movs	r3, #128	; 0x80
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	4883      	ldr	r0, [pc, #524]	; (8000c78 <displayTurnMinutesLED+0x23c>)
 8000a6c:	0019      	movs	r1, r3
 8000a6e:	f000 fc79 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000a72:	e0fa      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 1:
		HAL_GPIO_WritePin(M1_GPIO_Port, M1_Pin, state);
 8000a74:	1dbb      	adds	r3, r7, #6
 8000a76:	781a      	ldrb	r2, [r3, #0]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	487e      	ldr	r0, [pc, #504]	; (8000c78 <displayTurnMinutesLED+0x23c>)
 8000a7e:	0019      	movs	r1, r3
 8000a80:	f000 fc70 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000a84:	e0f1      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 2:
		HAL_GPIO_WritePin(M2_GPIO_Port, M2_Pin, state);
 8000a86:	1dbb      	adds	r3, r7, #6
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	487c      	ldr	r0, [pc, #496]	; (8000c7c <displayTurnMinutesLED+0x240>)
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2101      	movs	r1, #1
 8000a90:	f000 fc68 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000a94:	e0e9      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 3:
		HAL_GPIO_WritePin(M3_GPIO_Port, M3_Pin, state);
 8000a96:	1dbb      	adds	r3, r7, #6
 8000a98:	781a      	ldrb	r2, [r3, #0]
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	0119      	lsls	r1, r3, #4
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f000 fc5e 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000aa8:	e0df      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 4:
		HAL_GPIO_WritePin(M4_GPIO_Port, M4_Pin, state);
 8000aaa:	1dbb      	adds	r3, r7, #6
 8000aac:	781a      	ldrb	r2, [r3, #0]
 8000aae:	2380      	movs	r3, #128	; 0x80
 8000ab0:	00d9      	lsls	r1, r3, #3
 8000ab2:	23a0      	movs	r3, #160	; 0xa0
 8000ab4:	05db      	lsls	r3, r3, #23
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 fc54 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000abc:	e0d5      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 5:
		HAL_GPIO_WritePin(M5_GPIO_Port, M5_Pin, state);
 8000abe:	1dbb      	adds	r3, r7, #6
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	486d      	ldr	r0, [pc, #436]	; (8000c7c <displayTurnMinutesLED+0x240>)
 8000ac8:	0019      	movs	r1, r3
 8000aca:	f000 fc4b 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000ace:	e0cc      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 6:
		HAL_GPIO_WritePin(M6_GPIO_Port, M6_Pin, state);
 8000ad0:	1dbb      	adds	r3, r7, #6
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	4868      	ldr	r0, [pc, #416]	; (8000c78 <displayTurnMinutesLED+0x23c>)
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2140      	movs	r1, #64	; 0x40
 8000ada:	f000 fc43 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000ade:	e0c4      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 7:
		HAL_GPIO_WritePin(M7_GPIO_Port, M7_Pin, state);
 8000ae0:	1dbb      	adds	r3, r7, #6
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	2380      	movs	r3, #128	; 0x80
 8000ae6:	0099      	lsls	r1, r3, #2
 8000ae8:	23a0      	movs	r3, #160	; 0xa0
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 fc39 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000af2:	e0ba      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 8:
		HAL_GPIO_WritePin(M8_GPIO_Port, M8_Pin, state);
 8000af4:	1dbb      	adds	r3, r7, #6
 8000af6:	781a      	ldrb	r2, [r3, #0]
 8000af8:	2380      	movs	r3, #128	; 0x80
 8000afa:	01db      	lsls	r3, r3, #7
 8000afc:	4860      	ldr	r0, [pc, #384]	; (8000c80 <displayTurnMinutesLED+0x244>)
 8000afe:	0019      	movs	r1, r3
 8000b00:	f000 fc30 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000b04:	e0b1      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 9:
		HAL_GPIO_WritePin(M9_GPIO_Port, M9_Pin, state);
 8000b06:	1dbb      	adds	r3, r7, #6
 8000b08:	781a      	ldrb	r2, [r3, #0]
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	019b      	lsls	r3, r3, #6
 8000b0e:	485c      	ldr	r0, [pc, #368]	; (8000c80 <displayTurnMinutesLED+0x244>)
 8000b10:	0019      	movs	r1, r3
 8000b12:	f000 fc27 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000b16:	e0a8      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 10:
		HAL_GPIO_WritePin(M10_GPIO_Port, M10_Pin, state);
 8000b18:	1dbb      	adds	r3, r7, #6
 8000b1a:	781a      	ldrb	r2, [r3, #0]
 8000b1c:	2380      	movs	r3, #128	; 0x80
 8000b1e:	011b      	lsls	r3, r3, #4
 8000b20:	4857      	ldr	r0, [pc, #348]	; (8000c80 <displayTurnMinutesLED+0x244>)
 8000b22:	0019      	movs	r1, r3
 8000b24:	f000 fc1e 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000b28:	e09f      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 11:
		HAL_GPIO_WritePin(M11_GPIO_Port, M11_Pin, state);
 8000b2a:	1dbb      	adds	r3, r7, #6
 8000b2c:	781a      	ldrb	r2, [r3, #0]
 8000b2e:	2380      	movs	r3, #128	; 0x80
 8000b30:	00db      	lsls	r3, r3, #3
 8000b32:	4853      	ldr	r0, [pc, #332]	; (8000c80 <displayTurnMinutesLED+0x244>)
 8000b34:	0019      	movs	r1, r3
 8000b36:	f000 fc15 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000b3a:	e096      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 12:
		HAL_GPIO_WritePin(M12_GPIO_Port, M12_Pin, state);
 8000b3c:	1dbb      	adds	r3, r7, #6
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	484f      	ldr	r0, [pc, #316]	; (8000c80 <displayTurnMinutesLED+0x244>)
 8000b42:	001a      	movs	r2, r3
 8000b44:	2104      	movs	r1, #4
 8000b46:	f000 fc0d 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000b4a:	e08e      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 13:
		HAL_GPIO_WritePin(M13_GPIO_Port, M13_Pin, state);
 8000b4c:	1dbb      	adds	r3, r7, #6
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	484b      	ldr	r0, [pc, #300]	; (8000c80 <displayTurnMinutesLED+0x244>)
 8000b52:	001a      	movs	r2, r3
 8000b54:	2101      	movs	r1, #1
 8000b56:	f000 fc05 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000b5a:	e086      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 14:
		HAL_GPIO_WritePin(M14_GPIO_Port, M14_Pin, state);
 8000b5c:	1dbb      	adds	r3, r7, #6
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4845      	ldr	r0, [pc, #276]	; (8000c78 <displayTurnMinutesLED+0x23c>)
 8000b62:	001a      	movs	r2, r3
 8000b64:	2120      	movs	r1, #32
 8000b66:	f000 fbfd 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000b6a:	e07e      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 15:
		HAL_GPIO_WritePin(M15_GPIO_Port, M15_Pin, state);
 8000b6c:	1dbb      	adds	r3, r7, #6
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4841      	ldr	r0, [pc, #260]	; (8000c78 <displayTurnMinutesLED+0x23c>)
 8000b72:	001a      	movs	r2, r3
 8000b74:	2110      	movs	r1, #16
 8000b76:	f000 fbf5 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000b7a:	e076      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 16:
		HAL_GPIO_WritePin(M16_GPIO_Port, M16_Pin, state);
 8000b7c:	1dbb      	adds	r3, r7, #6
 8000b7e:	781a      	ldrb	r2, [r3, #0]
 8000b80:	23a0      	movs	r3, #160	; 0xa0
 8000b82:	05db      	lsls	r3, r3, #23
 8000b84:	2140      	movs	r1, #64	; 0x40
 8000b86:	0018      	movs	r0, r3
 8000b88:	f000 fbec 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000b8c:	e06d      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 17:
		HAL_GPIO_WritePin(M17_GPIO_Port, M17_Pin, state);
 8000b8e:	1dbb      	adds	r3, r7, #6
 8000b90:	781a      	ldrb	r2, [r3, #0]
 8000b92:	23a0      	movs	r3, #160	; 0xa0
 8000b94:	05db      	lsls	r3, r3, #23
 8000b96:	2120      	movs	r1, #32
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f000 fbe3 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000b9e:	e064      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 18:
		HAL_GPIO_WritePin(M18_GPIO_Port, M18_Pin, state);
 8000ba0:	1dbb      	adds	r3, r7, #6
 8000ba2:	781a      	ldrb	r2, [r3, #0]
 8000ba4:	23a0      	movs	r3, #160	; 0xa0
 8000ba6:	05db      	lsls	r3, r3, #23
 8000ba8:	2108      	movs	r1, #8
 8000baa:	0018      	movs	r0, r3
 8000bac:	f000 fbda 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000bb0:	e05b      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 19:
		HAL_GPIO_WritePin(M19_GPIO_Port, M19_Pin, state);
 8000bb2:	1dbb      	adds	r3, r7, #6
 8000bb4:	781a      	ldrb	r2, [r3, #0]
 8000bb6:	23a0      	movs	r3, #160	; 0xa0
 8000bb8:	05db      	lsls	r3, r3, #23
 8000bba:	2104      	movs	r1, #4
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 fbd1 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000bc2:	e052      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 20:
		HAL_GPIO_WritePin(M20_GPIO_Port, M20_Pin, state);
 8000bc4:	1dbb      	adds	r3, r7, #6
 8000bc6:	781a      	ldrb	r2, [r3, #0]
 8000bc8:	23a0      	movs	r3, #160	; 0xa0
 8000bca:	05db      	lsls	r3, r3, #23
 8000bcc:	2101      	movs	r1, #1
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f000 fbc8 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000bd4:	e049      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 21:
		HAL_GPIO_WritePin(M21_GPIO_Port, M21_Pin, state);
 8000bd6:	1dbb      	adds	r3, r7, #6
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	4827      	ldr	r0, [pc, #156]	; (8000c78 <displayTurnMinutesLED+0x23c>)
 8000bdc:	001a      	movs	r2, r3
 8000bde:	2108      	movs	r1, #8
 8000be0:	f000 fbc0 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000be4:	e041      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 22:
		HAL_GPIO_WritePin(M22_GPIO_Port, M22_Pin, state);
 8000be6:	1dbb      	adds	r3, r7, #6
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	4823      	ldr	r0, [pc, #140]	; (8000c78 <displayTurnMinutesLED+0x23c>)
 8000bec:	001a      	movs	r2, r3
 8000bee:	2104      	movs	r1, #4
 8000bf0:	f000 fbb8 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000bf4:	e039      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 23:
		HAL_GPIO_WritePin(M23_GPIO_Port, M23_Pin, state);
 8000bf6:	1dbb      	adds	r3, r7, #6
 8000bf8:	781a      	ldrb	r2, [r3, #0]
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	011b      	lsls	r3, r3, #4
 8000bfe:	481e      	ldr	r0, [pc, #120]	; (8000c78 <displayTurnMinutesLED+0x23c>)
 8000c00:	0019      	movs	r1, r3
 8000c02:	f000 fbaf 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000c06:	e030      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 24:
		HAL_GPIO_WritePin(M24_GPIO_Port, M24_Pin, state);
 8000c08:	1dbb      	adds	r3, r7, #6
 8000c0a:	781a      	ldrb	r2, [r3, #0]
 8000c0c:	2380      	movs	r3, #128	; 0x80
 8000c0e:	00db      	lsls	r3, r3, #3
 8000c10:	4819      	ldr	r0, [pc, #100]	; (8000c78 <displayTurnMinutesLED+0x23c>)
 8000c12:	0019      	movs	r1, r3
 8000c14:	f000 fba6 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000c18:	e027      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 25:
		HAL_GPIO_WritePin(M25_GPIO_Port, M25_Pin, state);
 8000c1a:	1dbb      	adds	r3, r7, #6
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	4817      	ldr	r0, [pc, #92]	; (8000c7c <displayTurnMinutesLED+0x240>)
 8000c20:	001a      	movs	r2, r3
 8000c22:	2140      	movs	r1, #64	; 0x40
 8000c24:	f000 fb9e 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000c28:	e01f      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 26:
		HAL_GPIO_WritePin(M26_GPIO_Port, M26_Pin, state);
 8000c2a:	1dbb      	adds	r3, r7, #6
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	4813      	ldr	r0, [pc, #76]	; (8000c7c <displayTurnMinutesLED+0x240>)
 8000c30:	001a      	movs	r2, r3
 8000c32:	2120      	movs	r1, #32
 8000c34:	f000 fb96 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000c38:	e017      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 27:
		HAL_GPIO_WritePin(M27_GPIO_Port, M27_Pin, state);
 8000c3a:	1dbb      	adds	r3, r7, #6
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	480f      	ldr	r0, [pc, #60]	; (8000c7c <displayTurnMinutesLED+0x240>)
 8000c40:	001a      	movs	r2, r3
 8000c42:	2110      	movs	r1, #16
 8000c44:	f000 fb8e 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000c48:	e00f      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 28:
		HAL_GPIO_WritePin(M28_GPIO_Port, M28_Pin, state);
 8000c4a:	1dbb      	adds	r3, r7, #6
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	480b      	ldr	r0, [pc, #44]	; (8000c7c <displayTurnMinutesLED+0x240>)
 8000c50:	001a      	movs	r2, r3
 8000c52:	2104      	movs	r1, #4
 8000c54:	f000 fb86 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000c58:	e007      	b.n	8000c6a <displayTurnMinutesLED+0x22e>
	case 29:
		HAL_GPIO_WritePin(M29_GPIO_Port, M29_Pin, state);
 8000c5a:	1dbb      	adds	r3, r7, #6
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	4807      	ldr	r0, [pc, #28]	; (8000c7c <displayTurnMinutesLED+0x240>)
 8000c60:	001a      	movs	r2, r3
 8000c62:	2102      	movs	r1, #2
 8000c64:	f000 fb7e 	bl	8001364 <HAL_GPIO_WritePin>
		break;
 8000c68:	46c0      	nop			; (mov r8, r8)

	}

}
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b002      	add	sp, #8
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	0800286c 	.word	0x0800286c
 8000c78:	50000800 	.word	0x50000800
 8000c7c:	50000c00 	.word	0x50000c00
 8000c80:	50000400 	.word	0x50000400

08000c84 <extiCallback>:
 */

#include "interrupts.h"
#include "../rtc/rtc.h"

void extiCallback(uint8_t pin) {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	701a      	strb	r2, [r3, #0]

	if(pin == TOUCH_Pin && mode == MODE_NORMAL){
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d107      	bne.n	8000ca8 <extiCallback+0x24>
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <extiCallback+0x2c>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d102      	bne.n	8000ca8 <extiCallback+0x24>
		displayFlag = 1;
 8000ca2:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <extiCallback+0x30>)
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	701a      	strb	r2, [r3, #0]
	}else if(pin == SET_Pin){
		mode = MODE_SETTINGS;
	}

}
 8000ca8:	46c0      	nop			; (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b002      	add	sp, #8
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	2000003d 	.word	0x2000003d
 8000cb4:	2000003c 	.word	0x2000003c

08000cb8 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	1dbb      	adds	r3, r7, #6
 8000cc2:	801a      	strh	r2, [r3, #0]

	extiCallback(GPIO_Pin);
 8000cc4:	1dbb      	adds	r3, r7, #6
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff ffda 	bl	8000c84 <extiCallback>



}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	1dbb      	adds	r3, r7, #6
 8000ce2:	801a      	strh	r2, [r3, #0]

	extiCallback(GPIO_Pin);
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	0018      	movs	r0, r3
 8000cec:	f7ff ffca 	bl	8000c84 <extiCallback>

}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <rtcInit>:
 *      Author: bartosz
 */

#include "rtc.h"

void rtcInit(void) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
//	HAL_RTC_Init(&hrtc);
	mode = MODE_NORMAL
 8000cfc:	4b02      	ldr	r3, [pc, #8]	; (8000d08 <rtcInit+0x10>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
	;

}
 8000d02:	46c0      	nop			; (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000003d 	.word	0x2000003d

08000d0c <rtcGetTime>:

void rtcGetTime() {
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000d10:	490e      	ldr	r1, [pc, #56]	; (8000d4c <rtcGetTime+0x40>)
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <rtcGetTime+0x44>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	0018      	movs	r0, r3
 8000d18:	f001 fb06 	bl	8002328 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000d1c:	490d      	ldr	r1, [pc, #52]	; (8000d54 <rtcGetTime+0x48>)
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <rtcGetTime+0x44>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	0018      	movs	r0, r3
 8000d24:	f001 fbee 	bl	8002504 <HAL_RTC_GetDate>

	hours = sTime.Hours;
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <rtcGetTime+0x40>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b25a      	sxtb	r2, r3
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <rtcGetTime+0x4c>)
 8000d30:	701a      	strb	r2, [r3, #0]
	minutes = sTime.Minutes;
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <rtcGetTime+0x40>)
 8000d34:	785b      	ldrb	r3, [r3, #1]
 8000d36:	b21a      	sxth	r2, r3
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <rtcGetTime+0x50>)
 8000d3a:	801a      	strh	r2, [r3, #0]
	seconds = sTime.Seconds;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <rtcGetTime+0x40>)
 8000d3e:	789b      	ldrb	r3, [r3, #2]
 8000d40:	b25a      	sxtb	r2, r3
 8000d42:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <rtcGetTime+0x54>)
 8000d44:	701a      	strb	r2, [r3, #0]

}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000028 	.word	0x20000028
 8000d50:	20000044 	.word	0x20000044
 8000d54:	20000040 	.word	0x20000040
 8000d58:	20000074 	.word	0x20000074
 8000d5c:	20000072 	.word	0x20000072
 8000d60:	20000070 	.word	0x20000070

08000d64 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_Init+0x3c>)
 8000d72:	681a      	ldr	r2, [r3, #0]
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <HAL_Init+0x3c>)
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	0049      	lsls	r1, r1, #1
 8000d7a:	430a      	orrs	r2, r1
 8000d7c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f000 f810 	bl	8000da4 <HAL_InitTick>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d003      	beq.n	8000d90 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	701a      	strb	r2, [r3, #0]
 8000d8e:	e001      	b.n	8000d94 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fc42 	bl	8000618 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d94:	1dfb      	adds	r3, r7, #7
 8000d96:	781b      	ldrb	r3, [r3, #0]
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40022000 	.word	0x40022000

08000da4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da4:	b590      	push	{r4, r7, lr}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <HAL_InitTick+0x88>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d02b      	beq.n	8000e14 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <HAL_InitTick+0x8c>)
 8000dbe:	681c      	ldr	r4, [r3, #0]
 8000dc0:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <HAL_InitTick+0x88>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	0019      	movs	r1, r3
 8000dc6:	23fa      	movs	r3, #250	; 0xfa
 8000dc8:	0098      	lsls	r0, r3, #2
 8000dca:	f7ff f999 	bl	8000100 <__udivsi3>
 8000dce:	0003      	movs	r3, r0
 8000dd0:	0019      	movs	r1, r3
 8000dd2:	0020      	movs	r0, r4
 8000dd4:	f7ff f994 	bl	8000100 <__udivsi3>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	0018      	movs	r0, r3
 8000ddc:	f000 f951 	bl	8001082 <HAL_SYSTICK_Config>
 8000de0:	1e03      	subs	r3, r0, #0
 8000de2:	d112      	bne.n	8000e0a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b03      	cmp	r3, #3
 8000de8:	d80a      	bhi.n	8000e00 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	2301      	movs	r3, #1
 8000dee:	425b      	negs	r3, r3
 8000df0:	2200      	movs	r2, #0
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 f920 	bl	8001038 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <HAL_InitTick+0x90>)
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e00d      	b.n	8000e1c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000e00:	230f      	movs	r3, #15
 8000e02:	18fb      	adds	r3, r7, r3
 8000e04:	2201      	movs	r2, #1
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e008      	b.n	8000e1c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	2201      	movs	r2, #1
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e003      	b.n	8000e1c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e14:	230f      	movs	r3, #15
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	18fb      	adds	r3, r7, r3
 8000e20:	781b      	ldrb	r3, [r3, #0]
}
 8000e22:	0018      	movs	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	b005      	add	sp, #20
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	20000000 	.word	0x20000000
 8000e34:	20000004 	.word	0x20000004

08000e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <HAL_IncTick+0x1c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	001a      	movs	r2, r3
 8000e42:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x20>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	18d2      	adds	r2, r2, r3
 8000e48:	4b03      	ldr	r3, [pc, #12]	; (8000e58 <HAL_IncTick+0x20>)
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000078 	.word	0x20000078

08000e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e60:	4b02      	ldr	r3, [pc, #8]	; (8000e6c <HAL_GetTick+0x10>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	0018      	movs	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			; (mov r8, r8)
 8000e6c:	20000078 	.word	0x20000078

08000e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff fff0 	bl	8000e5c <HAL_GetTick>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	3301      	adds	r3, #1
 8000e88:	d005      	beq.n	8000e96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_Delay+0x40>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	001a      	movs	r2, r3
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	189b      	adds	r3, r3, r2
 8000e94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	f7ff ffe0 	bl	8000e5c <HAL_GetTick>
 8000e9c:	0002      	movs	r2, r0
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	68fa      	ldr	r2, [r7, #12]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d8f7      	bhi.n	8000e98 <HAL_Delay+0x28>
  {
  }
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	b004      	add	sp, #16
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a06      	ldr	r2, [pc, #24]	; (8000edc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	0019      	movs	r1, r3
 8000ec6:	4b04      	ldr	r3, [pc, #16]	; (8000ed8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	430a      	orrs	r2, r1
 8000ecc:	601a      	str	r2, [r3, #0]
}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	46c0      	nop			; (mov r8, r8)
 8000ed8:	40010000 	.word	0x40010000
 8000edc:	fffff9ff 	.word	0xfffff9ff

08000ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	0002      	movs	r2, r0
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	1dfb      	adds	r3, r7, #7
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	2b7f      	cmp	r3, #127	; 0x7f
 8000ef2:	d809      	bhi.n	8000f08 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ef4:	1dfb      	adds	r3, r7, #7
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	001a      	movs	r2, r3
 8000efa:	231f      	movs	r3, #31
 8000efc:	401a      	ands	r2, r3
 8000efe:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_EnableIRQ+0x30>)
 8000f00:	2101      	movs	r1, #1
 8000f02:	4091      	lsls	r1, r2
 8000f04:	000a      	movs	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b002      	add	sp, #8
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	e000e100 	.word	0xe000e100

08000f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f14:	b590      	push	{r4, r7, lr}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	6039      	str	r1, [r7, #0]
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b7f      	cmp	r3, #127	; 0x7f
 8000f28:	d828      	bhi.n	8000f7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2a:	4a2f      	ldr	r2, [pc, #188]	; (8000fe8 <__NVIC_SetPriority+0xd4>)
 8000f2c:	1dfb      	adds	r3, r7, #7
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	b25b      	sxtb	r3, r3
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	33c0      	adds	r3, #192	; 0xc0
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	589b      	ldr	r3, [r3, r2]
 8000f3a:	1dfa      	adds	r2, r7, #7
 8000f3c:	7812      	ldrb	r2, [r2, #0]
 8000f3e:	0011      	movs	r1, r2
 8000f40:	2203      	movs	r2, #3
 8000f42:	400a      	ands	r2, r1
 8000f44:	00d2      	lsls	r2, r2, #3
 8000f46:	21ff      	movs	r1, #255	; 0xff
 8000f48:	4091      	lsls	r1, r2
 8000f4a:	000a      	movs	r2, r1
 8000f4c:	43d2      	mvns	r2, r2
 8000f4e:	401a      	ands	r2, r3
 8000f50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	019b      	lsls	r3, r3, #6
 8000f56:	22ff      	movs	r2, #255	; 0xff
 8000f58:	401a      	ands	r2, r3
 8000f5a:	1dfb      	adds	r3, r7, #7
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	2303      	movs	r3, #3
 8000f62:	4003      	ands	r3, r0
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f68:	481f      	ldr	r0, [pc, #124]	; (8000fe8 <__NVIC_SetPriority+0xd4>)
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b25b      	sxtb	r3, r3
 8000f70:	089b      	lsrs	r3, r3, #2
 8000f72:	430a      	orrs	r2, r1
 8000f74:	33c0      	adds	r3, #192	; 0xc0
 8000f76:	009b      	lsls	r3, r3, #2
 8000f78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f7a:	e031      	b.n	8000fe0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <__NVIC_SetPriority+0xd8>)
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	0019      	movs	r1, r3
 8000f84:	230f      	movs	r3, #15
 8000f86:	400b      	ands	r3, r1
 8000f88:	3b08      	subs	r3, #8
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	3306      	adds	r3, #6
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	18d3      	adds	r3, r2, r3
 8000f92:	3304      	adds	r3, #4
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	1dfa      	adds	r2, r7, #7
 8000f98:	7812      	ldrb	r2, [r2, #0]
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	400a      	ands	r2, r1
 8000fa0:	00d2      	lsls	r2, r2, #3
 8000fa2:	21ff      	movs	r1, #255	; 0xff
 8000fa4:	4091      	lsls	r1, r2
 8000fa6:	000a      	movs	r2, r1
 8000fa8:	43d2      	mvns	r2, r2
 8000faa:	401a      	ands	r2, r3
 8000fac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	019b      	lsls	r3, r3, #6
 8000fb2:	22ff      	movs	r2, #255	; 0xff
 8000fb4:	401a      	ands	r2, r3
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	0018      	movs	r0, r3
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	4003      	ands	r3, r0
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fc4:	4809      	ldr	r0, [pc, #36]	; (8000fec <__NVIC_SetPriority+0xd8>)
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	001c      	movs	r4, r3
 8000fcc:	230f      	movs	r3, #15
 8000fce:	4023      	ands	r3, r4
 8000fd0:	3b08      	subs	r3, #8
 8000fd2:	089b      	lsrs	r3, r3, #2
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	3306      	adds	r3, #6
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	18c3      	adds	r3, r0, r3
 8000fdc:	3304      	adds	r3, #4
 8000fde:	601a      	str	r2, [r3, #0]
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	b003      	add	sp, #12
 8000fe6:	bd90      	pop	{r4, r7, pc}
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	4a0c      	ldr	r2, [pc, #48]	; (8001030 <SysTick_Config+0x40>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d901      	bls.n	8001006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001002:	2301      	movs	r3, #1
 8001004:	e010      	b.n	8001028 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <SysTick_Config+0x44>)
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	3a01      	subs	r2, #1
 800100c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800100e:	2301      	movs	r3, #1
 8001010:	425b      	negs	r3, r3
 8001012:	2103      	movs	r1, #3
 8001014:	0018      	movs	r0, r3
 8001016:	f7ff ff7d 	bl	8000f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <SysTick_Config+0x44>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001020:	4b04      	ldr	r3, [pc, #16]	; (8001034 <SysTick_Config+0x44>)
 8001022:	2207      	movs	r2, #7
 8001024:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001026:	2300      	movs	r3, #0
}
 8001028:	0018      	movs	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	b002      	add	sp, #8
 800102e:	bd80      	pop	{r7, pc}
 8001030:	00ffffff 	.word	0x00ffffff
 8001034:	e000e010 	.word	0xe000e010

08001038 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	607a      	str	r2, [r7, #4]
 8001042:	210f      	movs	r1, #15
 8001044:	187b      	adds	r3, r7, r1
 8001046:	1c02      	adds	r2, r0, #0
 8001048:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800104a:	68ba      	ldr	r2, [r7, #8]
 800104c:	187b      	adds	r3, r7, r1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b25b      	sxtb	r3, r3
 8001052:	0011      	movs	r1, r2
 8001054:	0018      	movs	r0, r3
 8001056:	f7ff ff5d 	bl	8000f14 <__NVIC_SetPriority>
}
 800105a:	46c0      	nop			; (mov r8, r8)
 800105c:	46bd      	mov	sp, r7
 800105e:	b004      	add	sp, #16
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	0002      	movs	r2, r0
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b25b      	sxtb	r3, r3
 8001074:	0018      	movs	r0, r3
 8001076:	f7ff ff33 	bl	8000ee0 <__NVIC_EnableIRQ>
}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46bd      	mov	sp, r7
 800107e:	b002      	add	sp, #8
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b082      	sub	sp, #8
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff ffaf 	bl	8000ff0 <SysTick_Config>
 8001092:	0003      	movs	r3, r0
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	b002      	add	sp, #8
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010aa:	e147      	b.n	800133c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2101      	movs	r1, #1
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4091      	lsls	r1, r2
 80010b6:	000a      	movs	r2, r1
 80010b8:	4013      	ands	r3, r2
 80010ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d100      	bne.n	80010c4 <HAL_GPIO_Init+0x28>
 80010c2:	e138      	b.n	8001336 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d00b      	beq.n	80010e4 <HAL_GPIO_Init+0x48>
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d007      	beq.n	80010e4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010d8:	2b11      	cmp	r3, #17
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	2b12      	cmp	r3, #18
 80010e2:	d130      	bne.n	8001146 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	2203      	movs	r2, #3
 80010f0:	409a      	lsls	r2, r3
 80010f2:	0013      	movs	r3, r2
 80010f4:	43da      	mvns	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68da      	ldr	r2, [r3, #12]
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	409a      	lsls	r2, r3
 8001106:	0013      	movs	r3, r2
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800111a:	2201      	movs	r2, #1
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	409a      	lsls	r2, r3
 8001120:	0013      	movs	r3, r2
 8001122:	43da      	mvns	r2, r3
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	091b      	lsrs	r3, r3, #4
 8001130:	2201      	movs	r2, #1
 8001132:	401a      	ands	r2, r3
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
 8001138:	0013      	movs	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	2203      	movs	r2, #3
 8001152:	409a      	lsls	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	409a      	lsls	r2, r3
 8001168:	0013      	movs	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4313      	orrs	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d003      	beq.n	8001186 <HAL_GPIO_Init+0xea>
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b12      	cmp	r3, #18
 8001184:	d123      	bne.n	80011ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	08da      	lsrs	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3208      	adds	r2, #8
 800118e:	0092      	lsls	r2, r2, #2
 8001190:	58d3      	ldr	r3, [r2, r3]
 8001192:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2207      	movs	r2, #7
 8001198:	4013      	ands	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	220f      	movs	r2, #15
 800119e:	409a      	lsls	r2, r3
 80011a0:	0013      	movs	r3, r2
 80011a2:	43da      	mvns	r2, r3
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	691a      	ldr	r2, [r3, #16]
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	2107      	movs	r1, #7
 80011b2:	400b      	ands	r3, r1
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	08da      	lsrs	r2, r3, #3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3208      	adds	r2, #8
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	6939      	ldr	r1, [r7, #16]
 80011cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	2203      	movs	r2, #3
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	43da      	mvns	r2, r3
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4013      	ands	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	401a      	ands	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	409a      	lsls	r2, r3
 80011f4:	0013      	movs	r3, r2
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	2380      	movs	r3, #128	; 0x80
 8001208:	055b      	lsls	r3, r3, #21
 800120a:	4013      	ands	r3, r2
 800120c:	d100      	bne.n	8001210 <HAL_GPIO_Init+0x174>
 800120e:	e092      	b.n	8001336 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001210:	4a50      	ldr	r2, [pc, #320]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	089b      	lsrs	r3, r3, #2
 8001216:	3318      	adds	r3, #24
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	589b      	ldr	r3, [r3, r2]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2203      	movs	r2, #3
 8001222:	4013      	ands	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	220f      	movs	r2, #15
 8001228:	409a      	lsls	r2, r3
 800122a:	0013      	movs	r3, r2
 800122c:	43da      	mvns	r2, r3
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	23a0      	movs	r3, #160	; 0xa0
 8001238:	05db      	lsls	r3, r3, #23
 800123a:	429a      	cmp	r2, r3
 800123c:	d013      	beq.n	8001266 <HAL_GPIO_Init+0x1ca>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a45      	ldr	r2, [pc, #276]	; (8001358 <HAL_GPIO_Init+0x2bc>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d00d      	beq.n	8001262 <HAL_GPIO_Init+0x1c6>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a44      	ldr	r2, [pc, #272]	; (800135c <HAL_GPIO_Init+0x2c0>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d007      	beq.n	800125e <HAL_GPIO_Init+0x1c2>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a43      	ldr	r2, [pc, #268]	; (8001360 <HAL_GPIO_Init+0x2c4>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_GPIO_Init+0x1be>
 8001256:	2303      	movs	r3, #3
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x1cc>
 800125a:	2305      	movs	r3, #5
 800125c:	e004      	b.n	8001268 <HAL_GPIO_Init+0x1cc>
 800125e:	2302      	movs	r3, #2
 8001260:	e002      	b.n	8001268 <HAL_GPIO_Init+0x1cc>
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x1cc>
 8001266:	2300      	movs	r3, #0
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	2103      	movs	r1, #3
 800126c:	400a      	ands	r2, r1
 800126e:	00d2      	lsls	r2, r2, #3
 8001270:	4093      	lsls	r3, r2
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001278:	4936      	ldr	r1, [pc, #216]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	3318      	adds	r3, #24
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001286:	4a33      	ldr	r2, [pc, #204]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 8001288:	2380      	movs	r3, #128	; 0x80
 800128a:	58d3      	ldr	r3, [r2, r3]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43da      	mvns	r2, r3
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	025b      	lsls	r3, r3, #9
 80012a0:	4013      	ands	r3, r2
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ac:	4929      	ldr	r1, [pc, #164]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 80012ae:	2280      	movs	r2, #128	; 0x80
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80012b4:	4a27      	ldr	r2, [pc, #156]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 80012b6:	2384      	movs	r3, #132	; 0x84
 80012b8:	58d3      	ldr	r3, [r2, r3]
 80012ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	43da      	mvns	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	2380      	movs	r3, #128	; 0x80
 80012cc:	029b      	lsls	r3, r3, #10
 80012ce:	4013      	ands	r3, r2
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012da:	491e      	ldr	r1, [pc, #120]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 80012dc:	2284      	movs	r2, #132	; 0x84
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	43da      	mvns	r2, r3
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4013      	ands	r3, r2
 80012f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	2380      	movs	r3, #128	; 0x80
 80012f8:	035b      	lsls	r3, r3, #13
 80012fa:	4013      	ands	r3, r2
 80012fc:	d003      	beq.n	8001306 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43da      	mvns	r2, r3
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	685a      	ldr	r2, [r3, #4]
 8001320:	2380      	movs	r3, #128	; 0x80
 8001322:	039b      	lsls	r3, r3, #14
 8001324:	4013      	ands	r3, r2
 8001326:	d003      	beq.n	8001330 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <HAL_GPIO_Init+0x2b8>)
 8001332:	693a      	ldr	r2, [r7, #16]
 8001334:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3301      	adds	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	40da      	lsrs	r2, r3
 8001344:	1e13      	subs	r3, r2, #0
 8001346:	d000      	beq.n	800134a <HAL_GPIO_Init+0x2ae>
 8001348:	e6b0      	b.n	80010ac <HAL_GPIO_Init+0x10>
  }
}
 800134a:	46c0      	nop			; (mov r8, r8)
 800134c:	46bd      	mov	sp, r7
 800134e:	b006      	add	sp, #24
 8001350:	bd80      	pop	{r7, pc}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	40021800 	.word	0x40021800
 8001358:	50000400 	.word	0x50000400
 800135c:	50000800 	.word	0x50000800
 8001360:	50000c00 	.word	0x50000c00

08001364 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	0008      	movs	r0, r1
 800136e:	0011      	movs	r1, r2
 8001370:	1cbb      	adds	r3, r7, #2
 8001372:	1c02      	adds	r2, r0, #0
 8001374:	801a      	strh	r2, [r3, #0]
 8001376:	1c7b      	adds	r3, r7, #1
 8001378:	1c0a      	adds	r2, r1, #0
 800137a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800137c:	1c7b      	adds	r3, r7, #1
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d004      	beq.n	800138e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001384:	1cbb      	adds	r3, r7, #2
 8001386:	881a      	ldrh	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800138c:	e003      	b.n	8001396 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800138e:	1cbb      	adds	r3, r7, #2
 8001390:	881a      	ldrh	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
	...

080013a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	0002      	movs	r2, r0
 80013a8:	1dbb      	adds	r3, r7, #6
 80013aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	1dba      	adds	r2, r7, #6
 80013b2:	8812      	ldrh	r2, [r2, #0]
 80013b4:	4013      	ands	r3, r2
 80013b6:	d008      	beq.n	80013ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80013b8:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80013ba:	1dba      	adds	r2, r7, #6
 80013bc:	8812      	ldrh	r2, [r2, #0]
 80013be:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80013c0:	1dbb      	adds	r3, r7, #6
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff fc77 	bl	8000cb8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	1dba      	adds	r2, r7, #6
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	4013      	ands	r3, r2
 80013d4:	d008      	beq.n	80013e8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80013d8:	1dba      	adds	r2, r7, #6
 80013da:	8812      	ldrh	r2, [r2, #0]
 80013dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80013de:	1dbb      	adds	r3, r7, #6
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	0018      	movs	r0, r3
 80013e4:	f7ff fc78 	bl	8000cd8 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b002      	add	sp, #8
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021800 	.word	0x40021800

080013f4 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <HAL_PWR_EnableBkUpAccess+0x18>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_PWR_EnableBkUpAccess+0x18>)
 80013fe:	2180      	movs	r1, #128	; 0x80
 8001400:	0049      	lsls	r1, r1, #1
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]
}
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40007000 	.word	0x40007000

08001410 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 or Stop 1 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	000a      	movs	r2, r1
 800141a:	1cfb      	adds	r3, r7, #3
 800141c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  if (Regulator != PWR_MAINREGULATOR_ON)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d009      	beq.n	8001438 <HAL_PWR_EnterSTOPMode+0x28>
  {
    /* Stop mode with Low-Power Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP1);
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_PWR_EnterSTOPMode+0x68>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2207      	movs	r2, #7
 800142a:	4393      	bics	r3, r2
 800142c:	001a      	movs	r2, r3
 800142e:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_PWR_EnterSTOPMode+0x68>)
 8001430:	2101      	movs	r1, #1
 8001432:	430a      	orrs	r2, r1
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	e005      	b.n	8001444 <HAL_PWR_EnterSTOPMode+0x34>
  }
  else
  {
    /* Stop mode with Main Regulator */
    MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_PWR_EnterSTOPMode+0x68>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_PWR_EnterSTOPMode+0x68>)
 800143e:	2107      	movs	r1, #7
 8001440:	438a      	bics	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
  }

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001444:	4b0d      	ldr	r3, [pc, #52]	; (800147c <HAL_PWR_EnterSTOPMode+0x6c>)
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <HAL_PWR_EnterSTOPMode+0x6c>)
 800144a:	2104      	movs	r1, #4
 800144c:	430a      	orrs	r2, r1
 800144e:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8001450:	1cfb      	adds	r3, r7, #3
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d101      	bne.n	800145c <HAL_PWR_EnterSTOPMode+0x4c>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8001458:	bf30      	wfi
 800145a:	e002      	b.n	8001462 <HAL_PWR_EnterSTOPMode+0x52>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800145c:	bf40      	sev
    __WFE();
 800145e:	bf20      	wfe
    __WFE();
 8001460:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_PWR_EnterSTOPMode+0x6c>)
 8001464:	691a      	ldr	r2, [r3, #16]
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <HAL_PWR_EnterSTOPMode+0x6c>)
 8001468:	2104      	movs	r1, #4
 800146a:	438a      	bics	r2, r1
 800146c:	611a      	str	r2, [r3, #16]
}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	46bd      	mov	sp, r7
 8001472:	b002      	add	sp, #8
 8001474:	bd80      	pop	{r7, pc}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	40007000 	.word	0x40007000
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001488:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800148e:	4013      	ands	r3, r2
 8001490:	0019      	movs	r1, r3
 8001492:	4b17      	ldr	r3, [pc, #92]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	430a      	orrs	r2, r1
 8001498:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d11f      	bne.n	80014e4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	0013      	movs	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	189b      	adds	r3, r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4912      	ldr	r1, [pc, #72]	; (80014fc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80014b2:	0018      	movs	r0, r3
 80014b4:	f7fe fe24 	bl	8000100 <__udivsi3>
 80014b8:	0003      	movs	r3, r0
 80014ba:	3301      	adds	r3, #1
 80014bc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014be:	e008      	b.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	e001      	b.n	80014d2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e009      	b.n	80014e6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	2380      	movs	r3, #128	; 0x80
 80014d8:	00db      	lsls	r3, r3, #3
 80014da:	401a      	ands	r2, r3
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d0ed      	beq.n	80014c0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	0018      	movs	r0, r3
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b004      	add	sp, #16
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	40007000 	.word	0x40007000
 80014f4:	fffff9ff 	.word	0xfffff9ff
 80014f8:	20000000 	.word	0x20000000
 80014fc:	000f4240 	.word	0x000f4240

08001500 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e2f9      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2201      	movs	r2, #1
 8001518:	4013      	ands	r3, r2
 800151a:	d100      	bne.n	800151e <HAL_RCC_OscConfig+0x1e>
 800151c:	e07c      	b.n	8001618 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800151e:	4bc3      	ldr	r3, [pc, #780]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2238      	movs	r2, #56	; 0x38
 8001524:	4013      	ands	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001528:	4bc0      	ldr	r3, [pc, #768]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	2203      	movs	r2, #3
 800152e:	4013      	ands	r3, r2
 8001530:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b10      	cmp	r3, #16
 8001536:	d102      	bne.n	800153e <HAL_RCC_OscConfig+0x3e>
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2b03      	cmp	r3, #3
 800153c:	d002      	beq.n	8001544 <HAL_RCC_OscConfig+0x44>
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	2b08      	cmp	r3, #8
 8001542:	d10b      	bne.n	800155c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	4bb9      	ldr	r3, [pc, #740]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	029b      	lsls	r3, r3, #10
 800154c:	4013      	ands	r3, r2
 800154e:	d062      	beq.n	8001616 <HAL_RCC_OscConfig+0x116>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d15e      	bne.n	8001616 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e2d4      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	025b      	lsls	r3, r3, #9
 8001564:	429a      	cmp	r2, r3
 8001566:	d107      	bne.n	8001578 <HAL_RCC_OscConfig+0x78>
 8001568:	4bb0      	ldr	r3, [pc, #704]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4baf      	ldr	r3, [pc, #700]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 800156e:	2180      	movs	r1, #128	; 0x80
 8001570:	0249      	lsls	r1, r1, #9
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	e020      	b.n	80015ba <HAL_RCC_OscConfig+0xba>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	23a0      	movs	r3, #160	; 0xa0
 800157e:	02db      	lsls	r3, r3, #11
 8001580:	429a      	cmp	r2, r3
 8001582:	d10e      	bne.n	80015a2 <HAL_RCC_OscConfig+0xa2>
 8001584:	4ba9      	ldr	r3, [pc, #676]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4ba8      	ldr	r3, [pc, #672]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 800158a:	2180      	movs	r1, #128	; 0x80
 800158c:	02c9      	lsls	r1, r1, #11
 800158e:	430a      	orrs	r2, r1
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	4ba6      	ldr	r3, [pc, #664]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4ba5      	ldr	r3, [pc, #660]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001598:	2180      	movs	r1, #128	; 0x80
 800159a:	0249      	lsls	r1, r1, #9
 800159c:	430a      	orrs	r2, r1
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	e00b      	b.n	80015ba <HAL_RCC_OscConfig+0xba>
 80015a2:	4ba2      	ldr	r3, [pc, #648]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	4ba1      	ldr	r3, [pc, #644]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80015a8:	49a1      	ldr	r1, [pc, #644]	; (8001830 <HAL_RCC_OscConfig+0x330>)
 80015aa:	400a      	ands	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	4b9f      	ldr	r3, [pc, #636]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4b9e      	ldr	r3, [pc, #632]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80015b4:	499f      	ldr	r1, [pc, #636]	; (8001834 <HAL_RCC_OscConfig+0x334>)
 80015b6:	400a      	ands	r2, r1
 80015b8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d014      	beq.n	80015ec <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c2:	f7ff fc4b 	bl	8000e5c <HAL_GetTick>
 80015c6:	0003      	movs	r3, r0
 80015c8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015cc:	f7ff fc46 	bl	8000e5c <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e293      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015de:	4b93      	ldr	r3, [pc, #588]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	2380      	movs	r3, #128	; 0x80
 80015e4:	029b      	lsls	r3, r3, #10
 80015e6:	4013      	ands	r3, r2
 80015e8:	d0f0      	beq.n	80015cc <HAL_RCC_OscConfig+0xcc>
 80015ea:	e015      	b.n	8001618 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc36 	bl	8000e5c <HAL_GetTick>
 80015f0:	0003      	movs	r3, r0
 80015f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f6:	f7ff fc31 	bl	8000e5c <HAL_GetTick>
 80015fa:	0002      	movs	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b64      	cmp	r3, #100	; 0x64
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e27e      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001608:	4b88      	ldr	r3, [pc, #544]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	2380      	movs	r3, #128	; 0x80
 800160e:	029b      	lsls	r3, r3, #10
 8001610:	4013      	ands	r3, r2
 8001612:	d1f0      	bne.n	80015f6 <HAL_RCC_OscConfig+0xf6>
 8001614:	e000      	b.n	8001618 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001616:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2202      	movs	r2, #2
 800161e:	4013      	ands	r3, r2
 8001620:	d100      	bne.n	8001624 <HAL_RCC_OscConfig+0x124>
 8001622:	e099      	b.n	8001758 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001624:	4b81      	ldr	r3, [pc, #516]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2238      	movs	r2, #56	; 0x38
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800162e:	4b7f      	ldr	r3, [pc, #508]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2203      	movs	r2, #3
 8001634:	4013      	ands	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d102      	bne.n	8001644 <HAL_RCC_OscConfig+0x144>
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b02      	cmp	r3, #2
 8001642:	d002      	beq.n	800164a <HAL_RCC_OscConfig+0x14a>
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d135      	bne.n	80016b6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164a:	4b78      	ldr	r3, [pc, #480]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	2380      	movs	r3, #128	; 0x80
 8001650:	00db      	lsls	r3, r3, #3
 8001652:	4013      	ands	r3, r2
 8001654:	d005      	beq.n	8001662 <HAL_RCC_OscConfig+0x162>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e251      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	4b72      	ldr	r3, [pc, #456]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	4a74      	ldr	r2, [pc, #464]	; (8001838 <HAL_RCC_OscConfig+0x338>)
 8001668:	4013      	ands	r3, r2
 800166a:	0019      	movs	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
 8001670:	021a      	lsls	r2, r3, #8
 8001672:	4b6e      	ldr	r3, [pc, #440]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001674:	430a      	orrs	r2, r1
 8001676:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d112      	bne.n	80016a4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800167e:	4b6b      	ldr	r3, [pc, #428]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6e      	ldr	r2, [pc, #440]	; (800183c <HAL_RCC_OscConfig+0x33c>)
 8001684:	4013      	ands	r3, r2
 8001686:	0019      	movs	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691a      	ldr	r2, [r3, #16]
 800168c:	4b67      	ldr	r3, [pc, #412]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001692:	4b66      	ldr	r3, [pc, #408]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	0adb      	lsrs	r3, r3, #11
 8001698:	2207      	movs	r2, #7
 800169a:	4013      	ands	r3, r2
 800169c:	4a68      	ldr	r2, [pc, #416]	; (8001840 <HAL_RCC_OscConfig+0x340>)
 800169e:	40da      	lsrs	r2, r3
 80016a0:	4b68      	ldr	r3, [pc, #416]	; (8001844 <HAL_RCC_OscConfig+0x344>)
 80016a2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016a4:	4b68      	ldr	r3, [pc, #416]	; (8001848 <HAL_RCC_OscConfig+0x348>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0018      	movs	r0, r3
 80016aa:	f7ff fb7b 	bl	8000da4 <HAL_InitTick>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d051      	beq.n	8001756 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e227      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d030      	beq.n	8001720 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016be:	4b5b      	ldr	r3, [pc, #364]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a5e      	ldr	r2, [pc, #376]	; (800183c <HAL_RCC_OscConfig+0x33c>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	0019      	movs	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	4b57      	ldr	r3, [pc, #348]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80016d2:	4b56      	ldr	r3, [pc, #344]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4b55      	ldr	r3, [pc, #340]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80016d8:	2180      	movs	r1, #128	; 0x80
 80016da:	0049      	lsls	r1, r1, #1
 80016dc:	430a      	orrs	r2, r1
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff fbbc 	bl	8000e5c <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ea:	f7ff fbb7 	bl	8000e5c <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e204      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fc:	4b4b      	ldr	r3, [pc, #300]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4013      	ands	r3, r2
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001708:	4b48      	ldr	r3, [pc, #288]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	4a4a      	ldr	r2, [pc, #296]	; (8001838 <HAL_RCC_OscConfig+0x338>)
 800170e:	4013      	ands	r3, r2
 8001710:	0019      	movs	r1, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	695b      	ldr	r3, [r3, #20]
 8001716:	021a      	lsls	r2, r3, #8
 8001718:	4b44      	ldr	r3, [pc, #272]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 800171a:	430a      	orrs	r2, r1
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	e01b      	b.n	8001758 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001720:	4b42      	ldr	r3, [pc, #264]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001726:	4949      	ldr	r1, [pc, #292]	; (800184c <HAL_RCC_OscConfig+0x34c>)
 8001728:	400a      	ands	r2, r1
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fb96 	bl	8000e5c <HAL_GetTick>
 8001730:	0003      	movs	r3, r0
 8001732:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001734:	e008      	b.n	8001748 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fb91 	bl	8000e5c <HAL_GetTick>
 800173a:	0002      	movs	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d901      	bls.n	8001748 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001744:	2303      	movs	r3, #3
 8001746:	e1de      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001748:	4b38      	ldr	r3, [pc, #224]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4013      	ands	r3, r2
 8001752:	d1f0      	bne.n	8001736 <HAL_RCC_OscConfig+0x236>
 8001754:	e000      	b.n	8001758 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001756:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2208      	movs	r2, #8
 800175e:	4013      	ands	r3, r2
 8001760:	d047      	beq.n	80017f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	2238      	movs	r2, #56	; 0x38
 8001768:	4013      	ands	r3, r2
 800176a:	2b18      	cmp	r3, #24
 800176c:	d10a      	bne.n	8001784 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800176e:	4b2f      	ldr	r3, [pc, #188]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d03c      	beq.n	80017f2 <HAL_RCC_OscConfig+0x2f2>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d138      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e1c0      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d019      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800178c:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 800178e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001790:	4b26      	ldr	r3, [pc, #152]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001792:	2101      	movs	r1, #1
 8001794:	430a      	orrs	r2, r1
 8001796:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fb60 	bl	8000e5c <HAL_GetTick>
 800179c:	0003      	movs	r3, r0
 800179e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017a0:	e008      	b.n	80017b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a2:	f7ff fb5b 	bl	8000e5c <HAL_GetTick>
 80017a6:	0002      	movs	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e1a8      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80017b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b8:	2202      	movs	r2, #2
 80017ba:	4013      	ands	r3, r2
 80017bc:	d0f1      	beq.n	80017a2 <HAL_RCC_OscConfig+0x2a2>
 80017be:	e018      	b.n	80017f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80017c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80017c6:	2101      	movs	r1, #1
 80017c8:	438a      	bics	r2, r1
 80017ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb46 	bl	8000e5c <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017d6:	f7ff fb41 	bl	8000e5c <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e18e      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e8:	4b10      	ldr	r3, [pc, #64]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 80017ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d1f1      	bne.n	80017d6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2204      	movs	r2, #4
 80017f8:	4013      	ands	r3, r2
 80017fa:	d100      	bne.n	80017fe <HAL_RCC_OscConfig+0x2fe>
 80017fc:	e0c6      	b.n	800198c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017fe:	231f      	movs	r3, #31
 8001800:	18fb      	adds	r3, r7, r3
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2238      	movs	r2, #56	; 0x38
 800180c:	4013      	ands	r3, r2
 800180e:	2b20      	cmp	r3, #32
 8001810:	d11e      	bne.n	8001850 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001812:	4b06      	ldr	r3, [pc, #24]	; (800182c <HAL_RCC_OscConfig+0x32c>)
 8001814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d100      	bne.n	800181e <HAL_RCC_OscConfig+0x31e>
 800181c:	e0b6      	b.n	800198c <HAL_RCC_OscConfig+0x48c>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d000      	beq.n	8001828 <HAL_RCC_OscConfig+0x328>
 8001826:	e0b1      	b.n	800198c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e16c      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
 800182c:	40021000 	.word	0x40021000
 8001830:	fffeffff 	.word	0xfffeffff
 8001834:	fffbffff 	.word	0xfffbffff
 8001838:	ffff80ff 	.word	0xffff80ff
 800183c:	ffffc7ff 	.word	0xffffc7ff
 8001840:	00f42400 	.word	0x00f42400
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004
 800184c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001850:	4baf      	ldr	r3, [pc, #700]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001852:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001854:	2380      	movs	r3, #128	; 0x80
 8001856:	055b      	lsls	r3, r3, #21
 8001858:	4013      	ands	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_RCC_OscConfig+0x360>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x362>
 8001860:	2300      	movs	r3, #0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d011      	beq.n	800188a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001866:	4baa      	ldr	r3, [pc, #680]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800186a:	4ba9      	ldr	r3, [pc, #676]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 800186c:	2180      	movs	r1, #128	; 0x80
 800186e:	0549      	lsls	r1, r1, #21
 8001870:	430a      	orrs	r2, r1
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c
 8001874:	4ba6      	ldr	r3, [pc, #664]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001878:	2380      	movs	r3, #128	; 0x80
 800187a:	055b      	lsls	r3, r3, #21
 800187c:	4013      	ands	r3, r2
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001882:	231f      	movs	r3, #31
 8001884:	18fb      	adds	r3, r7, r3
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800188a:	4ba2      	ldr	r3, [pc, #648]	; (8001b14 <HAL_RCC_OscConfig+0x614>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4013      	ands	r3, r2
 8001894:	d11a      	bne.n	80018cc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001896:	4b9f      	ldr	r3, [pc, #636]	; (8001b14 <HAL_RCC_OscConfig+0x614>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	4b9e      	ldr	r3, [pc, #632]	; (8001b14 <HAL_RCC_OscConfig+0x614>)
 800189c:	2180      	movs	r1, #128	; 0x80
 800189e:	0049      	lsls	r1, r1, #1
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80018a4:	f7ff fada 	bl	8000e5c <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018ac:	e008      	b.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ae:	f7ff fad5 	bl	8000e5c <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d901      	bls.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e122      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018c0:	4b94      	ldr	r3, [pc, #592]	; (8001b14 <HAL_RCC_OscConfig+0x614>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4013      	ands	r3, r2
 80018ca:	d0f0      	beq.n	80018ae <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d106      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3e2>
 80018d4:	4b8e      	ldr	r3, [pc, #568]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 80018d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018d8:	4b8d      	ldr	r3, [pc, #564]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 80018da:	2101      	movs	r1, #1
 80018dc:	430a      	orrs	r2, r1
 80018de:	65da      	str	r2, [r3, #92]	; 0x5c
 80018e0:	e01c      	b.n	800191c <HAL_RCC_OscConfig+0x41c>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	d10c      	bne.n	8001904 <HAL_RCC_OscConfig+0x404>
 80018ea:	4b89      	ldr	r3, [pc, #548]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 80018ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018ee:	4b88      	ldr	r3, [pc, #544]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 80018f0:	2104      	movs	r1, #4
 80018f2:	430a      	orrs	r2, r1
 80018f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80018f6:	4b86      	ldr	r3, [pc, #536]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 80018f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018fa:	4b85      	ldr	r3, [pc, #532]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	430a      	orrs	r2, r1
 8001900:	65da      	str	r2, [r3, #92]	; 0x5c
 8001902:	e00b      	b.n	800191c <HAL_RCC_OscConfig+0x41c>
 8001904:	4b82      	ldr	r3, [pc, #520]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001906:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001908:	4b81      	ldr	r3, [pc, #516]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 800190a:	2101      	movs	r1, #1
 800190c:	438a      	bics	r2, r1
 800190e:	65da      	str	r2, [r3, #92]	; 0x5c
 8001910:	4b7f      	ldr	r3, [pc, #508]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001912:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001914:	4b7e      	ldr	r3, [pc, #504]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001916:	2104      	movs	r1, #4
 8001918:	438a      	bics	r2, r1
 800191a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d014      	beq.n	800194e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001924:	f7ff fa9a 	bl	8000e5c <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800192c:	e009      	b.n	8001942 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff fa95 	bl	8000e5c <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	4a77      	ldr	r2, [pc, #476]	; (8001b18 <HAL_RCC_OscConfig+0x618>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e0e1      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001942:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001946:	2202      	movs	r2, #2
 8001948:	4013      	ands	r3, r2
 800194a:	d0f0      	beq.n	800192e <HAL_RCC_OscConfig+0x42e>
 800194c:	e013      	b.n	8001976 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff fa85 	bl	8000e5c <HAL_GetTick>
 8001952:	0003      	movs	r3, r0
 8001954:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001956:	e009      	b.n	800196c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff fa80 	bl	8000e5c <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	4a6d      	ldr	r2, [pc, #436]	; (8001b18 <HAL_RCC_OscConfig+0x618>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e0cc      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196c:	4b68      	ldr	r3, [pc, #416]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 800196e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001970:	2202      	movs	r2, #2
 8001972:	4013      	ands	r3, r2
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001976:	231f      	movs	r3, #31
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4b63      	ldr	r3, [pc, #396]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001984:	4b62      	ldr	r3, [pc, #392]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001986:	4965      	ldr	r1, [pc, #404]	; (8001b1c <HAL_RCC_OscConfig+0x61c>)
 8001988:	400a      	ands	r2, r1
 800198a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69db      	ldr	r3, [r3, #28]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d100      	bne.n	8001996 <HAL_RCC_OscConfig+0x496>
 8001994:	e0b6      	b.n	8001b04 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001996:	4b5e      	ldr	r3, [pc, #376]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2238      	movs	r2, #56	; 0x38
 800199c:	4013      	ands	r3, r2
 800199e:	2b10      	cmp	r3, #16
 80019a0:	d100      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4a4>
 80019a2:	e07e      	b.n	8001aa2 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d153      	bne.n	8001a54 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ac:	4b58      	ldr	r3, [pc, #352]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 80019b2:	495b      	ldr	r1, [pc, #364]	; (8001b20 <HAL_RCC_OscConfig+0x620>)
 80019b4:	400a      	ands	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b8:	f7ff fa50 	bl	8000e5c <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019c0:	e008      	b.n	80019d4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019c2:	f7ff fa4b 	bl	8000e5c <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e098      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	049b      	lsls	r3, r3, #18
 80019dc:	4013      	ands	r3, r2
 80019de:	d1f0      	bne.n	80019c2 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e0:	4b4b      	ldr	r3, [pc, #300]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	4a4f      	ldr	r2, [pc, #316]	; (8001b24 <HAL_RCC_OscConfig+0x624>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	0019      	movs	r1, r3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1a      	ldr	r2, [r3, #32]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	431a      	orrs	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	431a      	orrs	r2, r3
 8001a08:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a0a:	430a      	orrs	r2, r1
 8001a0c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a0e:	4b40      	ldr	r3, [pc, #256]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	4b3f      	ldr	r3, [pc, #252]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a14:	2180      	movs	r1, #128	; 0x80
 8001a16:	0449      	lsls	r1, r1, #17
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001a1c:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a22:	2180      	movs	r1, #128	; 0x80
 8001a24:	0549      	lsls	r1, r1, #21
 8001a26:	430a      	orrs	r2, r1
 8001a28:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2a:	f7ff fa17 	bl	8000e5c <HAL_GetTick>
 8001a2e:	0003      	movs	r3, r0
 8001a30:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a34:	f7ff fa12 	bl	8000e5c <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e05f      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	2380      	movs	r3, #128	; 0x80
 8001a4c:	049b      	lsls	r3, r3, #18
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0x534>
 8001a52:	e057      	b.n	8001b04 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a5a:	4931      	ldr	r1, [pc, #196]	; (8001b20 <HAL_RCC_OscConfig+0x620>)
 8001a5c:	400a      	ands	r2, r1
 8001a5e:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001a60:	4b2b      	ldr	r3, [pc, #172]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a62:	68da      	ldr	r2, [r3, #12]
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a66:	2103      	movs	r1, #3
 8001a68:	438a      	bics	r2, r1
 8001a6a:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001a6c:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a72:	492d      	ldr	r1, [pc, #180]	; (8001b28 <HAL_RCC_OscConfig+0x628>)
 8001a74:	400a      	ands	r2, r1
 8001a76:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff f9f0 	bl	8000e5c <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff f9eb 	bl	8000e5c <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e038      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	049b      	lsls	r3, r3, #18
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x582>
 8001aa0:	e030      	b.n	8001b04 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e02b      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001aae:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <HAL_RCC_OscConfig+0x610>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	401a      	ands	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d11e      	bne.n	8001b00 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2270      	movs	r2, #112	; 0x70
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d117      	bne.n	8001b00 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	23fe      	movs	r3, #254	; 0xfe
 8001ad4:	01db      	lsls	r3, r3, #7
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d10e      	bne.n	8001b00 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	23f8      	movs	r3, #248	; 0xf8
 8001ae6:	039b      	lsls	r3, r3, #14
 8001ae8:	401a      	ands	r2, r3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d106      	bne.n	8001b00 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	0f5b      	lsrs	r3, r3, #29
 8001af6:	075a      	lsls	r2, r3, #29
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	0018      	movs	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b008      	add	sp, #32
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	46c0      	nop			; (mov r8, r8)
 8001b10:	40021000 	.word	0x40021000
 8001b14:	40007000 	.word	0x40007000
 8001b18:	00001388 	.word	0x00001388
 8001b1c:	efffffff 	.word	0xefffffff
 8001b20:	feffffff 	.word	0xfeffffff
 8001b24:	1fc1808c 	.word	0x1fc1808c
 8001b28:	effeffff 	.word	0xeffeffff

08001b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0e9      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b40:	4b76      	ldr	r3, [pc, #472]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2207      	movs	r2, #7
 8001b46:	4013      	ands	r3, r2
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d91e      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b73      	ldr	r3, [pc, #460]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2207      	movs	r2, #7
 8001b54:	4393      	bics	r3, r2
 8001b56:	0019      	movs	r1, r3
 8001b58:	4b70      	ldr	r3, [pc, #448]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b60:	f7ff f97c 	bl	8000e5c <HAL_GetTick>
 8001b64:	0003      	movs	r3, r0
 8001b66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b68:	e009      	b.n	8001b7e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6a:	f7ff f977 	bl	8000e5c <HAL_GetTick>
 8001b6e:	0002      	movs	r2, r0
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	4a6a      	ldr	r2, [pc, #424]	; (8001d20 <HAL_RCC_ClockConfig+0x1f4>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0ca      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b7e:	4b67      	ldr	r3, [pc, #412]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2207      	movs	r2, #7
 8001b84:	4013      	ands	r3, r2
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d1ee      	bne.n	8001b6a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2202      	movs	r2, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d015      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2204      	movs	r2, #4
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	d006      	beq.n	8001bae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001ba0:	4b60      	ldr	r3, [pc, #384]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	4b5f      	ldr	r3, [pc, #380]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ba6:	21e0      	movs	r1, #224	; 0xe0
 8001ba8:	01c9      	lsls	r1, r1, #7
 8001baa:	430a      	orrs	r2, r1
 8001bac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	4a5d      	ldr	r2, [pc, #372]	; (8001d28 <HAL_RCC_ClockConfig+0x1fc>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	4b59      	ldr	r3, [pc, #356]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4013      	ands	r3, r2
 8001bca:	d057      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	029b      	lsls	r3, r3, #10
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d12b      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e097      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d107      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bec:	4b4d      	ldr	r3, [pc, #308]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	049b      	lsls	r3, r3, #18
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d11f      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e08b      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d107      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c04:	4b47      	ldr	r3, [pc, #284]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d113      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e07f      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c1c:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c20:	2202      	movs	r2, #2
 8001c22:	4013      	ands	r3, r2
 8001c24:	d108      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e074      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c2a:	4b3e      	ldr	r3, [pc, #248]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2e:	2202      	movs	r2, #2
 8001c30:	4013      	ands	r3, r2
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e06d      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c38:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	2207      	movs	r2, #7
 8001c3e:	4393      	bics	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685a      	ldr	r2, [r3, #4]
 8001c46:	4b37      	ldr	r3, [pc, #220]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c4c:	f7ff f906 	bl	8000e5c <HAL_GetTick>
 8001c50:	0003      	movs	r3, r0
 8001c52:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c54:	e009      	b.n	8001c6a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c56:	f7ff f901 	bl	8000e5c <HAL_GetTick>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	4a2f      	ldr	r2, [pc, #188]	; (8001d20 <HAL_RCC_ClockConfig+0x1f4>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e054      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2238      	movs	r2, #56	; 0x38
 8001c70:	401a      	ands	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	00db      	lsls	r3, r3, #3
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d1ec      	bne.n	8001c56 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c7c:	4b27      	ldr	r3, [pc, #156]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2207      	movs	r2, #7
 8001c82:	4013      	ands	r3, r2
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d21e      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c8a:	4b24      	ldr	r3, [pc, #144]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2207      	movs	r2, #7
 8001c90:	4393      	bics	r3, r2
 8001c92:	0019      	movs	r1, r3
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c9c:	f7ff f8de 	bl	8000e5c <HAL_GetTick>
 8001ca0:	0003      	movs	r3, r0
 8001ca2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ca4:	e009      	b.n	8001cba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca6:	f7ff f8d9 	bl	8000e5c <HAL_GetTick>
 8001caa:	0002      	movs	r2, r0
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	4a1b      	ldr	r2, [pc, #108]	; (8001d20 <HAL_RCC_ClockConfig+0x1f4>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e02c      	b.n	8001d14 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2207      	movs	r2, #7
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d1ee      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2204      	movs	r2, #4
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d009      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd2:	4b14      	ldr	r3, [pc, #80]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4a15      	ldr	r2, [pc, #84]	; (8001d2c <HAL_RCC_ClockConfig+0x200>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	0019      	movs	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ce6:	f000 f829 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cea:	0001      	movs	r1, r0
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	401a      	ands	r2, r3
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_RCC_ClockConfig+0x204>)
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	58d3      	ldr	r3, [r2, r3]
 8001cfc:	221f      	movs	r2, #31
 8001cfe:	4013      	ands	r3, r2
 8001d00:	000a      	movs	r2, r1
 8001d02:	40da      	lsrs	r2, r3
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_ClockConfig+0x208>)
 8001d06:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_ClockConfig+0x20c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f7ff f849 	bl	8000da4 <HAL_InitTick>
 8001d12:	0003      	movs	r3, r0
}
 8001d14:	0018      	movs	r0, r3
 8001d16:	46bd      	mov	sp, r7
 8001d18:	b004      	add	sp, #16
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40022000 	.word	0x40022000
 8001d20:	00001388 	.word	0x00001388
 8001d24:	40021000 	.word	0x40021000
 8001d28:	fffff0ff 	.word	0xfffff0ff
 8001d2c:	ffff8fff 	.word	0xffff8fff
 8001d30:	080027fc 	.word	0x080027fc
 8001d34:	20000000 	.word	0x20000000
 8001d38:	20000004 	.word	0x20000004

08001d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d42:	4b3c      	ldr	r3, [pc, #240]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2238      	movs	r2, #56	; 0x38
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d10f      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d4c:	4b39      	ldr	r3, [pc, #228]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0adb      	lsrs	r3, r3, #11
 8001d52:	2207      	movs	r2, #7
 8001d54:	4013      	ands	r3, r2
 8001d56:	2201      	movs	r2, #1
 8001d58:	409a      	lsls	r2, r3
 8001d5a:	0013      	movs	r3, r2
 8001d5c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d5e:	6839      	ldr	r1, [r7, #0]
 8001d60:	4835      	ldr	r0, [pc, #212]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d62:	f7fe f9cd 	bl	8000100 <__udivsi3>
 8001d66:	0003      	movs	r3, r0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	e05d      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d6c:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2238      	movs	r2, #56	; 0x38
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d102      	bne.n	8001d7e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	e054      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d7e:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	2238      	movs	r2, #56	; 0x38
 8001d84:	4013      	ands	r3, r2
 8001d86:	2b10      	cmp	r3, #16
 8001d88:	d138      	bne.n	8001dfc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d8a:	4b2a      	ldr	r3, [pc, #168]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2203      	movs	r2, #3
 8001d90:	4013      	ands	r3, r2
 8001d92:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	3301      	adds	r3, #1
 8001da0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b03      	cmp	r3, #3
 8001da6:	d10d      	bne.n	8001dc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	4824      	ldr	r0, [pc, #144]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x100>)
 8001dac:	f7fe f9a8 	bl	8000100 <__udivsi3>
 8001db0:	0003      	movs	r3, r0
 8001db2:	0019      	movs	r1, r3
 8001db4:	4b1f      	ldr	r3, [pc, #124]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	0a1b      	lsrs	r3, r3, #8
 8001dba:	227f      	movs	r2, #127	; 0x7f
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	434b      	muls	r3, r1
 8001dc0:	617b      	str	r3, [r7, #20]
        break;
 8001dc2:	e00d      	b.n	8001de0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001dc4:	68b9      	ldr	r1, [r7, #8]
 8001dc6:	481c      	ldr	r0, [pc, #112]	; (8001e38 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001dc8:	f7fe f99a 	bl	8000100 <__udivsi3>
 8001dcc:	0003      	movs	r3, r0
 8001dce:	0019      	movs	r1, r3
 8001dd0:	4b18      	ldr	r3, [pc, #96]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	227f      	movs	r2, #127	; 0x7f
 8001dd8:	4013      	ands	r3, r2
 8001dda:	434b      	muls	r3, r1
 8001ddc:	617b      	str	r3, [r7, #20]
        break;
 8001dde:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0f5b      	lsrs	r3, r3, #29
 8001de6:	2207      	movs	r2, #7
 8001de8:	4013      	ands	r3, r2
 8001dea:	3301      	adds	r3, #1
 8001dec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	6978      	ldr	r0, [r7, #20]
 8001df2:	f7fe f985 	bl	8000100 <__udivsi3>
 8001df6:	0003      	movs	r3, r0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	e015      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001dfc:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2238      	movs	r2, #56	; 0x38
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d103      	bne.n	8001e10 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	021b      	lsls	r3, r3, #8
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e10:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2238      	movs	r2, #56	; 0x38
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b18      	cmp	r3, #24
 8001e1a:	d103      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e1c:	23fa      	movs	r3, #250	; 0xfa
 8001e1e:	01db      	lsls	r3, r3, #7
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	e001      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e28:	693b      	ldr	r3, [r7, #16]
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b006      	add	sp, #24
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	40021000 	.word	0x40021000
 8001e38:	00f42400 	.word	0x00f42400
 8001e3c:	007a1200 	.word	0x007a1200

08001e40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e48:	2313      	movs	r3, #19
 8001e4a:	18fb      	adds	r3, r7, r3
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e50:	2312      	movs	r3, #18
 8001e52:	18fb      	adds	r3, r7, r3
 8001e54:	2200      	movs	r2, #0
 8001e56:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	029b      	lsls	r3, r3, #10
 8001e60:	4013      	ands	r3, r2
 8001e62:	d100      	bne.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001e64:	e0a4      	b.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	2311      	movs	r3, #17
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6e:	4b87      	ldr	r3, [pc, #540]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e72:	2380      	movs	r3, #128	; 0x80
 8001e74:	055b      	lsls	r3, r3, #21
 8001e76:	4013      	ands	r3, r2
 8001e78:	d111      	bne.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b84      	ldr	r3, [pc, #528]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e7e:	4b83      	ldr	r3, [pc, #524]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e80:	2180      	movs	r1, #128	; 0x80
 8001e82:	0549      	lsls	r1, r1, #21
 8001e84:	430a      	orrs	r2, r1
 8001e86:	63da      	str	r2, [r3, #60]	; 0x3c
 8001e88:	4b80      	ldr	r3, [pc, #512]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e8c:	2380      	movs	r3, #128	; 0x80
 8001e8e:	055b      	lsls	r3, r3, #21
 8001e90:	4013      	ands	r3, r2
 8001e92:	60bb      	str	r3, [r7, #8]
 8001e94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e96:	2311      	movs	r3, #17
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e9e:	4b7c      	ldr	r3, [pc, #496]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	4b7b      	ldr	r3, [pc, #492]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	0049      	lsls	r1, r1, #1
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eac:	f7fe ffd6 	bl	8000e5c <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eb4:	e00b      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb6:	f7fe ffd1 	bl	8000e5c <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d904      	bls.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8001ec4:	2313      	movs	r3, #19
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	2203      	movs	r2, #3
 8001eca:	701a      	strb	r2, [r3, #0]
        break;
 8001ecc:	e005      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ece:	4b70      	ldr	r3, [pc, #448]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2380      	movs	r3, #128	; 0x80
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d0ed      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8001eda:	2313      	movs	r3, #19
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d154      	bne.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ee4:	4b69      	ldr	r3, [pc, #420]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ee6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ee8:	23c0      	movs	r3, #192	; 0xc0
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4013      	ands	r3, r2
 8001eee:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d019      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0xea>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d014      	beq.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f00:	4b62      	ldr	r3, [pc, #392]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f04:	4a63      	ldr	r2, [pc, #396]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001f06:	4013      	ands	r3, r2
 8001f08:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f0a:	4b60      	ldr	r3, [pc, #384]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f0e:	4b5f      	ldr	r3, [pc, #380]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f10:	2180      	movs	r1, #128	; 0x80
 8001f12:	0249      	lsls	r1, r1, #9
 8001f14:	430a      	orrs	r2, r1
 8001f16:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f18:	4b5c      	ldr	r3, [pc, #368]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001f1c:	4b5b      	ldr	r3, [pc, #364]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f1e:	495e      	ldr	r1, [pc, #376]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001f20:	400a      	ands	r2, r1
 8001f22:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	4013      	ands	r3, r2
 8001f30:	d016      	beq.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f32:	f7fe ff93 	bl	8000e5c <HAL_GetTick>
 8001f36:	0003      	movs	r3, r0
 8001f38:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f3a:	e00c      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3c:	f7fe ff8e 	bl	8000e5c <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	4a55      	ldr	r2, [pc, #340]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d904      	bls.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8001f4c:	2313      	movs	r3, #19
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	2203      	movs	r2, #3
 8001f52:	701a      	strb	r2, [r3, #0]
            break;
 8001f54:	e004      	b.n	8001f60 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f56:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d0ed      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 8001f60:	2313      	movs	r3, #19
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10a      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f6a:	4b48      	ldr	r3, [pc, #288]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6e:	4a49      	ldr	r2, [pc, #292]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001f70:	4013      	ands	r3, r2
 8001f72:	0019      	movs	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	4b44      	ldr	r3, [pc, #272]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f7e:	e00c      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001f80:	2312      	movs	r3, #18
 8001f82:	18fb      	adds	r3, r7, r3
 8001f84:	2213      	movs	r2, #19
 8001f86:	18ba      	adds	r2, r7, r2
 8001f88:	7812      	ldrb	r2, [r2, #0]
 8001f8a:	701a      	strb	r2, [r3, #0]
 8001f8c:	e005      	b.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f8e:	2312      	movs	r3, #18
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2213      	movs	r2, #19
 8001f94:	18ba      	adds	r2, r7, r2
 8001f96:	7812      	ldrb	r2, [r2, #0]
 8001f98:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f9a:	2311      	movs	r3, #17
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d105      	bne.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fa4:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fa8:	4b38      	ldr	r3, [pc, #224]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001faa:	493d      	ldr	r1, [pc, #244]	; (80020a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d009      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fba:	4b34      	ldr	r3, [pc, #208]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	4393      	bics	r3, r2
 8001fc2:	0019      	movs	r1, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685a      	ldr	r2, [r3, #4]
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d009      	beq.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fd8:	4b2c      	ldr	r3, [pc, #176]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fdc:	220c      	movs	r2, #12
 8001fde:	4393      	bics	r3, r2
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	4b29      	ldr	r3, [pc, #164]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2220      	movs	r2, #32
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d009      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ff6:	4b25      	ldr	r3, [pc, #148]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffa:	4a2a      	ldr	r2, [pc, #168]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	0019      	movs	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	4b21      	ldr	r3, [pc, #132]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002006:	430a      	orrs	r2, r1
 8002008:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	; 0x80
 8002010:	01db      	lsls	r3, r3, #7
 8002012:	4013      	ands	r3, r2
 8002014:	d015      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002016:	4b1d      	ldr	r3, [pc, #116]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	0899      	lsrs	r1, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	695a      	ldr	r2, [r3, #20]
 8002022:	4b1a      	ldr	r3, [pc, #104]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002024:	430a      	orrs	r2, r1
 8002026:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	695a      	ldr	r2, [r3, #20]
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	05db      	lsls	r3, r3, #23
 8002030:	429a      	cmp	r2, r3
 8002032:	d106      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002034:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800203a:	2180      	movs	r1, #128	; 0x80
 800203c:	0249      	lsls	r1, r1, #9
 800203e:	430a      	orrs	r2, r1
 8002040:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	2380      	movs	r3, #128	; 0x80
 8002048:	011b      	lsls	r3, r3, #4
 800204a:	4013      	ands	r3, r2
 800204c:	d016      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	4a15      	ldr	r2, [pc, #84]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002054:	4013      	ands	r3, r2
 8002056:	0019      	movs	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	691a      	ldr	r2, [r3, #16]
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800205e:	430a      	orrs	r2, r1
 8002060:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691a      	ldr	r2, [r3, #16]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	01db      	lsls	r3, r3, #7
 800206a:	429a      	cmp	r2, r3
 800206c:	d106      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002070:	68da      	ldr	r2, [r3, #12]
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0249      	lsls	r1, r1, #9
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800207c:	2312      	movs	r3, #18
 800207e:	18fb      	adds	r3, r7, r3
 8002080:	781b      	ldrb	r3, [r3, #0]
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b006      	add	sp, #24
 8002088:	bd80      	pop	{r7, pc}
 800208a:	46c0      	nop			; (mov r8, r8)
 800208c:	40021000 	.word	0x40021000
 8002090:	40007000 	.word	0x40007000
 8002094:	fffffcff 	.word	0xfffffcff
 8002098:	fffeffff 	.word	0xfffeffff
 800209c:	00001388 	.word	0x00001388
 80020a0:	efffffff 	.word	0xefffffff
 80020a4:	ffffcfff 	.word	0xffffcfff
 80020a8:	ffff3fff 	.word	0xffff3fff

080020ac <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80020ac:	b5b0      	push	{r4, r5, r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020b4:	230f      	movs	r3, #15
 80020b6:	18fb      	adds	r3, r7, r3
 80020b8:	2201      	movs	r2, #1
 80020ba:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d100      	bne.n	80020c4 <HAL_RTC_Init+0x18>
 80020c2:	e07f      	b.n	80021c4 <HAL_RTC_Init+0x118>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2229      	movs	r2, #41	; 0x29
 80020c8:	5c9b      	ldrb	r3, [r3, r2]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d10b      	bne.n	80020e8 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2228      	movs	r2, #40	; 0x28
 80020d4:	2100      	movs	r1, #0
 80020d6:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2288      	movs	r2, #136	; 0x88
 80020dc:	0212      	lsls	r2, r2, #8
 80020de:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	0018      	movs	r0, r3
 80020e4:	f7fe fac0 	bl	8000668 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2229      	movs	r2, #41	; 0x29
 80020ec:	2102      	movs	r1, #2
 80020ee:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	22ca      	movs	r2, #202	; 0xca
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2253      	movs	r2, #83	; 0x53
 80020fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002100:	250f      	movs	r5, #15
 8002102:	197c      	adds	r4, r7, r5
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	0018      	movs	r0, r3
 8002108:	f000 fa71 	bl	80025ee <RTC_EnterInitMode>
 800210c:	0003      	movs	r3, r0
 800210e:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8002110:	197b      	adds	r3, r7, r5
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d148      	bne.n	80021aa <HAL_RTC_Init+0xfe>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	699a      	ldr	r2, [r3, #24]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	492c      	ldr	r1, [pc, #176]	; (80021d4 <HAL_RTC_Init+0x128>)
 8002124:	400a      	ands	r2, r1
 8002126:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6999      	ldr	r1, [r3, #24]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	69db      	ldr	r3, [r3, #28]
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	430a      	orrs	r2, r1
 8002144:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6912      	ldr	r2, [r2, #16]
 800214e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	6919      	ldr	r1, [r3, #16]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	041a      	lsls	r2, r3, #16
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002164:	250f      	movs	r5, #15
 8002166:	197c      	adds	r4, r7, r5
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	0018      	movs	r0, r3
 800216c:	f000 fa82 	bl	8002674 <RTC_ExitInitMode>
 8002170:	0003      	movs	r3, r0
 8002172:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8002174:	197b      	adds	r3, r7, r5
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d116      	bne.n	80021aa <HAL_RTC_Init+0xfe>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	00d2      	lsls	r2, r2, #3
 8002188:	08d2      	lsrs	r2, r2, #3
 800218a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	6999      	ldr	r1, [r3, #24]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	22ff      	movs	r2, #255	; 0xff
 80021b0:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 80021b2:	230f      	movs	r3, #15
 80021b4:	18fb      	adds	r3, r7, r3
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d103      	bne.n	80021c4 <HAL_RTC_Init+0x118>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2229      	movs	r2, #41	; 0x29
 80021c0:	2101      	movs	r1, #1
 80021c2:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80021c4:	230f      	movs	r3, #15
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	781b      	ldrb	r3, [r3, #0]
}
 80021ca:	0018      	movs	r0, r3
 80021cc:	46bd      	mov	sp, r7
 80021ce:	b004      	add	sp, #16
 80021d0:	bdb0      	pop	{r4, r5, r7, pc}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	fb8fffbf 	.word	0xfb8fffbf

080021d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021d8:	b5b0      	push	{r4, r5, r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2228      	movs	r2, #40	; 0x28
 80021e8:	5c9b      	ldrb	r3, [r3, r2]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d101      	bne.n	80021f2 <HAL_RTC_SetTime+0x1a>
 80021ee:	2302      	movs	r3, #2
 80021f0:	e092      	b.n	8002318 <HAL_RTC_SetTime+0x140>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2228      	movs	r2, #40	; 0x28
 80021f6:	2101      	movs	r1, #1
 80021f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2229      	movs	r2, #41	; 0x29
 80021fe:	2102      	movs	r1, #2
 8002200:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	22ca      	movs	r2, #202	; 0xca
 8002208:	625a      	str	r2, [r3, #36]	; 0x24
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2253      	movs	r2, #83	; 0x53
 8002210:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002212:	2513      	movs	r5, #19
 8002214:	197c      	adds	r4, r7, r5
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 f9e8 	bl	80025ee <RTC_EnterInitMode>
 800221e:	0003      	movs	r3, r0
 8002220:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002222:	197b      	adds	r3, r7, r5
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d162      	bne.n	80022f0 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d125      	bne.n	800227c <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2240      	movs	r2, #64	; 0x40
 8002238:	4013      	ands	r3, r2
 800223a:	d102      	bne.n	8002242 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2200      	movs	r2, #0
 8002240:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	0018      	movs	r0, r3
 8002248:	f000 fa5a 	bl	8002700 <RTC_ByteToBcd2>
 800224c:	0003      	movs	r3, r0
 800224e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	785b      	ldrb	r3, [r3, #1]
 8002254:	0018      	movs	r0, r3
 8002256:	f000 fa53 	bl	8002700 <RTC_ByteToBcd2>
 800225a:	0003      	movs	r3, r0
 800225c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800225e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	789b      	ldrb	r3, [r3, #2]
 8002264:	0018      	movs	r0, r3
 8002266:	f000 fa4b 	bl	8002700 <RTC_ByteToBcd2>
 800226a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800226c:	0022      	movs	r2, r4
 800226e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	78db      	ldrb	r3, [r3, #3]
 8002274:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	e017      	b.n	80022ac <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	2240      	movs	r2, #64	; 0x40
 8002284:	4013      	ands	r3, r2
 8002286:	d102      	bne.n	800228e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2200      	movs	r2, #0
 800228c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	785b      	ldrb	r3, [r3, #1]
 8002298:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800229a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800229c:	68ba      	ldr	r2, [r7, #8]
 800229e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80022a0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	78db      	ldrb	r3, [r3, #3]
 80022a6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80022a8:	4313      	orrs	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	697a      	ldr	r2, [r7, #20]
 80022b2:	491b      	ldr	r1, [pc, #108]	; (8002320 <HAL_RTC_SetTime+0x148>)
 80022b4:	400a      	ands	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4918      	ldr	r1, [pc, #96]	; (8002324 <HAL_RTC_SetTime+0x14c>)
 80022c4:	400a      	ands	r2, r1
 80022c6:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6999      	ldr	r1, [r3, #24]
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	431a      	orrs	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	430a      	orrs	r2, r1
 80022de:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80022e0:	2313      	movs	r3, #19
 80022e2:	18fc      	adds	r4, r7, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 f9c4 	bl	8002674 <RTC_ExitInitMode>
 80022ec:	0003      	movs	r3, r0
 80022ee:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	22ff      	movs	r2, #255	; 0xff
 80022f6:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 80022f8:	2313      	movs	r3, #19
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d103      	bne.n	800230a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2229      	movs	r2, #41	; 0x29
 8002306:	2101      	movs	r1, #1
 8002308:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2228      	movs	r2, #40	; 0x28
 800230e:	2100      	movs	r1, #0
 8002310:	5499      	strb	r1, [r3, r2]

  return status;
 8002312:	2313      	movs	r3, #19
 8002314:	18fb      	adds	r3, r7, r3
 8002316:	781b      	ldrb	r3, [r3, #0]
}
 8002318:	0018      	movs	r0, r3
 800231a:	46bd      	mov	sp, r7
 800231c:	b006      	add	sp, #24
 800231e:	bdb0      	pop	{r4, r5, r7, pc}
 8002320:	007f7f7f 	.word	0x007f7f7f
 8002324:	fffbffff 	.word	0xfffbffff

08002328 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b086      	sub	sp, #24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	045b      	lsls	r3, r3, #17
 8002346:	0c5a      	lsrs	r2, r3, #17
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a22      	ldr	r2, [pc, #136]	; (80023dc <HAL_RTC_GetTime+0xb4>)
 8002354:	4013      	ands	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	0c1b      	lsrs	r3, r3, #16
 800235c:	b2db      	uxtb	r3, r3
 800235e:	223f      	movs	r2, #63	; 0x3f
 8002360:	4013      	ands	r3, r2
 8002362:	b2da      	uxtb	r2, r3
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	b2db      	uxtb	r3, r3
 800236e:	227f      	movs	r2, #127	; 0x7f
 8002370:	4013      	ands	r3, r2
 8002372:	b2da      	uxtb	r2, r3
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	b2db      	uxtb	r3, r3
 800237c:	227f      	movs	r2, #127	; 0x7f
 800237e:	4013      	ands	r3, r2
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	0d9b      	lsrs	r3, r3, #22
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2201      	movs	r2, #1
 800238e:	4013      	ands	r3, r2
 8002390:	b2da      	uxtb	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d11a      	bne.n	80023d2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	0018      	movs	r0, r3
 80023a2:	f000 f9d6 	bl	8002752 <RTC_Bcd2ToByte>
 80023a6:	0003      	movs	r3, r0
 80023a8:	001a      	movs	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	785b      	ldrb	r3, [r3, #1]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 f9cd 	bl	8002752 <RTC_Bcd2ToByte>
 80023b8:	0003      	movs	r3, r0
 80023ba:	001a      	movs	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	789b      	ldrb	r3, [r3, #2]
 80023c4:	0018      	movs	r0, r3
 80023c6:	f000 f9c4 	bl	8002752 <RTC_Bcd2ToByte>
 80023ca:	0003      	movs	r3, r0
 80023cc:	001a      	movs	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b006      	add	sp, #24
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	007f7f7f 	.word	0x007f7f7f

080023e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023e0:	b5b0      	push	{r4, r5, r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	60f8      	str	r0, [r7, #12]
 80023e8:	60b9      	str	r1, [r7, #8]
 80023ea:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2228      	movs	r2, #40	; 0x28
 80023f0:	5c9b      	ldrb	r3, [r3, r2]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d101      	bne.n	80023fa <HAL_RTC_SetDate+0x1a>
 80023f6:	2302      	movs	r3, #2
 80023f8:	e07e      	b.n	80024f8 <HAL_RTC_SetDate+0x118>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2228      	movs	r2, #40	; 0x28
 80023fe:	2101      	movs	r1, #1
 8002400:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2229      	movs	r2, #41	; 0x29
 8002406:	2102      	movs	r1, #2
 8002408:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10e      	bne.n	800242e <HAL_RTC_SetDate+0x4e>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	785b      	ldrb	r3, [r3, #1]
 8002414:	001a      	movs	r2, r3
 8002416:	2310      	movs	r3, #16
 8002418:	4013      	ands	r3, r2
 800241a:	d008      	beq.n	800242e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	785b      	ldrb	r3, [r3, #1]
 8002420:	2210      	movs	r2, #16
 8002422:	4393      	bics	r3, r2
 8002424:	b2db      	uxtb	r3, r3
 8002426:	330a      	adds	r3, #10
 8002428:	b2da      	uxtb	r2, r3
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d11c      	bne.n	800246e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	78db      	ldrb	r3, [r3, #3]
 8002438:	0018      	movs	r0, r3
 800243a:	f000 f961 	bl	8002700 <RTC_ByteToBcd2>
 800243e:	0003      	movs	r3, r0
 8002440:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	785b      	ldrb	r3, [r3, #1]
 8002446:	0018      	movs	r0, r3
 8002448:	f000 f95a 	bl	8002700 <RTC_ByteToBcd2>
 800244c:	0003      	movs	r3, r0
 800244e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002450:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	789b      	ldrb	r3, [r3, #2]
 8002456:	0018      	movs	r0, r3
 8002458:	f000 f952 	bl	8002700 <RTC_ByteToBcd2>
 800245c:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800245e:	0022      	movs	r2, r4
 8002460:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002468:	4313      	orrs	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
 800246c:	e00e      	b.n	800248c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	78db      	ldrb	r3, [r3, #3]
 8002472:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	785b      	ldrb	r3, [r3, #1]
 8002478:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800247a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 800247c:	68ba      	ldr	r2, [r7, #8]
 800247e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002480:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002488:	4313      	orrs	r3, r2
 800248a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	22ca      	movs	r2, #202	; 0xca
 8002492:	625a      	str	r2, [r3, #36]	; 0x24
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2253      	movs	r2, #83	; 0x53
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800249c:	2513      	movs	r5, #19
 800249e:	197c      	adds	r4, r7, r5
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f000 f8a3 	bl	80025ee <RTC_EnterInitMode>
 80024a8:	0003      	movs	r3, r0
 80024aa:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 80024ac:	197b      	adds	r3, r7, r5
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10d      	bne.n	80024d0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	4911      	ldr	r1, [pc, #68]	; (8002500 <HAL_RTC_SetDate+0x120>)
 80024bc:	400a      	ands	r2, r1
 80024be:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80024c0:	2313      	movs	r3, #19
 80024c2:	18fc      	adds	r4, r7, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 f8d4 	bl	8002674 <RTC_ExitInitMode>
 80024cc:	0003      	movs	r3, r0
 80024ce:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	22ff      	movs	r2, #255	; 0xff
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80024d8:	2313      	movs	r3, #19
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d103      	bne.n	80024ea <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2229      	movs	r2, #41	; 0x29
 80024e6:	2101      	movs	r1, #1
 80024e8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2228      	movs	r2, #40	; 0x28
 80024ee:	2100      	movs	r1, #0
 80024f0:	5499      	strb	r1, [r3, r2]

  return status;
 80024f2:	2313      	movs	r3, #19
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	781b      	ldrb	r3, [r3, #0]
}
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b006      	add	sp, #24
 80024fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002500:	00ffff3f 	.word	0x00ffff3f

08002504 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4a21      	ldr	r2, [pc, #132]	; (800259c <HAL_RTC_GetDate+0x98>)
 8002518:	4013      	ands	r3, r2
 800251a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	b2da      	uxtb	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	b2db      	uxtb	r3, r3
 800252c:	221f      	movs	r2, #31
 800252e:	4013      	ands	r3, r2
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	223f      	movs	r2, #63	; 0x3f
 800253c:	4013      	ands	r3, r2
 800253e:	b2da      	uxtb	r2, r3
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	0b5b      	lsrs	r3, r3, #13
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2207      	movs	r2, #7
 800254c:	4013      	ands	r3, r2
 800254e:	b2da      	uxtb	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11a      	bne.n	8002590 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	78db      	ldrb	r3, [r3, #3]
 800255e:	0018      	movs	r0, r3
 8002560:	f000 f8f7 	bl	8002752 <RTC_Bcd2ToByte>
 8002564:	0003      	movs	r3, r0
 8002566:	001a      	movs	r2, r3
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	785b      	ldrb	r3, [r3, #1]
 8002570:	0018      	movs	r0, r3
 8002572:	f000 f8ee 	bl	8002752 <RTC_Bcd2ToByte>
 8002576:	0003      	movs	r3, r0
 8002578:	001a      	movs	r2, r3
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	789b      	ldrb	r3, [r3, #2]
 8002582:	0018      	movs	r0, r3
 8002584:	f000 f8e5 	bl	8002752 <RTC_Bcd2ToByte>
 8002588:	0003      	movs	r3, r0
 800258a:	001a      	movs	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b006      	add	sp, #24
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	00ffff3f 	.word	0x00ffff3f

080025a0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68da      	ldr	r2, [r3, #12]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	21a0      	movs	r1, #160	; 0xa0
 80025b4:	438a      	bics	r2, r1
 80025b6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80025b8:	f7fe fc50 	bl	8000e5c <HAL_GetTick>
 80025bc:	0003      	movs	r3, r0
 80025be:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80025c0:	e00a      	b.n	80025d8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80025c2:	f7fe fc4b 	bl	8000e5c <HAL_GetTick>
 80025c6:	0002      	movs	r2, r0
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	1ad2      	subs	r2, r2, r3
 80025cc:	23fa      	movs	r3, #250	; 0xfa
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d901      	bls.n	80025d8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80025d4:	2303      	movs	r3, #3
 80025d6:	e006      	b.n	80025e6 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2220      	movs	r2, #32
 80025e0:	4013      	ands	r3, r2
 80025e2:	d0ee      	beq.n	80025c2 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	0018      	movs	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	b004      	add	sp, #16
 80025ec:	bd80      	pop	{r7, pc}

080025ee <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80025f6:	230f      	movs	r3, #15
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2240      	movs	r2, #64	; 0x40
 8002606:	4013      	ands	r3, r2
 8002608:	d12d      	bne.n	8002666 <RTC_EnterInitMode+0x78>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2180      	movs	r1, #128	; 0x80
 8002616:	430a      	orrs	r2, r1
 8002618:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800261a:	f7fe fc1f 	bl	8000e5c <HAL_GetTick>
 800261e:	0003      	movs	r3, r0
 8002620:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002622:	e015      	b.n	8002650 <RTC_EnterInitMode+0x62>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8002624:	f7fe fc1a 	bl	8000e5c <HAL_GetTick>
 8002628:	0002      	movs	r2, r0
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	1ad2      	subs	r2, r2, r3
 800262e:	210f      	movs	r1, #15
 8002630:	187b      	adds	r3, r7, r1
 8002632:	1879      	adds	r1, r7, r1
 8002634:	7809      	ldrb	r1, [r1, #0]
 8002636:	7019      	strb	r1, [r3, #0]
 8002638:	23fa      	movs	r3, #250	; 0xfa
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	429a      	cmp	r2, r3
 800263e:	d907      	bls.n	8002650 <RTC_EnterInitMode+0x62>
      {
        status = HAL_TIMEOUT;
 8002640:	230f      	movs	r3, #15
 8002642:	18fb      	adds	r3, r7, r3
 8002644:	2203      	movs	r2, #3
 8002646:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2229      	movs	r2, #41	; 0x29
 800264c:	2103      	movs	r1, #3
 800264e:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2240      	movs	r2, #64	; 0x40
 8002658:	4013      	ands	r3, r2
 800265a:	d104      	bne.n	8002666 <RTC_EnterInitMode+0x78>
 800265c:	230f      	movs	r3, #15
 800265e:	18fb      	adds	r3, r7, r3
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d1de      	bne.n	8002624 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002666:	230f      	movs	r3, #15
 8002668:	18fb      	adds	r3, r7, r3
 800266a:	781b      	ldrb	r3, [r3, #0]
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	b004      	add	sp, #16
 8002672:	bd80      	pop	{r7, pc}

08002674 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267c:	230f      	movs	r3, #15
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	2200      	movs	r2, #0
 8002682:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002684:	4b1d      	ldr	r3, [pc, #116]	; (80026fc <RTC_ExitInitMode+0x88>)
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	4b1c      	ldr	r3, [pc, #112]	; (80026fc <RTC_ExitInitMode+0x88>)
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	438a      	bics	r2, r1
 800268e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002690:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <RTC_ExitInitMode+0x88>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2220      	movs	r2, #32
 8002696:	4013      	ands	r3, r2
 8002698:	d10e      	bne.n	80026b8 <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	0018      	movs	r0, r3
 800269e:	f7ff ff7f 	bl	80025a0 <HAL_RTC_WaitForSynchro>
 80026a2:	1e03      	subs	r3, r0, #0
 80026a4:	d022      	beq.n	80026ec <RTC_ExitInitMode+0x78>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2229      	movs	r2, #41	; 0x29
 80026aa:	2103      	movs	r1, #3
 80026ac:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80026ae:	230f      	movs	r3, #15
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	2203      	movs	r2, #3
 80026b4:	701a      	strb	r2, [r3, #0]
 80026b6:	e019      	b.n	80026ec <RTC_ExitInitMode+0x78>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80026b8:	4b10      	ldr	r3, [pc, #64]	; (80026fc <RTC_ExitInitMode+0x88>)
 80026ba:	699a      	ldr	r2, [r3, #24]
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <RTC_ExitInitMode+0x88>)
 80026be:	2120      	movs	r1, #32
 80026c0:	438a      	bics	r2, r1
 80026c2:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	0018      	movs	r0, r3
 80026c8:	f7ff ff6a 	bl	80025a0 <HAL_RTC_WaitForSynchro>
 80026cc:	1e03      	subs	r3, r0, #0
 80026ce:	d007      	beq.n	80026e0 <RTC_ExitInitMode+0x6c>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2229      	movs	r2, #41	; 0x29
 80026d4:	2103      	movs	r1, #3
 80026d6:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80026d8:	230f      	movs	r3, #15
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	2203      	movs	r2, #3
 80026de:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <RTC_ExitInitMode+0x88>)
 80026e2:	699a      	ldr	r2, [r3, #24]
 80026e4:	4b05      	ldr	r3, [pc, #20]	; (80026fc <RTC_ExitInitMode+0x88>)
 80026e6:	2120      	movs	r1, #32
 80026e8:	430a      	orrs	r2, r1
 80026ea:	619a      	str	r2, [r3, #24]
  }

  return status;
 80026ec:	230f      	movs	r3, #15
 80026ee:	18fb      	adds	r3, r7, r3
 80026f0:	781b      	ldrb	r3, [r3, #0]
}
 80026f2:	0018      	movs	r0, r3
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b004      	add	sp, #16
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	46c0      	nop			; (mov r8, r8)
 80026fc:	40002800 	.word	0x40002800

08002700 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	0002      	movs	r2, r0
 8002708:	1dfb      	adds	r3, r7, #7
 800270a:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002710:	230b      	movs	r3, #11
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	1dfa      	adds	r2, r7, #7
 8002716:	7812      	ldrb	r2, [r2, #0]
 8002718:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 800271a:	e008      	b.n	800272e <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	3301      	adds	r3, #1
 8002720:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002722:	220b      	movs	r2, #11
 8002724:	18bb      	adds	r3, r7, r2
 8002726:	18ba      	adds	r2, r7, r2
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	3a0a      	subs	r2, #10
 800272c:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 800272e:	230b      	movs	r3, #11
 8002730:	18fb      	adds	r3, r7, r3
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	2b09      	cmp	r3, #9
 8002736:	d8f1      	bhi.n	800271c <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	b2da      	uxtb	r2, r3
 8002740:	230b      	movs	r3, #11
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	4313      	orrs	r3, r2
 8002748:	b2db      	uxtb	r3, r3
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b004      	add	sp, #16
 8002750:	bd80      	pop	{r7, pc}

08002752 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	0002      	movs	r2, r0
 800275a:	1dfb      	adds	r3, r7, #7
 800275c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800275e:	1dfb      	adds	r3, r7, #7
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	091b      	lsrs	r3, r3, #4
 8002764:	b2db      	uxtb	r3, r3
 8002766:	001a      	movs	r2, r3
 8002768:	0013      	movs	r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	189b      	adds	r3, r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	1dfb      	adds	r3, r7, #7
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	210f      	movs	r1, #15
 800277c:	400b      	ands	r3, r1
 800277e:	b2db      	uxtb	r3, r3
 8002780:	18d3      	adds	r3, r2, r3
 8002782:	b2db      	uxtb	r3, r3
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b004      	add	sp, #16
 800278a:	bd80      	pop	{r7, pc}

0800278c <__libc_init_array>:
 800278c:	b570      	push	{r4, r5, r6, lr}
 800278e:	2600      	movs	r6, #0
 8002790:	4d0c      	ldr	r5, [pc, #48]	; (80027c4 <__libc_init_array+0x38>)
 8002792:	4c0d      	ldr	r4, [pc, #52]	; (80027c8 <__libc_init_array+0x3c>)
 8002794:	1b64      	subs	r4, r4, r5
 8002796:	10a4      	asrs	r4, r4, #2
 8002798:	42a6      	cmp	r6, r4
 800279a:	d109      	bne.n	80027b0 <__libc_init_array+0x24>
 800279c:	2600      	movs	r6, #0
 800279e:	f000 f821 	bl	80027e4 <_init>
 80027a2:	4d0a      	ldr	r5, [pc, #40]	; (80027cc <__libc_init_array+0x40>)
 80027a4:	4c0a      	ldr	r4, [pc, #40]	; (80027d0 <__libc_init_array+0x44>)
 80027a6:	1b64      	subs	r4, r4, r5
 80027a8:	10a4      	asrs	r4, r4, #2
 80027aa:	42a6      	cmp	r6, r4
 80027ac:	d105      	bne.n	80027ba <__libc_init_array+0x2e>
 80027ae:	bd70      	pop	{r4, r5, r6, pc}
 80027b0:	00b3      	lsls	r3, r6, #2
 80027b2:	58eb      	ldr	r3, [r5, r3]
 80027b4:	4798      	blx	r3
 80027b6:	3601      	adds	r6, #1
 80027b8:	e7ee      	b.n	8002798 <__libc_init_array+0xc>
 80027ba:	00b3      	lsls	r3, r6, #2
 80027bc:	58eb      	ldr	r3, [r5, r3]
 80027be:	4798      	blx	r3
 80027c0:	3601      	adds	r6, #1
 80027c2:	e7f2      	b.n	80027aa <__libc_init_array+0x1e>
 80027c4:	080028e4 	.word	0x080028e4
 80027c8:	080028e4 	.word	0x080028e4
 80027cc:	080028e4 	.word	0x080028e4
 80027d0:	080028e8 	.word	0x080028e8

080027d4 <memset>:
 80027d4:	0003      	movs	r3, r0
 80027d6:	1812      	adds	r2, r2, r0
 80027d8:	4293      	cmp	r3, r2
 80027da:	d100      	bne.n	80027de <memset+0xa>
 80027dc:	4770      	bx	lr
 80027de:	7019      	strb	r1, [r3, #0]
 80027e0:	3301      	adds	r3, #1
 80027e2:	e7f9      	b.n	80027d8 <memset+0x4>

080027e4 <_init>:
 80027e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ea:	bc08      	pop	{r3}
 80027ec:	469e      	mov	lr, r3
 80027ee:	4770      	bx	lr

080027f0 <_fini>:
 80027f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f6:	bc08      	pop	{r3}
 80027f8:	469e      	mov	lr, r3
 80027fa:	4770      	bx	lr
